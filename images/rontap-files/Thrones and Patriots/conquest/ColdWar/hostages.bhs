int conquest destroy_city (String city_name);

conquest
{

  labels {
    AMERICANS,
    RUSSIANS,
    CAPTURED,
    FREED,
  }
  
  static int end_time = get_time_limit();
  int cur_time;

  static int fort_id = find_build(AMERICANS, "Fort");
  
  String city_name;
  int building2;
  static int num_hostages = num_units(CAPTURED);
  static int total_hostages = num_hostages;
  static int num_saved;
  static int num_lost;
  int nation;
  int unit;
  int building;
  static int diff = get_difficulty();
  int x;
  int y;
  static int num_freed = num_units(FREED);
  int reward;
  static int safe[];

  run_once {
    change_to_human(FREED);
    for (nation = 1; nation < 5; nation++) {
      disable_city_defeat(nation);
    }
    add_objective_text(parse("Hostages: $NUM0", num_hostages), 1, "");
    add_objective_text(parse("Freed: $NUM0", num_freed), 4, "");
    add_objective_text(parse("Saved: $NUM0", num_saved), 2, "");
    add_objective_text(parse("Lost: $NUM0", num_lost), 3, "");
    if (diff < 4) {
      add_objective_text($S("Hint: The Hostages are being held in buildings that have a flag on them."), 8, "");
    }
  }
  
  for (i = 0; i < num_buildings(RUSSIANS); i++) {
    building = find_build(RUSSIANS, "");
    if (object_health(RUSSIANS, building) <= 27-(diff*2)) {
      for (c = 0; c < num_cities(RUSSIANS); c++) {
        building2 = find_city_id(find_city_name(RUSSIANS));
        if (building != building2) {
          destroy_building(RUSSIANS, building);
        }
      }
    }
  }
  
  for (i = 0; i < num_units(CAPTURED); i++) {
    unit = find_unit(CAPTURED, "");
    if (object_health(CAPTURED, unit) != 100) {
      heal_object(CAPTURED, unit, 100);
    }
  }

  set_object_health(AMERICANS, fort_id, object_health(AMERICANS, fort_id)+1);
  
  cur_time = time_min();
  if (cur_time >= end_time) {
    if (num_saved > 0) {
      reward = num_saved * num_saved * 5;
      popup_dialog(parse("The hostages' families have paid us $NUM0 Tribute reward.", reward));
      give_player_ctw_tribute(reward);
      num_hostages = 0;
      change_objective_text(1, parse("Hostages: $NUM0", num_hostages));
      victory(AMERICANS);
    }
    else {
      defeat(AMERICANS);
    }
  }
  
  if (num_units(AMERICANS) == 0) {
    if (num_saved > 0) {
      reward = num_saved * num_saved * 5;
      popup_dialog(parse("The hostages' families have paid us $NUM0 Tribute reward.", reward));
      give_player_ctw_tribute(reward);
      num_hostages = 0;
      change_objective_text(1, parse("Hostages: $NUM0", num_hostages));
      victory(AMERICANS);
    }
    else {
      defeat(AMERICANS);
    }
  }  

  if (num_hostages == 0 && num_freed == 0 && num_saved > 0) {
    if (num_saved > 0) {
      reward = num_saved * num_saved * 5;
      if (reward > (7-diff) * 50) {
        popup_dialog(parse("The hostages' families have paid us $NUM0 Tribute reward.", reward));
      }
      else {
        popup_dialog(parse("The hostages' families have paid us $NUM0 Tribute reward and we have gained a Military Eureka Bonus Card.", reward));
        give_player_bonus_card("Military Eureka");
      }
      give_player_ctw_tribute(reward);      
      num_hostages = 0;
      change_objective_text(1, parse("Hostages: $NUM0", num_hostages));
      victory(AMERICANS);
    }
    else {
      defeat(AMERICANS);
    }
  }

  for (i = 0; i < num_units(CAPTURED); i++) {
    unit = find_all_unit(CAPTURED, "");
    if (!is_garrisoned(CAPTURED, unit)) {
      unit = switch_teams(FREED, CAPTURED, unit);
      building = find_build(AMERICANS, "Redoubt");
      x = object_position_x(AMERICANS, building);
      y = object_position_y(AMERICANS, building);
      unit_garrison_order(FREED, unit, AMERICANS, building);
    }
  }
  
  if (num_cities(AMERICANS) > 0) {
    city_name = find_city_name(AMERICANS);
    destroy_city(city_name);
  }  
  
  if (num_units(CAPTURED) != num_hostages) {
    num_hostages = num_units(CAPTURED);
    if (num_hostages < 0) {
      num_hostages = 0;
    }
    change_objective_text(1, parse("Hostages: $NUM0", num_hostages));
  }
  
  num_saved = 0;
  num_freed = 0;
  
  for (i = 0; i < num_units(FREED); i++) {
    unit = find_all_unit(FREED, "");
    if (is_garrisoned(FREED, unit)) {
      num_saved++;
      //kill_unit_anim(FREED, unit, 1);
    }
    else {
      num_freed++;
    }
  }
  change_objective_text(4, parse("Freed: $NUM0", num_freed));
  change_objective_text(2, parse("Saved: $NUM0", num_saved));
  if (total_hostages - num_lost != num_saved + num_hostages) {
    num_lost = total_hostages - num_saved - num_hostages - num_freed;
    change_objective_text(3, parse("Lost: $NUM0", num_lost));
  }
}

//  Destroy city buildings and get a count for how big the recruited army should be
int conquest destroy_city (String city_name)
{

  int building;
  String building_name;
  int build_destroyed = 0;
  int diff = get_difficulty();
  String build_array[] = ["Temple", "Market", "Library", "Senate", "University", "Farm", "Woodcutter's Camp", "Mine", "Granary", "Smelter", "Oil Well", "Lumber Mill"];
  String apt_array[] = ["Apt House A", "Apt House A1", "Apt House A2", "Apt House A3", "Apt House B", "Apt House B1", "Apt House B2", "Apt House B3", "Apt House C", "Apt House C1", "Apt House C2", "Apt House C3", "Apt House D", "Apt House D1", "Apt House D2", "Apt House D3", "Apt House E", "Apt House E1", "Apt House E2", "Apt House E3", "Office A", "Office A1", "Office A2", "Office A3", "Office B", "Office B1", "Office B2", "Office B3", "Office C", "Office C1", "Office C2", "Office C3", "Lenin Statue", "Courtyard Fountain"];
  int destroy_list[];

  nation = 1;
  
  for (step = 1; step < build_array.length; step++) {

    building_name = build_array[step];

    for (n = num_city_buildings(nation, city_name, building_name, 1); n > 0; n--) {
      building = find_build_at_city(nation, city_name, building_name, 1);
      destroy_building(nation, building);
      build_destroyed++;
    }

  }

  for (step = 1; step < apt_array.length; step++) {

    building_name = apt_array[step];

    for (n = num_city_buildings_using_type_name(nation, city_name, building_name, 1); n > 0; n--) {
      building = find_build_at_city_using_type_name(nation, city_name, building_name, 1);
      destroy_building(nation, building);
      build_destroyed++;
    }

  }

  building = find_city_id(city_name);
  destroy_building(nation, building);
  build_destroyed = build_destroyed + 4;
  if (diff > 4) build_destroyed + 2;

  return build_destroyed;
}