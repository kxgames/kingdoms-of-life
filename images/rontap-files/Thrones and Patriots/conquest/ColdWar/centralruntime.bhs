int conquest sum_tribute( int offerer, int offeree );
void conquest status_check( int who );

 conquest
{

  labels {
    AMERICANS,
    PANAMANIANS,
    GUATAMALANS,
    SALVADORANS,
    NICARAGUANS,
    COSTARICANS,
    REBELS,
  }

  static int capital_ids[] = [0,0,0,0,0,0,0,0];
  static int diff = get_difficulty();
  static int end_time = get_time_limit();
  int cur_time;
  static int nuke_check;

  int done;
  static int tac_nuke;
  static String unit_list[];
  static String dock_list[];
  
  String city_name;
  int unit;
  int building;
  int x;
  int y;
  static int attitudes[] = [10,10,10,10,10,10,10];
  static int fought[] = [0,0,0,0,0,0,0];
  static int trade[] = [0,0,0,0,0,0,0];    
  int nation;
  int high_score;
  int low_score;
  int temp_score;
  static int ally_once;
  int temp_attitude;
  int tribe;
  int factor;
  static int tribute_amount = 6000;
  int low_nation;
  int high_nation;
  static int players = num_players();
  
  static int cost[];
  static int score_cost[] = [0,0,0,0,0,0,0];
  static int temp_cost[] = [0,0,0,0,0,0,0];
  static int cur_ally;
  static int broken_allies;
  static int ally_made;
  static int costa_no;
  
  run_once {
    set_timer("ally_check", 1);
    if (diff == 1) {
      cost = [0,0,0,0,0,0,0];
    }
    else if (diff == 2) {
      cost = [0,0,0,100,100,100,100];
    }
    else if (diff == 3) {
      cost = [0,0,0,200,200,200,200];
    }
    else if (diff == 4) {
      cost = [0,0,0,400,400,300,300];
    }
    else if (diff == 5) {
      cost = [0,0,0,500,600,400,400];
    }
    else if (diff == 6) {
      cost = [0,0,0,600,800,500,500];
    }    
    if (diff > 1) {
      set_timer("random_drift", 1);
    }
    enable_trigger("allies");
    set_timer("comp_ally2", rand_int(700-(diff*50), 1000-(diff*20)));
    set_timer("set_attitudes", 120);
    set_timer("status_check", 1); 
    ctw_add_objective_text($S("Hint: Choose an ally. Each nation provides a different bonus. Click on a nation's capital to find out what bonus it provides."), "ally", "");

    for (i = 3; i < 7; i++) {
      city_name = find_capital(i);
      capital_ids[i] = find_city_id(city_name);
    }
    
    if (age(AMERICANS) == 6) {
      unit_list = ["Armored Scout Car", "Tank", "Howitzer", "Anti-Air Battery"];
      dock_list = ["Battleship", "Cruiser", "Aircraft Carrier", "Submarine", "Fishermen"];
    }
    else {
      unit_list = ["Armored Cavalry", "Main Battle Tank", "Rocket Artillery", "Anti-Air Missile"];
      dock_list = ["Advanced Battleship", "Missile Cruiser", "Aircraft Carrier", "Attack Submarine", "Fishermen"];
    }
    for (i = players; i > 2; i--) {
      diplomacy_set_wait(i);
    }
    diplomacy_set_reject(PANAMANIANS);
    enable_trigger("allies");
    set_timer("comp_ally2", rand_int(240, 800));
    set_timer("set_attitudes", 120);
    disable_trigger("guatamalans_no_ally");
    disable_trigger("salvadorans_no_ally");
    disable_trigger("nicaraguans_no_ally");
    disable_trigger("costaricans_no_ally");  
    disable_trigger("heal_vehicles");
    if (diff > 3) {
      set_timer("union", 300);
    }
    disable_trigger("unionize");
  }

  if (is_defeated(2)) {
    victory(1);
  }
  
  trigger unionize() {
    int new_team = 0;
    int cur_team = 0;
    int ally_guy = 0;
    string fed_team = "None";
      int unit_id = 0;
    int build_id = 0;
  
    //fixing problems with guys who are garrisoned
    int hidden; 



    if (have_alliance(1, 3)) {
      ally_guy = 3;
    }
    else if (have_alliance(1, 4)) {
      ally_guy = 4;
    }
    else if (have_alliance(1, 5)) {
      ally_guy = 5;
    }
    else if (have_alliance(1, 6)) {
      ally_guy = 6;
    }
  
    new_team = 2;
    new_capital = find_capital(2);


    fed_name = get_leader_name(new_team);  
    popup_dialog($S("The remaining nations have decided they cannot defeat you alone."));
    declare_war(1, new_team);

    for(cur_team = 2; cur_team < 7; cur_team++) {
      //probs switching stuff that has units inside
      hidden = find_inside_unit(cur_team, "");
      while (hidden > -1) {
        kill_unit_anim(cur_team, hidden, 1);
        hidden = find_inside_unit(cur_team, "");
      }  
      if (cur_team != ally_guy && !is_defeated(cur_team) && cur_team != new_team) {
      //////civilian/////////
        do {
          unit_id = find_all_unit(cur_team, "Citizen");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);

        do {
          unit_id = find_all_unit(cur_team, "Scholar");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);

        do {
          unit_id = find_all_unit(cur_team, "Caravan");
          if (is_on_transport(cur_team, unit_id)) {
            kill_unit_anim(cur_team, unit_id,2);
          }
          else {
            switch_teams(new_team, cur_team, unit_id);
          }
        } while(unit_id > -1);

        do {
          unit_id = find_all_unit(cur_team, "Merchant");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        ///////////////////////////

        //////////Castle/Special
        /*do {
          unit_id = find_all_unit(cur_team, "General");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);*/
        do {
          unit_id = find_all_unit(cur_team, "Transport");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Merchant Fleet");
          kill_unit_anim(cur_team, unit_id, 2);
        } while(unit_id > -1);
        ///////////////////////////
  
        ///////barracks////////////
        do {
          unit_id = find_all_unit(cur_team, "Javelineers");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Phalanx");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Archers");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Scout");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        ///////////////////////////
  
        ///////////Stable/////////
        do {
          unit_id = find_all_unit(cur_team, "Light Horse");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Cataphract");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Horse Archer");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        //////////////////////////

        /////////Siege//////////
        do {
          unit_id = find_all_unit(cur_team, "Catapult");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
       do {
          unit_id = find_all_unit(cur_team, "Supply Wagon");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        /////////////////////

        ///////Dock////////////
        do {
          unit_id = find_all_unit(cur_team, "Dromon");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Galley");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Fire Raft");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        do {
          unit_id = find_all_unit(cur_team, "Fishermen");
          switch_teams(new_team, cur_team, unit_id);
        } while(unit_id > -1);
        ///////////////////////////

        ////tower, fort, observation post/////
        do {
          build_id = find_build(cur_team, "Tower");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);
        do {
          build_id = find_build(cur_team, "Fort");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);
        do {
          build_id = find_build(cur_team, "Lookout");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);

        ////barracks, stable, siege factory, dock/////////
        do {
          build_id = find_build(cur_team, "Barracks");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);
        do {
          build_id = find_build(cur_team, "Stable");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);
        do {
          build_id = find_build(cur_team, "Siege Factory");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);
        do {
          build_id = find_build(cur_team, "Dock");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);

        /////woodcutter's camp, mine///////////
        do {
          build_id = find_build(cur_team, "Woodcutter's Camp");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);
        do {
          build_id = find_build(cur_team, "Mine");
          switch_teams(new_team, cur_team, build_id);
        } while(build_id > -1);
  
        ///////City////////////
        number_of_cities = num_cities(cur_team);
        for (i = 1; i <= number_of_cities; i++) {
          city_name = find_city_name(cur_team);
          city_id = find_city_id(city_name);
          switch_teams(new_team, cur_team, city_id);
          city_assimilate(new_team, city_name);
          city_id = find_city_id(city_name);
         set_object_health (new_team, city_id, 100);
        }
        ///////////////////////////
      }
    }

    while (num_type_upgrade(new_team, "Citizen") > 75) {
      unit_id = find_unit(new_team, "Citizen");
      kill_unit_anim(new_team, unit_id, 1);
    }

    while (num_type_upgrade(new_team, "Fishermen") > 10) {
      unit_id = find_unit(new_team, "Fishermen");
      kill_unit_anim(new_team, unit_id, 1);
    }
  
  }
  
  if (timer_expired("union")) {
    set_timer("union", 60);
    for (i = 3; i < 7; i++) {
      if (is_defeated(i)) {
        done++;
      }
      if (have_alliance(i, 1)) {
        done++;
      }
      if (done >= 2) {
        enable_trigger("unionize");
        stop_timer("union");
        break;
      }
    }
  }

  if (offer_made(AMERICANS, PANAMANIANS)) {
    reject_offer(PANAMANIANS, AMERICANS);
  }
  
  if (costa_no == 1) {
    if (offer_made(AMERICANS, COSTARICANS)) {
      reject_offer(COSTARICANS, AMERICANS);
    }
  }
  
  if (timer_expired("status_check")) {
    set_timer("status_check",1);
    for (a = 1; a < num_players()+1; a++) {
      for (i = 1; i < num_players()+1; i++) {
        if (a == i) {
          i++;
        }
        if (i > num_players()) {
          break;
        }
        if (have_alliance(a,i)) {
          for (t = 1; t < num_players()+1; t++) {
            if (t == a) {
              t++;
            }
            if (t == i) {
              t++;
            }
            if (t == a) {
              t++;
            }
            if (t > num_players()) {
              break;
            }
            if (have_peace(a,t)) {
              if (!have_peace(i,t)) {
                make_peace(i,t);
              }
            }
            else {
              if (have_peace(i,t)) {
                declare_war(i,t);
              }
            }
          }
        }
      }
    }
  }

  if (timer_expired("random_drift")) {
    for (i = 2; i < cost.length; i++) {
      cost[i] += rand_int(diff-2,diff+3);
    }
    set_timer("random_drift", 300);
  }
  
  if (timer_expired("score_adjuster")) {
    high_score = 0;
    low_score = 0;
    for (nation = players; nation > 0; nation--) {
      temp_score = score(nation);
      if (temp_score > high_score) high_score = temp_score;
      else if (temp_score < low_score) low_score = temp_score;
    }
    if (high_score == 1) {
      for (z = 2; z < 5; z++) {
        score_cost[z] = (score(1) - score(z))/(160-diff*10);
      }
      for (z = 5; z < 7; z++) {
        score_cost[z] = -((score(1) - score(z))/(160-diff*10));
      }
    } else if (low_score == 1) {
      for (z = 2; z < 4; z++) {
        score_cost[z] = -((score(1) - score(z))/(160-diff*10));
      }
      for (z = 4; z < 7; z++) {
        score_cost[z] = (score(1) - score(z))/(160-diff*10);
      }
    }
    for (nation = num_players(); nation > 1; nation--) {
      if (fought[nation] == 0) {
        if (have_fought(nation, 1)) {
          fought[nation] = 1;
        }
      }
      if (have_trade(nation, 1)) {
        if (trade[nation] == 0) {
          trade[nation] = 1;
        }
      } else {
        if (trade[nation] == 1) {
          trade[nation] = 0;
        }
      }
    }
  }

  trigger allies() {
    for (nation = players; nation > 1; nation--) {
      if (cur_ally == nation) {
        if (!have_alliance(nation, 1)) {
          broken_allies++;
          cur_ally = 0;
        }
        else if (is_defeated(nation)) {
         cur_ally = 0;
        }
      }    
      if (have_alliance(1, nation)) {
        cur_ally = nation;
      }
    }
  } 

  for (nation = players; nation > 1; nation--) {
    for (tribe = players; tribe > 1; tribe--) {
      if (cost[nation] <= 0) {
        cost[nation] = 1;
      }
      temp_attitude = fought[nation] + broken_allies - trade[nation];
      set_timer("diplo", rand_int(50, 250));
      if (sum_tribute(nation,1) > 0) {
        reject_offer(nation, 1);
      }
      else if (offer_made(1, nation)) {
        tribute_amount = sum_tribute(1,nation);
        if (is_offering_peace(1, nation) || diff == 1) {
          temp_attitude += fought[nation];
          peace_cost = cost[nation] + (temp_attitude * (10+diff)) + score_cost[nation];      
          peace_cost += -peace_cost%100;    
          if (tribute_amount >= peace_cost) {
            accept_offer(nation, 1);
            temp_cost[nation] = 0; 
            set_timer("comp_ally2", rand_int(150-(diff*10),360-(diff*10)));                
          } else {
            make_counter_offer(1, nation, "Food", peace_cost - tribute_amount, $S("We will need a more compelling offer from you."));
            //attitudes[nation]--;
          }
        } 
        else if (is_offering_alliance(1, nation)) {
          temp_attitude += broken_allies - trade[nation];
          ally_cost = (cost[nation] * 2) + (temp_attitude * (13+(diff*2))) + (score_cost[nation] * 2);
          ally_cost += -ally_cost%100;
          if (tribute_amount >= ally_cost || diff == 1) {
            accept_offer(nation, 1);
            temp_cost[nation] = 0;    
            set_timer("comp_ally2", rand_int(30,300));
            status_check(nation);               
          } else {
            make_counter_offer(1, nation, "Metal", ally_cost - tribute_amount, $S("We will need a more compelling offer from you."));
            //attitudes[nation]--;
          }
        } 
        else {//if (attitudes[nation] > 2) {
          if (have_war(1,nation)) {
            temp_cost[nation] += -tribute_amount;
          }
          else if (have_peace(1,nation)) {
            temp_cost[nation] += -tribute_amount/2;
          }
          accept_offer(nation, 1);
        } 
      }
    }
  }

  if (timer_expired("comp_ally2")) {
    ally_array = [0,0,0,0,0,0,0];
    set_timer("comp_ally", rand_int(600-(diff*50), 900-(diff*20)));
    for (nation = players; nation > 1; nation--) {
      if (ally_array[nation] == 0) {
        for (tribe = players; tribe > 1; tribe--) {
          if (tribe == nation) {
            tribe--;
          }
          if (tribe == 1) {
            break;
          }
          if (have_alliance(nation,tribe)) {
            ally_array[nation] = 1;
            ally_array[tribe] = 1;
          }
        }
      }
    }  
    quit_out = 0;
    for (nation = players; nation > 1; nation--) {
      if (quit_out == 1) {
        break;
      }
      if (ally_array[nation] == 0) {
        for (tribe = players; tribe > 1; tribe--) {
          if (ally_array[tribe] == 0) {
            if (have_peace(nation,tribe)) {
              for (m = 2; m < num_players()+2; m++) {
                if (have_alliance(nation,m)) {
                  break;
                }
                if (m == num_players()+1) {
                  make_alliance(nation,tribe);
                  quit_out = 1;
                }
              }

            }
            else {
              make_peace(nation,tribe);
              quit_out = 1;
            }
          }
        }
      }
    }      
  }


  //trigger (offer_made(macedonians, kashmir) || timer_expired("wait_expired")) {
   // diplomacy_set_auto(kashmir);
  // / set_timer("wait_expire", rand_int(30, 300));
 // }


  cur_time = time_min();
  if (cur_time >= end_time) {
    defeat(AMERICANS);
  }

  if (timer_expired("ally_check")) {
    set_timer("ally_check", 1);
    ally_made = 0;
    for (i = 3; i < num_players()+1; i++) {
      if (have_alliance(i, 1)) {
        ally_made = 1;
        break;
      }
    }
  }

  if (ally_made == 0 && tac_nuke != 1) {
    if (object_selected(GUATAMALANS, find_city_id(find_capital(GUATAMALANS))) && num_objects_selected(AMERICANS) == 0) {
      bubble_text_obj($S("Ally bonus: Heals land vehicles"), GUATAMALANS, capital_ids[GUATAMALANS]);
      clear_selection();
    }
  
    if (object_selected(SALVADORANS, find_city_id(find_capital(SALVADORANS))) && num_objects_selected(AMERICANS) == 0) {
      if (costa_no == 0) {
        bubble_text_obj($S("Ally bonus: Discover an ancient Wonder"), SALVADORANS, capital_ids[SALVADORANS]);
      }
      else {
        bubble_text_obj($S("Ally bonus: They will not ally with you"), SALVADORANS, capital_ids[SALVADORANS]);
      }
      clear_selection();
    }  

    if (object_selected(NICARAGUANS, find_city_id(find_capital(NICARAGUANS))) && num_objects_selected(AMERICANS) == 0) {
      bubble_text_obj($S("Ally bonus: Gain Unique Heavy Infantry"), NICARAGUANS, capital_ids[NICARAGUANS]);
      clear_selection();
    }

    if (object_selected(COSTARICANS, find_city_id(find_capital(COSTARICANS))) && num_objects_selected(AMERICANS) == 0) {
      if (!building_destroyed(COSTARICANS, 2007) && tac_nuke != 2) {
        bubble_text_obj($S("Ally bonus: Gain Attack Helicopters"), COSTARICANS, capital_ids[COSTARICANS]);
      }
      else if (tac_nuke != 2) {
        bubble_text_obj($S("Ally bonus: Gain +500 Oil"), COSTARICANS, capital_ids[COSTARICANS]);
      }
      else {
        bubble_text_obj($S("Ally bonus: They will not ally with you"), SALVADORANS, capital_ids[SALVADORANS]);
      }
      clear_selection();
    }
  }

  trigger guatamalans_ally(have_alliance(AMERICANS, GUATAMALANS)) {
    popup_dialog($S("With the signing of our alliance, the Guatemalans will repair all our land vehicles."));
    enable_trigger("heal_vehicles");
    set_timer("healing", 1);
    enable_trigger("guatamalans_no_ally");
    disable_trigger("salvadorans_ally");
    disable_trigger("nicaraguans_ally");
    disable_trigger("costaricans_ally");
  }

  trigger heal_vehicles(timer_expired("healing")) {
    enable_trigger("heal_vehicles");
    set_timer("healing", 1);
    for (i = 0; i < num_unit_category(AMERICANS, "Mech"); i++) {
      unit = find_all_military_category(AMERICANS, "Mech");
      building = object_health(AMERICANS, unit);
      if (building < 100) {
        heal_object(AMERICANS, unit, 2);
      }
    }
    for (i = 0; i < num_unit_category(AMERICANS, "Artillery"); i++) {
      unit = find_all_military_category(AMERICANS, "Artillery");
      building = object_health(AMERICANS, unit);
      if (building < 100) {
        heal_object(AMERICANS, unit, 2);
      }
    }
    for (i = 0; i < num_type(AMERICANS, "Supply Wagon"); i++) {
      unit = find_all_unit(AMERICANS, "Supply Wagon");
      building = object_health(AMERICANS, unit);
      if (building < 100) {
        heal_object(AMERICANS, unit, 2);
      }
    }    
  }
  
  trigger (tac_nuke == 2 && !have_alliance(AMERICANS, COSTARICANS)) {
    popup_dialog($S("The Costa Ricans have destroyed our blueprints for Attack Helicopters."));
    lose_upgrade(1, "Attack Helicopter");
    set_preq("Attack Helicopter", "Information Age", "The Art of War");
  }
  
  trigger (tac_nuke == 2) {
    set_timer("heli_check", 1);
  }
  
  if (timer_expired("heli_check")) {
    if (have_alliance(AMERICANS, COSTARICANS)) {
      set_timer("heli_check", 1);
    }
    for (i = 2; i < num_players()+1; i++) {
      if (age(i) == 6) {
        if (have_tech(i, "Attack Helicopter")) {
          lose_upgrade(i, "Attack Helicopter");
        }
      }
    }
  }
  
  trigger salvadorans_ally(have_alliance(AMERICANS, SALVADORANS)) {
    city_name = find_city_name(AMERICANS);
    popup_dialog(parse("The Salvadorans have shared with us the hidden location of the Temple of Tikal. Apparently it was not far from our city of $STRING0.", city_name));
    create_building_near(AMERICANS, 29, 34, "Temple of Tikal", 75);
    enable_trigger("salvadorans_no_ally");
    disable_trigger("guatamalans_ally");
    disable_trigger("nicaraguans_ally");
    disable_trigger("costaricans_ally");
  }  

  trigger nicaraguans_ally(have_alliance(AMERICANS, NICARAGUANS)) {
    if (age(AMERICANS) == 6) {
      popup_dialog($S("The Nicaraguans have agreed to let us train their Recoilless Guns at our Barracks in gratitude for our new alliance."));
    }
    else {
      popup_dialog($S("The Nicaraguans have agreed to let us train their Dragon AT Missiles at our Barracks in gratitude for our new alliance."));
    }
    disable_type_by_tribe("Bazooka", "Americans");
    disable_type_by_tribe("Anti-Tank Missile", "Americans");
    enable_type_by_tribe("Recoilless Gun", find_nation(AMERICANS), "Barracks", 0, 1);
    if (!have_tech(AMERICANS, "Recoilless Gun")) {
      gain_upgrade(AMERICANS, "Recoilless Gun");
    }
    enable_type_by_tribe("Dragon AT Missile", find_nation(AMERICANS));
    if (age(1) == 7) {
      gain_upgrade(AMERICANS, "Dragon AT Missile");
    }    
    enable_trigger("nicaraguans_no_ally");
    disable_trigger("guatamalans_ally");
    disable_trigger("salvadorans_ally");
    disable_trigger("costaricans_ally");
  }

  trigger costaricans_ally(have_alliance(AMERICANS, COSTARICANS)) {
    city_name = find_city_name(AMERICANS);
    if (age(1) == 6) {
      popup_dialog(parse("The Costa Ricans have taught us how to build Attack Helicopters."));
      set_preq("Attack Helicopter", "Modern Age", "The Art of War");
      gain_upgrade(1, "Attack Helicopter");
      tac_nuke = 2;
      nuke_check = 1;
    }
    else {
      popup_dialog($S("The Costa Ricans have thanked us for our alliance with a one-time gift of 500 Oil."));
      give_good(AMERICANS, "Oil", 500);
      tac_nuke = 2;
    }
    enable_trigger("costaricans_no_ally");
    disable_trigger("guatamalans_ally");
    disable_trigger("salvadorans_ally");
    disable_trigger("nicaraguans_ally");
  }

  trigger guatamalans_no_ally(!have_alliance(AMERICANS, GUATAMALANS)) {
    popup_dialog($S("With the end of our alliance, the Guatemalans will no longer repair our vehicles."));
    disable_trigger("heal_vehicles");
    enable_trigger("guatamalans_ally");
    enable_trigger("salvadorans_ally");
    enable_trigger("nicaraguans_ally");
    enable_trigger("costaricans_ally");  
  }
  
  trigger salvadorans_no_ally(!have_alliance(AMERICANS, SALVADORANS)) {
    building = find_build(AMERICANS, "Temple of Tikal");
    if (building > 0) {
      popup_dialog($S("The Salvadorans have destroyed the Temple of Tikal."));
      destroy_building(AMERICANS, building);
    } 
    enable_trigger("guatamalans_ally");
    enable_trigger("salvadorans_ally");
    enable_trigger("nicaraguans_ally");
    enable_trigger("costaricans_ally");  
  }  

  trigger nicaraguans_no_ally(!have_alliance(AMERICANS, NICARAGUANS)) {
    if (age(AMERICANS) == 6) {
      popup_dialog($S("The Nicaraguans will no longer help us train Recoilless Guns."));
    }
    else {
      popup_dialog($S("The Nicaraguans will no longer help us train Dragon AT Missiles."));
    }
    disable_type_by_tribe("Recoilless Gun", "Americans");
    disable_type_by_tribe("Dragon AT Missile", "Americans");
    enable_type_by_tribe("Bazooka", find_nation(AMERICANS), "Barracks", 0, 1);
    if (!have_tech(AMERICANS, "Bazooka")) {
      gain_upgrade(AMERICANS, "Bazooka");
    }
    enable_type_by_tribe("Anti-Tank Missile", find_nation(AMERICANS));
    if (age(1) == 7) {
      gain_upgrade(AMERICANS, "Anti-Tank Missile");
    }
    enable_trigger("guatamalans_ally");
    enable_trigger("salvadorans_ally");
    enable_trigger("nicaraguans_ally");
    enable_trigger("costaricans_ally");  
  }

  trigger costaricans_no_ally(!have_alliance(AMERICANS, COSTARICANS)) {
    costa_no = 1;
    enable_trigger("guatamalans_ally");
    enable_trigger("salvadorans_ally");
    enable_trigger("nicaraguans_ally");
    //enable_trigger("costaricans_ally");  
  }
  
}


int conquest sum_tribute( int offerer, int offeree )
{
  int total;
  String resources[] = ["Food", "Wealth", "Metal", "Timber", "Oil"];

  for (z = 0; z < resources.length; z++) {
    total += amount_offered(offerer,offeree,resources[z]);
  }

  return total;

}

void conquest status_check( int who )
{

  int macedonians = 1;
  int nation;
  
  for (nation = num_players(); nation > 1; nation--) {
    if (nation == who) {
      nation--;;
    }
    if (nation == 1) {
      break;
    }
    if (have_peace(macedonians, nation)) {
      make_peace(who, nation);
    }
    else if (have_war(macedonians, nation)) {
      declare_war(who, nation);
    }
  }

}