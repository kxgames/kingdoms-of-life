//SKIRMISHRUNTIME.BHS
void conquest set_resources_rate (int who);
void conquest ai_build ( );

conquest
{

  labels {
    ATTACKER,
    DEFENDER,
  }
  
  int num_forts[] = [0,1,1];
  int building;
  static int diff = get_difficulty();

  static int end_time = get_time_limit();
  int cur_time;

  run_once {
    set_timer("res_check", 1);
    set_resources_rate(ATTACKER);
    set_resources_rate(DEFENDER);
    set_timer("build_units", 1);
    set_timer("place_redoubt", 1);
    set_timer("place_econ", 1);
    set_timer("raid", 1);
    set_timer("attack", 180-(diff*10));
  }

  cur_time = time_min();
  if (cur_time >= end_time) {
    defeat(ATTACKER);
  }
  
  if (timer_expired("raid")) {
    set_timer("raid", 120-(diff*10));
    building = find_unit(1, "Citizen");
    if (building < 0) {
      building = find_unit(1, "");
    }
    for (i = 0; i < 5; i++) {
      unit = find_military(2);
      unit_attack_order(2, unit, 1, building);
    }
  }
  
  if (timer_expired("attack")) {
    set_timer("attack", 180-(diff*10));
    building = find_build(1, "Fort");
    if (building < 0) {
      building = find_build(1, "");
    }
    for (i = 0; i < 15; i++) {
      unit = find_military(2);
      unit_attack_order(2, unit, 1, building);
    }
  }  

  if (num_type_upgrade(ATTACKER, "Redoubt") != num_forts[ATTACKER]) {
    //set_resources_rate(ATTACKER);
    num_forts[ATTACKER] = num_type_upgrade(ATTACKER, "Redoubt");
  }
  
  if (num_type_upgrade(DEFENDER, "Redoubt") != num_forts[DEFENDER]) {
    //set_resources_rate(DEFENDER);
    num_forts[DEFENDER] = num_type_upgrade(DEFENDER, "Redoubt");
  }
  
 // set_resources_rate(2);
  
  if (num_forts[ATTACKER] == 0) {
    defeat(ATTACKER);
  }
  
  if (num_forts[DEFENDER] == 0) {
    defeat(DEFENDER);
  }
  
  if (timer_expired("build_units")) {
    for (n = num_forts[DEFENDER]; n > 0; n--) {
      ai_build();
    }
    set_timer("build_units", 23-(diff*2));
  }
  
  if (timer_expired("place_redoubt")) {
    set_timer("place_redoubt", 120-(diff*10));
    if (num_type_upgrade(DEFENDER, "Fort") < num_type_upgrade(ATTACKER, "Fort")+diff) {
      building = find_build(DEFENDER, "Redoubt");
      place_orphan_building (DEFENDER, "Redoubt", building);
    }
  }
  
  if (timer_expired("place_econ")) {
    set_timer("place_econ", 25-(diff*2));
    if (num_type_upgrade(DEFENDER, "Dock") < num_type_upgrade(ATTACKER, "Dock")+diff) {
      building = find_build(DEFENDER, "Redoubt");
      place_orphan_building(DEFENDER, "Dock", building);
    }
  }
  
}

void conquest set_resources_rate (int who)
{

  int amount = 20;
  int diff = get_difficulty();
  //if (diff == 1) {
   // amount = 50;
  //}
  //else if (diff > 4) {
  //  amount = 20;
  //}/
  //else {
    amount = 25;
  //}  
  
  //amount=3;

  String resource_types[] = ["Food", "Timber", "Wealth", "Oil", "Metal"];
  int rate = amount * num_type_upgrade(who, "Fort"); 
 
  for (i = 0; i < resource_types.length; i++) {
    set_base_rate(who, resource_types[i], amount);
  }
  
  //if (diff < 5) {
  //  amount = 25;
  //}
  //else if (diff > 4) {
   // amount = 20;
  //}
  
  //rate += amount + amount * num_type_upgrade(who, "Redoubt");
  
  //set_base_rate(who, "Metal", rate);
  
}

void conquest ai_build ( ) 
{

  String am_mod_units[] = ["Marine Infantry", "Bazooka", "Heavy Machine Gun", "Flamethrower", "SAS", "Armored Scout Car", "Tiger Tank", "Helicopter"];
  String am_inf_units[] = ["Assault Marines", "Anti-Tank Missile", "Advanced Machine Gun", "Flamethrower", "SAS", "Armored Cavalry", "Leopard Tank", "Attack Helicopter"];
  String ru_mod_units[] = ["Red Guards Infantry", "Bazooka", "Heavy Machine Gun", "Katyusha Rocket", "Special Forces", "Armored Scout Car", "Tank", "Helicopter"];
  String ru_inf_units[] = ["Shock Infantry", "Anti-Tank Missile", "Advanced Machine Gun", "Katyusha Rocket", "Elite Special Forces", "Armored Cavalry", "T80 Tank", "Attack Helicopter"];
  String ne_mod_units[] = ["Infantry", "Bazooka", "Heavy Machine Gun", "Flamethrower", "Special Forces", "Armored Scout Car", "Tank", "Helicopter"];
  String ne_inf_units[] = ["Assault Infantry", "Anti-Tank Missile", "Advanced Machine Gun", "Flamethrower", "Elite Special Forces", "Armored Cavalry", "Main Battle Tank", "Helicopter"];
  String support_units[] = ["Citizen", "General", "Supply Wagon"];

  int who = 2;
  String nation_name = find_nation(who);
  int cur_age = age(who);
  int unit = rand_int(0, 13); 
  
  for (i = 0; i < support_units.length; i++) {
    if (num_type_upgrade(who, "Fort") > num_type_upgrade(who, support_units[i])) {
      train_unit_with_cost(who, 1, support_units[i]);
    }
  }
  
  for (i = 0; i < num_type_upgrade(who, "Fort"); i++) {
    if (nation_name == "Americans") {
      if (cur_age == 6) {
        train_unit_with_cost(who, 1, am_mod_units[rand_int(0,am_mod_units.length-1)]);
      }
        else {
        train_unit_with_cost(who, 1, am_inf_units[rand_int(0,am_inf_units.length-1)]);
      }
    }
    else if (nation_name == "Russians") {
      if (cur_age == 6) {
        train_unit_with_cost(who, 1, ru_mod_units[rand_int(0,ru_mod_units.length-1)]);
      }
      else {
        train_unit_with_cost(who, 1, ru_inf_units[rand_int(0,ru_inf_units.length-1)]);
      }
    }  
    else {
      if (cur_age == 6) {
        train_unit_with_cost(who, 1, ne_mod_units[rand_int(0,ne_mod_units.length-1)]);
      }
      else {
        train_unit_with_cost(who, 1, ne_inf_units[rand_int(0,ne_inf_units.length-1)]);
      }    
    }
  }

}