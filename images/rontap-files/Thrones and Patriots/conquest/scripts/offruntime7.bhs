//barbarians at the gates! scenario setup

include "ctw_lib.bhs"

conquest 
{
  labels {
    ATTACKER,
    DEFENDER1,
    DEFENDER2,
    DEFENDER3,
  }

  static String civilian_type[] = ["Citizen", "Caravan", "Merchant", "Scholar", "Armed Caravan", "Armed Merchant"];
  static int defender;
  int new_x;
  int new_y;
  int impale_units;
  static int impale;
  static int attack_here;
  static String my_capital = find_city_with_num(1,1);
  static int my_capital_id = find_city_id(my_capital);
  static int amount;
  static int amount2;
  static String def1_capital = find_capital(DEFENDER1);
  static String def2_capital = find_capital(DEFENDER2);
  static String def3_capital = find_capital(DEFENDER3);
  static int def1_cap_id = find_city_id(def1_capital);
  static int def2_cap_id = find_city_id(def2_capital);
  static int def3_cap_id = find_city_id(def3_capital);
  static int x2 = object_position_x(DEFENDER1, def1_cap_id) + 5;
  static int y2 = object_position_y(DEFENDER1, def1_cap_id);
  static int x3 = object_position_x(DEFENDER2, def2_cap_id) + 5;
  static int y3 = object_position_y(DEFENDER2, def2_cap_id);
  static int x4 = object_position_x(DEFENDER3, def3_cap_id) + 5;
  static int y4 = object_position_y(DEFENDER3, def3_cap_id);
  static int diff = get_difficulty();
  static int diffh = 1;
  int x5;
  int y5;
  static int capital_attack = 1;
  static String my_second_city;
  static int my_second_city_id = find_city_id(my_capital);
  static int siege = 0;
  static int build_siege;
  static int raid_amount = 100;
  static int start_age = get_starting_age();
  static int end_age = get_ending_age();
  static int x2b;
  static int y2b;
  static int x2h;
  static int y2h;
  static int x2s;
  static int y2s;
  static int x3b;
  static int y3b;
  static int x3h;
  static int y3h;
  static int x3s;
  static int y3s;
  static int x4b;
  static int y4b;
  static int x4h;
  static int y4h;
  static int x4s;
  static int y4s;
  int rax;
  int siege_w;
  int horse;
  static time_limit = 25;

  run_once {
    time_limit = get_time_limit();
    disable_all_triggers();
    enable_trigger("the_end");
    enable_trigger("the_middle");
    force_transport_ability(2);
    force_transport_ability(3);
    force_transport_ability(4);
    force_transport_ability(5);
    set_population_cap(2, 200);
    set_population_cap(3, 200);
    set_population_cap(4, 200);
    disable_tech(DEFENDER1, "Classical Age");
    disable_tech(DEFENDER2, "Classical Age");
    disable_tech(DEFENDER3, "Classical Age");
    set_timer("giveResources", 240);
    if (diff == 1) amount = 120;
    else if (diff == 2) amount = 110;
    else if (diff == 3) amount = 205;
    else if (diff >= 4) amount = 195;
    if (diff <= 3) amount2 = 0;
    else if (diff >= 4) amount2 = 100;
    set_timer("raid_player", raid_amount);
    for (defender = 4; defender > 2; defender--) {
      if (num_cities(defender) == 0) {
        new_x = get_starting_loc_x(2);
        new_y = get_starting_loc_y(2);
        create_unit_upgrade(defender, new_x, new_y, "citizen", 4);
        if (age(defender) > 2) {
          create_unit_upgrade(defender, new_x, new_y, "hoplites", 2);
          create_unit_upgrade(defender, new_x, new_y, "bowmen", 2);
          create_unit_upgrade(defender, new_x, new_y, "slingeres", 2);
        }
        else {
          create_unit(defender, new_x, new_y, "barbarian phalanx", 2);
          create_unit(defender, new_x, new_y, "Barbarian Archers", 2);
          create_unit(defender, new_x, new_y, "barbarian javelineers", 2);
        }
        give_good(defender, "Food", 100);
        give_good(defender, "Timber", 100);
      }
    }
    defender = 2;
    rax = find_build(defender, "barracks");
    horse = find_build(defender, "stable");
    siege_w = find_build(defender, "siege factory");
    x2b = object_position_x(defender, rax) + 1;
    y2b = object_position_y(defender, rax);
    x2h = object_position_x(defender, horse) + 1;
    y2h = object_position_y(defender, horse);
    x2s = object_position_x(defender, siege) + 1;
    y2s = object_position_y(defender, siege);
    defender = 3;
    rax = find_build(defender, "barracks");
    horse = find_build(defender, "stable");
    siege_w = find_build(defender, "siege factory");
    x3b = object_position_x(defender, rax) + 1;
    y3b = object_position_y(defender, rax);
    x3h = object_position_x(defender, horse) + 1;
    y3h = object_position_y(defender, horse);
    x3s = object_position_x(defender, siege) + 1;
    y3s = object_position_y(defender, siege);
    defender = 4;
    rax = find_build(defender, "barracks");
    horse = find_build(defender, "stable");
    siege_w = find_build(defender, "siege factory");
    x4b = object_position_x(defender, rax) + 1;
    y4b = object_position_y(defender, rax);
    x4h = object_position_x(defender, horse) + 1;
    y4h = object_position_y(defender, horse);
    x4s = object_position_x(defender, siege) + 1;
    y4s = object_position_y(defender, siege);
    if (get_age() > 3) {
      disable_trigger("barbarians");
    }
    else {
      enable_trigger("barbarians");
    }

  }

  trigger barbarians(age(1) == get_ending_age()) {
    barbarian_upgrade();
  }

  cur_time = time();

  trigger (cur_time >= time_limit) {
    victory(1);
  }

  if (timer_expired("raid_player")) {
    set_timer("raid_player", amount); 
    enable_trigger("create_guys");
  }

  trigger create_guys() {
    //create units
    if (age(2) > 2) {
      create_unit_upgrade(DEFENDER1, x2b, y2b, "slingers", diffh);
      if (time_later_than(20) && diff < 3) create_unit_in_group(DEFENDER1, x2b, y2b, "hoplites", diffh);
    }
    else {
      create_unit_upgrade(DEFENDER1, x2b, y2b, "barbarian javalineers", diffh);
      if (time_later_than(20) && diff < 3) create_unit_in_group(DEFENDER1, x2b, y2b, "barbarian phalanx", diffh);
    }
    if (age(3) > 2) {
      create_unit_upgrade(DEFENDER2, x3b, y3b, "slingers", diffh);
      if (time_later_than(20) && diff < 3) create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", diffh);
      create_unit_in_group(DEFENDER2, x3b, y3b, "bowmen", diffh);
      if (diff > 2) create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", diffh);
      if (diff == 5) create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", diffh);
    }
    else {
      create_unit_upgrade(DEFENDER2, x3b, y3b, "barbarian javelineers", diffh);
      if (time_later_than(20) && diff < 3) create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
      create_unit_in_group(DEFENDER2, x3b, y3b, "Barbarian Archers", diffh);
      if (diff > 2) create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
      if (diff == 5) create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
    }
    //if player advances an age
    if ((age(ATTACKER) + 1) == end_age) {
      if (age(2) > 2) {
        create_unit_in_group(DEFENDER1, x2b, y2b, "hoplites", diffh);
        create_unit_in_group(DEFENDER1, x2s, y2s, "light horse", diffh);
      }
      else {
        create_unit_in_group(DEFENDER1, x2b, y2b, "barbarian phalanx", diffh);
        create_unit_in_group(DEFENDER1, x2s, y2s, "light horse", diffh);
      }
      if (age(3) > 2) {
        create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", diffh);
        if (diff > 2) {
          create_unit_in_group(DEFENDER2, x3b, y3b, "slingers", diffh);
          create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", diffh);
        }
        if (diff == 5) create_unit_in_group(DEFENDER2, x3b, y3b, "slingers", diffh);
      }
      else {
        create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
        if (diff > 2) {
          create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian javelineers", diffh);
          create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
        }
        if (diff == 5) create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
      }
    }

    x5 = object_position_x(ATTACKER, my_capital_id) - 6;
    y5 = object_position_y(ATTACKER, my_capital_id);
    for (f = 2; f < 4; f++) {
      for (l = 0; l < civilian_type.length; l++) {
        for (z = num_type(f, civilian_type[l]); z > 0; z--) {
          unit = find_unit(f, civilian_type[l]);
          if (is_in_group(f, unit)) {
            remove_from_group(f, unit);
          }
        }
      }
    }
    group_attack_to_order(DEFENDER1, x5, y5);
    group_attack_to_order(DEFENDER2, x5, y5);
    //group_attack_to_order(DEFENDER3, x5, y5);

    disable_trigger("create_guys");
  }

  if (timer_expired("giveResources")) {
  
    if (!time_later_than(22)) enable_trigger("spawn_army");

    //set timer length
    if (time_later_than(17)) {
      if (diff == 1) amount = 140;
      else if (diff == 2) amount = 135;
      else if (diff == 3) amount = 175;
      else if (diff >= 4) amount = 165;
      if (diff <= 3) diffh = 2;
      else diffh = 3;
    }
    else if (time_later_than(8)) {
      if (diff == 1) amount = 145;
      else if (diff == 2) amount = 140;
      else if (diff == 3) amount = 180;
      else if (diff >= 4) amount = 170;
      if (diff <= 3) diffh = 1;
      else diffh = 2;
    }
    else diffh = 1;

    //give resources
    for (defender = 4; defender > 1; defender--) {
      give_good(defender, "Food", amount2);
      give_good(defender, "Timber", amount2);
      give_good(defender, "Wealth", amount2);
      give_good(defender, "Metal", amount2);
      give_good(defender, "Knowledge", amount2);
      give_good(defender, "Oil", amount2);
    }

    set_timer("giveResources", amount); 

    if (time_later_than(21)) capital_attack = 1;
    else if (time_later_than(19)) capital_attack = 0;
    else if (time_later_than (17)) capital_attack = 3;
    else if (time_later_than(15)) capital_attack = 0;
    else if (time_later_than(13)) capital_attack = 2;
    else if (time_later_than(10)) capital_attack = 0;
    else if (time_later_than(7)) capital_attack = 2;
    else if (time_later_than(5)) capital_attack = 0;
    else if (time_later_than(2)) capital_attack = 1;
  }

  trigger spawn_army() {
    //create army
    if (age(2) > 2) {
      if (time_later_than(20)) create_unit_upgrade(DEFENDER1, x2b, y2b, "hoplites", diffh);
      else if (time_later_than(14)) create_unit_upgrade(DEFENDER1, x2b, y2b, "slingers", diffh);
      else if (time_later_than(8)) create_unit_upgrade(DEFENDER1, x2b, y2b, "bowmen", diffh);
      else if (time_later_than(5)) create_unit_upgrade(DEFENDER1, x2b, y2b, "hoplites", diffh);
      else create_unit_upgrade(DEFENDER1, x2b, y2b, "slingers", diffh);
    }
    else {
      if (time_later_than(20)) create_unit_upgrade(DEFENDER1, x2b, y2b, "barbarian phalanx", diffh);
      else if (time_later_than(14)) create_unit_upgrade(DEFENDER1, x2b, y2b, "barbarian javelineers", diffh);
      else if (time_later_than(8)) create_unit_upgrade(DEFENDER1, x2b, y2b, "Barbarian Archers", diffh);
      else if (time_later_than(5)) create_unit_upgrade(DEFENDER1, x2b, y2b, "barbarian phalanx", diffh);
      else create_unit_upgrade(DEFENDER1, x2b, y2b, "barbarian javelineers", diffh);
    }
    if (diff > 2) {
      if (age(2) > 2) {
        create_unit_in_group(DEFENDER1, x2b, y2b, "bowmen", diffh);
      }
      else {
        create_unit_in_group(DEFENDER1, x2b, y2b, "Barbarian Archers", diffh);
      }
      if (age(3) > 2) {
        create_unit_upgrade(DEFENDER2, x3b, y3b, "hoplites", diffh);
      }
      else {
        create_unit_upgrade(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
      }
    }
    /*if (diff == 3 && time_later_than(19)) {
      create_unit_in_group(DEFENDER1, x2b, y2b, "bowmen", 2);
      create_unit_in_group(DEFENDER1, x2b, y2b, "slingers", 3);
      create_unit_in_group(DEFENDER1, x2b, y2b, "hoplites", 2);
      create_unit_in_group(DEFENDER2, x3b, y3b, "bowmen", 3);
      create_unit_in_group(DEFENDER2, x3b, y3b, "slingers", 3);
      create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", 2);
    }
    else if (diff == 3 && time_later_than(12)) {
      create_unit_in_group(DEFENDER1, x2b, y2b, "bowmen", 2);
      create_unit_in_group(DEFENDER1, x2b, y2b, "slingers", 2);
      create_unit_in_group(DEFENDER1, x2b, y2b, "hoplites", 1);
      create_unit_in_group(DEFENDER2, x3b, y3b, "bowmen", 2);
      create_unit_in_group(DEFENDER2, x3b, y3b, "slingers", 1);
      create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", 2);
    }
    else if (diff == 3) {
      create_unit_in_group(DEFENDER1, x2b, y2b, "bowmen", 1);
    }      */
    //if player advances an age
    if ((age(ATTACKER) + 1) == end_age) {
      if (age(2) > 2) {
        create_unit_upgrade(DEFENDER1, x2b, y2b, "slingers", diffh);
      } 
      else {
        create_unit_upgrade(DEFENDER1, x2b, y2b, "barbarian javelineers", diffh);
      }
      if (age(3) > 2) {
        create_unit_upgrade(DEFENDER2, x3b, y3b, "hoplites", 1);
        create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", diffh);
      }
      else {
        create_unit_upgrade(DEFENDER2, x3b, y3b, "barbarian phalanx", 1);
        create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", diffh);
      }
      if (age(4) > 2) {
        create_unit_upgrade(DEFENDER3, x4b, y4b, "slingers", diffh);
      }
      else {
        create_unit_upgrade(DEFENDER3, x4b, y4b, "barbarian javelineers", diffh);
      }
    }
    disable_trigger("spawn_army");
    enable_trigger("support_troops");
  }

  trigger support_troops() {
    if (diff > 2) {
      if (time_later_than(5)) {
        if (diff > 3 && time_later_than(10)) build_siege = 1;
        else if (diff > 3) build_siege = rand_int(1,3);
        else if (diff == 3 && time_later_than(12)) build_siege = 1;
        else if (time_later_than(15) && diff <= 2) build_siege = 1;
        else build_siege = 2;
      }
      else build_siege = 1;
      switch(build_siege) {
        case 1 :
          if ((age(ATTACKER) + 1) == get_starting_age()) {
            if (time_later_than(10)) create_unit_in_group(DEFENDER2, x3, y3, "catapult", 1);
            create_unit_in_group(DEFENDER1, x2h, y2h, "light horse", diffh);
            if (time_later_than(5)) create_unit_in_group(DEFENDER2, x3, y3, "general", 1);
            if (time_later_than(10)) create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
            if (diff > 3) {
              create_unit_in_group(DEFENDER2, x3s, y3s, "supply wagon", 1);
              create_unit_upgrade(DEFENDER3, x4s, y4s, "supply wagon", 1);
            }
            if (diff == 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 1);
            }  
            if (diff > 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 2);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 2);
            }  
          }
          else if ((age(ATTACKER) + 1) == get_ending_age()) {
            create_unit_in_group(DEFENDER1, x2s, y2s, "supply wagon", 1);
            create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
            create_unit_in_group(DEFENDER2, x3, y3, "general", 1);
            create_unit_in_group(DEFENDER2, x3s, y3, "catapult", 1);
            if (diff > 2) {
              create_unit_in_group(DEFENDER1, x2h, y2h, "light horse", diffh);
              create_unit_in_group(DEFENDER2, x3s, y3s, "supply wagon", 1);
            }
            if (diff > 3) {
              create_unit_in_group(DEFENDER3, x4s, y4s, "supply wagon", 1);
              create_unit_in_group(DEFENDER2, x4s, y4s, "catapult", 1);
            }
            if (diff == 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 1);
            }  
            if (diff > 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 2);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 2);
            }  
          }
          break;
        case 2 :
          if ((age(ATTACKER) + 1) == get_starting_age()) {
            if (age(4) > 2) {
              create_unit_upgrade(DEFENDER3, x4b, y4b, "slingers", diffh);
            }
            else {
              create_unit_upgrade(DEFENDER3, x4b, y4b, "barbarian javelineers", diffh);
            }
            create_unit_in_group(DEFENDER3, x4h, y4h, "light horse", diffh);
            if (diff == 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 1);
            }  
            if (diff > 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 2);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 2);
            }  
          }
          else if ((age(ATTACKER) + 1) == get_ending_age()) {
            if (age(2) > 2) {
              create_unit_in_group(DEFENDER1, x2b, y2b, "hoplites", 1);
            }
            else {
              create_unit_in_group(DEFENDER1, x2b, y2b, "barbarian phalanx", 1);
            }
            if (diff > 2) create_unit_in_group(DEFENDER2, x3h, y3h, "light horse", diffh);
            if (age(4) > 2) {
              create_unit_in_group(DEFENDER3, x4b, y4b, "slingers", diffh);
            }
            else {
              create_unit_in_group(DEFENDER3, x4b, y4b, "barbarian javelineers", diffh);
            }
            create_unit_in_group(DEFENDER3, x4h, y4h, "light horse", diffh);
            if (diff == 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 1);
            }  
            if (diff > 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 2);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 2);
            }  
          }
          break;
        case 3 :
          if ((age(ATTACKER) + 1) == get_starting_age()) {
            if (age(4) > 2) {
              create_unit_upgrade(DEFENDER3, x4b, y4b, "slingers", diffh);
            }
            else {
              create_unit_upgrade(DEFENDER3, x4b, y4b, "barbarian javelineers", diffh);
            }
            create_unit_in_group(DEFENDER3, x4h, y4h, "light horse", diffh);
            if (diff == 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 1);
            }  
            if (diff > 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 2);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 2);
            }  
          }
          else if ((age(ATTACKER) + 1) == get_ending_age()) {
            if (age(2) > 2) {
              create_unit_in_group(DEFENDER1, x2b, y2b, "hoplites", 1);
            }
            else {
              create_unit_in_group(DEFENDER1, x2b, y2b, "barbarian phalanx", 1);
            }
            if (diff > 2) create_unit_in_group(DEFENDER2, x3h, y3h, "light horse", diffh);
            if (age(4) > 2) {
              create_unit_in_group(DEFENDER3, x4b, y4b, "slingers", diffh);
            }
            else {
              create_unit_in_group(DEFENDER3, x4b, y4b, "barbarian javelineers", diffh);
            }
            create_unit_in_group(DEFENDER3, x4h, y4h, "light horse", diffh);
            if (diff == 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 1);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 1);
            }  
            if (diff > 5 && time_later_than(20)) {
              create_unit_in_group(DEFENDER1, x2s, y2s, "catapult", 2);
              create_unit_in_group(DEFENDER2, x3s, y3s, "catapult", 2);
            }  
          }
          break;
      }
    }
    else if (diff < 3) {
      if (age(2) > 2) {
        create_unit_in_group(DEFENDER1, x2b, y2b, "hoplites", 2);
      }
      else {
        create_unit_in_group(DEFENDER1, x2b, y2b, "barbarian phalanx", 2);
      }
      if (age(3) > 2) {
        create_unit_in_group(DEFENDER2, x3b, y3b, "hoplites", 2);
      }
      else {
        create_unit_in_group(DEFENDER2, x3b, y3b, "barbarian phalanx", 2);
      }
    }
    disable_trigger("support_troops");
    enable_trigger("attack_order1");
  }

  trigger attack_order1() {  
    //give attack order
    if (diff < 4) capital_attack = rand_int(1,2);
    if (time_later_than(20)) capital_attack = 1;
    if (diff < 4 && !time_later_than(15)) capital_attack = 3;
    if (capital_attack == 1) {
      x5 = object_position_x(ATTACKER, my_capital_id) - 6;
      y5 = object_position_y(ATTACKER, my_capital_id);
      if (diff > 2) {
       for (f = 2; f < 4; f++) {

       for (l = 0; l < civilian_type.length; l++) {
          for (z = num_type(f, civilian_type[l]); z > 0; z--) {
            unit = find_unit(f, civilian_type[l]);
            if (is_in_group(f, unit)) {
              remove_from_group(f, unit);
            }
          }
        }
        }
        group_attack_to_order(DEFENDER1, x5, y5);
        group_attack_to_order(DEFENDER2, x5, y5);
        group_attack_to_order(DEFENDER3, x5, y5);
        capital_attack = 0;
      } else if (diff < 3) {
        impale = rand_int(1,4);
        if (diff == 2 && impale < 4) impale_units = 1;
        else if (diff == 3 && impale < 3) impale_units = 1;
        else if (diff == 1) impale_units = 1;
        else impale_units = 0;
        if (diff == 3 && time_later_than(10)) impale = 2;
        if (diff < 4 && impale_units == 1) {
          attack_here = find_build(ATTACKER, "tower");
          if (attack_here == 0) {
            attack_here = find_build(ATTACKER, "farm");
            if (attack_here == 0) {
              attack_here = find_build(ATTACKER, "");
              if (attack_here == my_capital_id) {
                attack_here = find_build(ATTACKER, "");
              }
            }
          }
          for (f = 2; f < 4; f++) {
            for (l = 0; l < civilian_type.length; l++) {
              for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                unit = find_unit(f, civilian_type[l]);
                if (is_in_group(f, unit)) {
                  remove_from_group(f, unit);
                }
              }
            }
          }
          set_seen(ATTACKER, DEFENDER1, attack_here);
          group_attack_order(ATTACKER, DEFENDER1, attack_here);
          set_seen(ATTACKER, DEFENDER2, attack_here);
          group_attack_order(ATTACKER, DEFENDER2, attack_here);
          set_seen(ATTACKER, DEFENDER3, attack_here);
          group_attack_order(ATTACKER, DEFENDER3, attack_here);
        } else {
          for (f = 2; f < 4; f++) {
            for (l = 0; l < civilian_type.length; l++) {
              for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                unit = find_unit(f, civilian_type[l]);
                if (is_in_group(f, unit)) {
                  remove_from_group(f, unit);
                }
              }
            }
          }
          group_attack_to_order(DEFENDER1, x5, y5);
          group_attack_to_order(DEFENDER2, x5, y5);
          group_attack_to_order(DEFENDER3, x5, y5);
        }
      }      
    }   
    else if (capital_attack == 2) {
      my_second_city = find_city_with_num(ATTACKER, 2);
      my_second_city_id = find_city_id(my_second_city);
      x5 = object_position_x(ATTACKER, my_second_city_id) - 6;
      y5 = object_position_y(ATTACKER, my_second_city_id);
      for (f = 2; f < 4; f++) {
        for (l = 0; l < civilian_type.length; l++) {
          for (z = num_type(f, civilian_type[l]); z > 0; z--) {
            unit = find_unit(f, civilian_type[l]);
            if (is_in_group(f, unit)) {
              remove_from_group(f, unit);
            }
          }
        }
      }
      group_attack_to_order(DEFENDER1, x5, y5);
      group_attack_to_order(DEFENDER2, x5, y5);
      group_attack_to_order(DEFENDER3, x5, y5);
      capital_attack = 0;
    }   
    else if (capital_attack == 3) {
      x5 = object_position_x(ATTACKER, my_capital_id) - 6;
      y5 = object_position_y(ATTACKER, my_capital_id);
      switch(rand_int(1,3)) {
        case 1 :
          if (diff > 3|| (diff == 3 && time_later_than(10))) {
            for (f = 2; f < 4; f++) {
              for (l = 0; l < civilian_type.length; l++) {
                for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                  unit = find_unit(f, civilian_type[l]);
                  if (is_in_group(f, unit)) {
                    remove_from_group(f, unit);
                  }
                }
              }
            }
            group_attack_to_order(DEFENDER1, x5, y5);
          } else if (diff < 4) {
            impale = rand_int(1,4);
            if (diff == 2 && impale < 4) impale_units = 1;
            else if (diff == 3 && impale < 4) impale_units = 1;
            else if (diff == 1) impale_units = 1;
            else impale_units = 0;
            if (diff == 3 && time_later_than(10)) impale = 2;
            if (diff < 4 && impale_units == 1) {
              attack_here = find_build(ATTACKER, "tower");
              if (attack_here == 0) {
                attack_here = find_build(ATTACKER, "farm");
                if (attack_here == 0) {
                  attack_here = find_build(ATTACKER, "");
                  if (attack_here == my_capital_id) {
                    attack_here = find_build(ATTACKER, "");
                  }
                }
              }
              for (f = 2; f < 4; f++) {
                for (l = 0; l < civilian_type.length; l++) {
                  for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                    unit = find_unit(f, civilian_type[l]);
                    if (is_in_group(f, unit)) {
                      remove_from_group(f, unit);
                    }
                  }
                }
              }
              set_seen(ATTACKER, DEFENDER1, attack_here);
              group_attack_order(ATTACKER, DEFENDER1, attack_here);
            } else {
              for (f = 2; f < 4; f++) {
                for (l = 0; l < civilian_type.length; l++) {
                  for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                    unit = find_unit(f, civilian_type[l]);
                    if (is_in_group(f, unit)) {
                      remove_from_group(f, unit);
                    }
                  }
                }
              }
              group_attack_to_order(DEFENDER1, x5, y5);
            }
          }    
          break;
        case 2 :
          if (diff > 3 || (diff == 3 && time_later_than(10))) {
            for (f = 2; f < 4; f++) {
              for (l = 0; l < civilian_type.length; l++) {
                for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                  unit = find_unit(f, civilian_type[l]);
                  if (is_in_group(f, unit)) {
                    remove_from_group(f, unit);
                  }
                }
              }
            }
            group_attack_to_order(DEFENDER2, x5, y5);
          } else if (diff < 4) {
            impale = rand_int(1,4);
            if (diff == 2 && impale < 4) impale_units = 1;
            else if (diff == 3 && impale < 4) impale_units = 1;
            else if (diff == 1) impale_units = 1;
            else impale_units = 0;
            if (diff == 3 && time_later_than(10)) impale = 2;
            if (diff < 4 && impale_units == 1) {
              attack_here = find_build(ATTACKER, "tower");
              if (attack_here == 0) {
                attack_here = find_build(ATTACKER, "farm");
                if (attack_here == 0) {
                  attack_here = find_build(ATTACKER, "");
                  if (attack_here == my_capital_id) {
                    attack_here = find_build(ATTACKER, "");
                  }
                }
              }
              set_seen(ATTACKER, DEFENDER2, attack_here);
              for (f = 2; f < 4; f++) {
                for (l = 0; l < civilian_type.length; l++) {
                  for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                    unit = find_unit(f, civilian_type[l]);
                    if (is_in_group(f, unit)) {
                      remove_from_group(f, unit);
                    }
                  }
                }
              }
              group_attack_order(ATTACKER, DEFENDER2, attack_here);
            } else {
              for (f = 2; f < 4; f++) {
                for (l = 0; l < civilian_type.length; l++) {
                  for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                    unit = find_unit(f, civilian_type[l]);
                    if (is_in_group(f, unit)) {
                      remove_from_group(f, unit);
                    }
                  }
                }
              }
              group_attack_to_order(DEFENDER2, x5, y5);
            }
          }    
          break;
        case 3:
          if (diff > 2) {
            for (f = 2; f < 4; f++) {
              for (l = 0; l < civilian_type.length; l++) {
                for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                  unit = find_unit(f, civilian_type[l]);
                  if (is_in_group(f, unit)) {
                    remove_from_group(f, unit);
                  }
                }
              }
            }
            group_attack_to_order(DEFENDER3, x5, y5);
          } else if (diff < 3) {
            impale = rand_int(1,4);
            if (diff == 2 && impale < 4) impale_units = 1;
            else if (diff == 3 && impale < 3) impale_units = 1;
            else if (diff == 1) impale_units = 1;
            else impale_units = 0;
            if (diff == 3 && time_later_than(10)) impale = 2;
            if (diff < 4 && impale_units == 1) {
              attack_here = find_build(ATTACKER, "tower");
              if (attack_here == 0) {
                attack_here = find_build(ATTACKER, "farm");
                if (attack_here == 0) {
                  attack_here = find_build(ATTACKER, "");
                  if (attack_here == my_capital_id) {
                    attack_here = find_build(ATTACKER, "");
                  }
                }
              }
              for (f = 2; f < 4; f++) {
                for (l = 0; l < civilian_type.length; l++) {
                  for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                    unit = find_unit(f, civilian_type[l]);
                    if (is_in_group(f, unit)) {
                      remove_from_group(f, unit);
                    }
                  }
                }
              }
              set_seen(ATTACKER, DEFENDER3, attack_here);
              group_attack_order(ATTACKER, DEFENDER3, attack_here);
            } else {
              for (f = 2; f < 4; f++) {
                for (l = 0; l < civilian_type.length; l++) {
                  for (z = num_type(f, civilian_type[l]); z > 0; z--) {
                    unit = find_unit(f, civilian_type[l]);
                    if (is_in_group(f, unit)) {
                      remove_from_group(f, unit);
                    }
                  }
                }
              }              
              group_attack_to_order(DEFENDER3, x5, y5);
            }
          }    
          break;
      }
      capital_attack = 0;
    }
    disable_trigger("attack_order1");
  }

  my_capital = find_capital(ATTACKER);

  trigger (city_captured(ATTACKER, my_capital)) {
    defeat(ATTACKER);
  } 

  trigger the_middle(time_later_than(15)) {
    x5 = object_position_x(ATTACKER, my_capital_id) - 6;
    y5 = object_position_y(ATTACKER, my_capital_id);
    for (defender = 2; defender < 5; defender++) {
      if (diff < 3) {
        for (n = 4; n > 0; n--) {
          unit = find_military(defender);
          unit_attack_to_order(defender, unit, x5, y5);
        }
      }
      else if (diff == 3) {
        for (n = 6; n > 0; n--) {
          unit = find_military(defender);
          unit_attack_to_order(defender, unit, x5, y5);
        }
      }
      else if (diff > 3) {
        for (n = num_military_units(defender); n > 0; n--) {
          unit = find_military(defender);
          unit_attack_to_order(defender, unit, x5, y5);
        }
      }
    }
    disable_trigger("the_middle");
  }

  trigger the_end(time_later_than(20) && timer_expired("its_over")) {
    x5 = object_position_x(ATTACKER, my_capital_id) - 6;
    y5 = object_position_y(ATTACKER, my_capital_id);
    for (defender = 2; defender < 5; defender++) {
      if (diff < 3) {
        for (n = 5; n > 0; n--) {
          unit = find_military(defender);
          unit_attack_to_order(defender, unit, x5, y5);
        }
      }
      else if (diff == 3) {
        for (n = 7; n > 0; n--) {
          unit = find_military(defender);
          unit_attack_to_order(defender, unit, x5, y5);
        }
      }
      else if (diff > 3) {
        for (n = num_military_units(defender); n > 0; n--) {
          unit = find_military(defender);
          unit_attack_to_order(defender, unit, x5, y5);
        }
      }
    }
    set_timer("its_over", 30);
    enable_trigger("the_end");
  }


}