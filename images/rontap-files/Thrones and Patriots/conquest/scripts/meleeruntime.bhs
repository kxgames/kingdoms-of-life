//melee scenario runtime

include "ctw_lib.bhs"

conquest
{
  labels {
    HUMAN,
    BARBARIAN1,
    BARBARIAN2,
    BARBARIAN3,
  }

  static int barbarian;
  static String capital;
  static int capital_id;
  static int unit;
  static int diff = get_difficulty();
  static String my_capital = find_capital(HUMAN);
  static int my_capital_id = find_city_id(my_capital);
  static int x;
  static int y;
  static int x2;
  static int y2;
  static int amount;
  static time_limit = 90;

  run_once {
    set_timer("give_goods", 180);
    set_timer("attack", 240);
    if (diff < 3) amount = 100;
    else if (diff > 2 && diff < 5) amount = 90;
    else if (diff > 4) amount = 200;
    for (defender = 4; defender > 2; defender--) {
      if (num_cities(defender) == 0) {
        new_x = get_starting_loc_x(2);
        new_y = get_starting_loc_y(2);
        create_unit_upgrade(defender, new_x, new_y, "citizen", 4);
        create_unit_upgrade(defender, new_x, new_y, "barbarian phalanx", 2);
        create_unit_upgrade(defender, new_x, new_y, "barbarian archers", 2);
        create_unit_upgrade(defender, new_x, new_y, "barbarian javelineers", 2);
        give_good(defender, "Food", 100);
        give_good(defender, "Timber", 100);
      }
    }
    time_limit = get_time_limit();
    if (get_age() > 2) {
      disable_trigger("barbarians");
    }
    else {
      enable_trigger("barbarians");
    }
  }

  trigger barbarians(age(1) == get_ending_age()) {
    barbarian_upgrade();
  }

  cur_time = time_min();
  
  if (cur_time >= time_limit) {
    defeat(1);
  }

  if (timer_expired("give_goods")) {
    if (diff > 4) {
      for (i = 4; i > 1; i--) {
        give_good(i, "Food", amount);
        give_good(i, "Timber", amount);
        give_good(i, "Wealth", amount);
        give_good(i, "Oil", amount);
        give_good(i, "Metal", amount);
        give_good(i, "Knowledge", amount);
      }
    }
    else if (diff < 5) {
      for (i = 4; i > 1; i--) {
        take_good(i, "Food", amount);
        take_good(i, "Timber", amount);
        take_good(i, "Wealth", amount);
        take_good(i, "Oil", amount);
        take_good(i, "Metal", amount);
        take_good(i, "Knowledge", amount);
      }
    }
    set_timer("give_goods", 180);
  }

  if (timer_expired("attack")) {
    barbarian = rand_int(2,4);
    clear_group(barbarian);
    for (i = num_military_units(barbarian); i > 0; i--) {
      unit = find_military(barbarian);
      add_to_group(barbarian, unit);
    }
    capital = find_capital(barbarian);
    capital_id = find_city_id(capital);
    x = object_position_x(HUMAN, my_capital_id);
    y = object_position_y(HUMAN, my_capital_id);
    x2 = object_position_x(barbarian, capital_id) + 2;
    y2 = object_position_y(barbarian, capital_id);
    create_unit_in_group(barbarian, x2, y2, "barbarian javelineers", 1);
    if (diff > 1 || time_later_than(15)) create_unit_in_group(barbarian, x2, y2, "barbarian archers", 1);
    if ((diff > 3 && get_starting_age() > 1) || time_later_than(20)) create_unit_in_group(barbarian, x2, y2, "barbarian phalanx", 1);
    if ((diff > 4 && get_starting_age() > 1) || time_later_than(25)) create_unit_in_group(barbarian, x2, y2, "barbarian phalanx", 1);
    group_attack_to_order(barbarian, x, y);
    if (diff < 4) set_timer("attack", 240);
    else set_timer("attack", 180);
  }

}