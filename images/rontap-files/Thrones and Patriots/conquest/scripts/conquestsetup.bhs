include "ctw_lib.bhs"

conquest
{

  int nation;
  int unit;
  int x;
  int y;
  String nation_name;
  String city_name;
  String campaign = get_ctw_campaign();
  int diff = get_difficulty();

  if (campaign == "Alexander the Great") {
    alexander_setup();
    for (nation = 2; nation < 9; nation++) {
      nation_name = find_nation(nation);
      if (nation_name == "Persian") {
        if (num_type(nation, "Darius") == 0) {
          city_name = find_capital(nation);
          building = find_city_id(city_name);
          x = object_position_x(nation, building) + 2;
          y = object_position_y(nation, building);
          create_unit(nation, x, y, "Darius", 1);  
        }        
      } else if (nation_name == "Indian") {
        city_name = find_capital(nation);
        building = find_city_id(city_name);
        x = object_position_x(nation, building) + 2;
        y = object_position_y(nation, building);
        create_unit(nation, x, y, "Chandragupta Maurya", 1);  
      }
    }
  }
  else if (campaign == "Napoleon") {
    napoleon_rules();
    for (nation = 2; nation < 9; nation++) {
      nation_name = find_nation(nation);
      if (nation_name == "Turks") {
        city_name = find_capital(nation);
        building = find_city_id(city_name);
        x = object_position_x(nation, building) + 2;
        y = object_position_y(nation, building);
        create_unit(nation, x, y, "Djezzar", 1);
        create_unit_upgrade(nation, x + 1, y, "Musketeers", 2);
        if (diff > 1) {
          create_unit_upgrade(nation, x + 1, y, "Musketters", 2);
          create_unit_upgrade(nation, x, y + 1, "Hussar", 1);
          create_unit_upgrade(nation, x, y + 1, "Supply Wagon", 1);
        }
        if (diff > 2) {
          create_unit_upgrade(nation, x, y + 2, "Musketeers", 2);
          create_unit_upgrade(nation, x + 2, y, "Horse Archer", 1);
          create_unit_upgrade(nation, x + 2, y, "Hussar", 1);
        }
        if (diff > 4) {
          create_unit_upgrade(nation, x, y + 2, "Fusiliers", 1);
        }
      } else if (nation_name == "British") {
        city_name = find_capital(nation);
        building = find_city_id(city_name);
        x = object_position_x(nation, building) + 2;
        y = object_position_y(nation, building);
        create_unit(nation, x, y, "Wellington", 1);
      } else if (nation_name == "Greeks") {
        city_name = find_capital(nation);
        building = find_city_id(city_name);
        x = object_position_x(nation, building) + 2;
        y = object_position_y(nation, building);
        create_unit(nation, x, y, "Archduke Charles", 1);
      } else if (nation_name == "Germans") {
        city_name = find_capital(nation);
        building = find_city_id(city_name);
        x = object_position_x(nation, building) + 2;
        y = object_position_y(nation, building);
        create_unit(nation, x, y, "General Blucher", 1);
      } else if (nation_name == "Russians") {
        city_name = find_capital(nation);
        building = find_city_id(city_name);
        x = object_position_x(nation, building) + 2;
        y = object_position_y(nation, building);
        create_unit(nation, x, y, "General Kutosov", 1);
      }
    }
  }
  else if (get_ctw_campaign() == "The Cold War") {
    coldwar_rules();
  }
  else if (get_ctw_campaign() == "The New World") {
    new_world_rules();
    new_world_setup();

    for (i = 0; i < num_players(); i++) {
      if (find_nation(i) == "Nubians") {
        city_name = find_capital(i);
        city_id = find_city_id(city_name);
        x = object_position_x(i, city_id)+5;
        y = object_position_y(i, city_id)+5;
        unit_id = find_unit(i, "Supply Wagon");
        kill_unit_anim(i, unit_id, 1);
        unit_id = find_unit(i, "Explorer");
        kill_unit_anim(i, unit_id, 1);
        do {
          unit_id = find_military(i);
          kill_unit_anim(i, unit_id, 1);
        }while(unit_id > -1);
        place_new_world_army(i, x, y);
      }
    }
  }
}