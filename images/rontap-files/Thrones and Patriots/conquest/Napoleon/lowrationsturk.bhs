String conquest format_time (int time_left);
int conquest destroy_city (String city_name);
int conquest new_force( int step, int x, int y );


conquest
{

  labels {
  }

  static int diff = get_difficulty();
  static int attacker = 1;
  static int defender = 2;
  static String defender_capital = find_capital(defender);
  static int defender_cities = num_cities(defender);
  static int old_defender_cities;
  static int time_left = 290 - (15 * diff);
  String str;
  static String attacker_city;
  static int cities_shown = 1;
  int attacker_city_id;
  int x;
  int y;
  int how_much;
  int random_city;
  int military_count;
  int napoleon;
  int num_tower;
  static int step = 1;
  String city_name;
  int building;
  int military_unit;
  static int num_cities_def = num_cities(defender);
  int turn = get_turn()%3;
  
  run_once {
    if (diff < 3) time_left + 60;
    else if (diff == 3) time_left + 30;
    disable_trigger("prison");
    set_timer("game_over", 1);
    set_timer("high_diff", 60);
    ctw_add_objective_text($S("Hint: Gain extra troops by capturing cities."), 10, "");
    str = format_time(time_left);
    add_objective_text(parse("Rations Timer: $NUM0", str), 1, "");

//  Place buildings at second capital    
//    random_city = rand_int(2, 8) + turn;
//    if (random_city == 9) random_city = 2;
//    else if (random_city == 10) random_city = 3;    
//    city_name = find_city_with_num(defender, random_city); 
//    place_building_upgrade(defender, "senate", city_name);
//    place_building_upgrade(defender, "tower", city_name);
//    place_building_upgrade(defender, "tower", city_name);

//  Remove towers for easy and easiest    
    if (diff < 3){
      num_tower = num_type_upgrade(defender, "tower");
      for (n = num_tower; n > 0; n--){
        destroy_building(defender, find_build(defender, "tower"));
        }
      }
      destroy_building(defender, 2034);
  }

//  trigger (num_type(defender, "Senate") < 2) {
//  Place buildings at second capital    
//    random_city = rand_int(2, 8) + turn;
//    while (random_city == 0) {
//      random_city++;
//      if (random_city == 9) random_city = 2;
//    }
//    if (random_city == 9) random_city = 2;
//    else if (random_city == 10) random_city = 3;
//    else if (random_city == 11) random_city = 4;    
//   city_name = find_city_with_num(defender, random_city); 
//    place_building_upgrade(defender, "senate", city_name);
//    place_building_upgrade(defender, "tower", city_name);
//    place_building_upgrade(defender, "tower", city_name);  
//  }

//  Rations Timer loop
  if (timer_expired("game_over")) {
    time_left = time_left - 1;
    set_timer("game_over", 1);
    str = format_time(time_left);
    change_objective_text(1, parse("Rations Timer: $NUM0", str));
  }

// Defeat if no units
  trigger (num_units(attacker) < 1) defeat(attacker);

//  Increase Rations Timer with destruction of cities
  old_defender_cities = defender_cities;
  defender_cities = num_cities(defender);
  if (old_defender_cities > defender_cities) {
    time_left = time_left + 75 - diff;
    str = format_time(time_left);
    change_objective_text(2, str);
  }

//  Give units and destroy city buildings upon capture
  if (num_cities(attacker) > 0) {
    attacker_city = find_city_name(attacker);
    attacker_city_id = find_city_id(attacker_city);
    x = object_position_x(attacker, attacker_city_id);
    y = object_position_y(attacker, attacker_city_id);
    how_much = destroy_city(attacker_city) + 2;
    for (a = 0; a < how_much; a++) {
      new_force(step, x, y);
      step++;
      if (step > 11) step = 0;
    }
    if (num_cities(defender) > 3) {
      set_timer("prisoner", 5);
      enable_trigger("prison");
    }
  }

//  Defeat when Rations Timer runs out
  if (time_left < 1) {
    defeat(attacker);
  }

// Give the location of another city
  trigger prison(timer_expired("prisoner")) {
    city_name = attacker_city;
    if (num_cities(defender) >= 5) {
      str = parse("A freed prisoner from $STRING0 decided to share with us the location of one of the enemy's other cities!  However, there may be a closer city.", city_name);
      popup_dialog(str);
      for (n = cities_shown; n > 0; n--) {
        city_name = find_city_name(defender);
      }
      cities_shown++;
      if (city_name == defender_capital) city_name = find_city_name(defender);
      building = find_city_id(city_name);
      x = object_position_x(defender, building);
      y = object_position_y(defender, building);
      add_reveal_point(attacker, x, y, 20);
      ping_object(attacker, defender, defender, building);
      }
    else if (num_cities(defender) == 4) {
      str = parse("A prisoner from $STRING0 decided to share with us the location of the enemy's capital.", city_name);
      popup_dialog(str);
      building = find_city_id(defender_capital);
      x = object_position_x(defender, building);
      y = object_position_y(defender, building);
      add_reveal_point(attacker, x, y, 20);
      ping_object(attacker, defender, defender, building);
    }
  }

//  Enemy sends all units to capital when attacked  
  trigger defend_the_cap(was_city_attacked(defender, defender_capital, -1)){
    military_count = num_military_units(defender);
    napoleon = find_all_unit(attacker, "Napoleon");
    x = object_position_x(attacker, napoleon);
    y = object_position_y(attacker, napoleon);
    for (n = military_count; n > 0; n--){
      military_unit = find_all_military(defender);
      unit_attack_to_order(defender, military_unit, x, y);
      }
    }

// Rations Timer Warning
trigger rationswarning_trg(time_left == 120) {
  bubble_text($S("YOUR RATIONS ARE LOW!"), get_camera_x(), get_camera_y());
  set_timer("rationswarning1_tmr", 5);
  enable_trigger ("rationswarning1_trg");
} // trigger rationswarning_trg
trigger rationswarning1_trg(timer_expired("rationswarning1_tmr")) {
  enable_trigger ("rationswarning_trg");
} // trigger rationswarning1_trg

}

//  Formating the Rations Timer
String conquest format_time (int time_left) 
{
    int min;
    int sec;
    String str;
    
    min = time_left/60;
    sec = time_left%60;
    if (sec < 10 && min < 10) {
      str = " " + min + ":0" + sec;
    } else if (sec < 10) {
      str = min + ":0" + sec;
    } else if (min < 10) {
      str = " " + min + ":" + sec;
    } else str = min + ":" + sec;
    
    return str;
}

//  Destroy city buildings and get a count for how big the recruited army should be
int conquest destroy_city (String city_name)
{

  int building;
  String building_name;
  int build_destroyed = 0;
  int diff = get_difficulty();

  nation = 1;
  
  for (step = 1; step < 12; step++) {

    switch(step){

      case 1:
        building_name = "Temple";
        break;
      case 2:
        building_name = "Market";
        break;
      case 3:
        building_name = "Library";
        break;
      case 4:
        building_name = "Senate";
        break;
      case 5:
        building_name = "University";
        break;
      case 6:
        building_name = "Farm";
        break;
      case 7:
        building_name = "Woodcutter's Camp";
        break;
      case 8:
        building_name = "Mine";
        break;
      case 9:
        building_name = "Granary";
        break;
      case 10:
        building_name = "Smelter";
        break;
      case 11:
        building_name = "Lumber Mill";
        break;

    }

    for (n = num_city_buildings(nation, city_name, building_name, 1); n > 0; n--) {
      building = find_build_at_city(nation, city_name, building_name, 1);
      destroy_building(nation, building);
      build_destroyed++;
    }

  }

  building = find_city_id(city_name);
  destroy_building(nation, building);
  build_destroyed = build_destroyed + 4;
  if (diff > 4) build_destroyed + 2;
  
  return build_destroyed;
}

//  Generate a recruited army for player based on number of city buildings destroyed
int conquest new_force( int step, int x, int y ) 
{

  int attacker = 1;

  switch(step) {
  
      case 1:
        create_unit_upgrade(attacker, x, y, "Catapult", 1);
        print_game_msg($S("We have recruited a Cannon."));
        break;
      case 2:
        create_unit_upgrade(attacker, x, y, "Phalanx", 1);
        print_game_msg($S("We have recruited a group of Fusiliers."));
        break;
      case 3:
        create_unit_upgrade(attacker, x, y, "Javelineers", 1);
        print_game_msg($S("We have recruited a group of Musketeers."));
        break;
      case 4:
        create_unit_upgrade(attacker, x, y, "Javelineers", 1);
        print_game_msg($S("We have recruited a group of Musketeers."));
        break;
      case 5:
        create_unit_upgrade(attacker, x, y, "Companion", 1);
        print_game_msg($S("We have recruited a Horse Guard Grenadier."));
        break;
      case 6:
        create_unit_upgrade(attacker, x, y, "Light Horse", 1);
        print_game_msg($S("We have recruited a Hussar."));
        break;
      case 7:
        create_unit_upgrade(attacker, x, y, "Javelineers", 1);
        print_game_msg($S("We have recruited a group of Musketeers."));
        break;
      case 8:
        create_unit_upgrade(attacker, x, y, "Phalanx", 1);
        print_game_msg($S("We have recruited a group of Fusiliers."));
        break;
      case 9:
        create_unit_upgrade(attacker, x, y, "Phalanx", 1);
        print_game_msg($S("We have recruited a group of Fusiliers."));
        break;
      case 10:
        create_unit_upgrade(attacker, x, y, "Companion", 1);
        print_game_msg($S("We have recruited a Horse Guard Grenadier."));
        break;
      case 11:
        create_unit_upgrade(attacker, x, y, "Supply Wagon", 1);
        print_game_msg($S("We have recruited a Supply Wagon."));
        break;

  }
  return 1;
}
