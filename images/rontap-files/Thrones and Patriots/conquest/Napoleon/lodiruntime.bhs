int conquest destroy_city (String city_name);

conquest
{

  static int french = 1;
  static int austrians = 2;
  static int merchants = 8;
  static int diff = get_difficulty();

  static int napoleon = find_unit(french, "Napoleon");

  String city_name = find_capital(austrians);
  int building = find_city_id(city_name);
  int x;
  int y;
  static String milan_name = "Milan";
  static int mx;
  static int my;
  static int tribute = get_num_tribute("French");
  static int tribute_aus = get_num_tribute("Greeks");

  static int end_time = get_time_limit();
  int cur_time;
  int nation;

  static int austrian_deal;
  static int french_deal;

  static int rax_id = find_build(merchants, "Barracks");
  static int stable_id = find_build(merchants, "Stable");
  static int siege_id = find_build(merchants, "Siege Factory");
  static int library_id = find_build(merchants, "Library");
  static int fort_id = find_build(merchants, "Fortress");

  static int times_bought;
  static int times_bought_aus;
  static int cost = 6;

  int item;

  run_once {
    if (diff > 4) {
      cost + 2;
    }
    for (nation = 3; nation < 7; nation++) {
      diplomacy_set_wait(nation);
    }
    building = find_city_id(milan_name);
    mx = object_position_x(austrians,building);
    my = object_position_y(austrians,building);
    ctw_add_objective_text($S("Hint: Click on the Merchant Prince's (Orange) buildings to buy units."), "merch_text", "");
  }

  if (is_defeated(austrians)) {
    victory(french);
  }

  trigger (num_units(merchants) + num_buildings(merchants) == 0) {
    defeat(merchants);
  }

  cur_time = time_min();
  if (cur_time >= end_time) defeat(french);

  trigger (time_later_than(30) && get_ctw_int("emperor") < 1) {
    unit = popup_choice($S("Message from the Austrians: Our troops no longer wish to fight. Perhaps you would like to sign a peace agreement to end this war, provided you do not attack us anytime soon? We will include 50 Tribute and our territory of Belgium in the bargain."), $S("Yes"), $S("No"));
    if (unit == 1) {
      give_player_ctw_tribute(50);
      ctw_give_territory("Belgium", "French", 0);
      ctw_set_peace("French", "Greeks");
      set_ctw_int("peace_lodi", 1);
      defeat(french);
    } 
  }

  if (object_selected(merchants, rax_id)) {
    clear_selection();
    item = (cost + times_bought);
    unit = popup_choice(parse("Would you like to buy 5 Royal Janissaries for $NUM0 Tribute? (You have $NUM1 Tribute.)", item, tribute), $S("Yes"), $S("No"));
    if (unit == 1) {
      if (tribute >= item) {
        tribute += -item;
        x = object_position_x(merchants, rax_id) + 2;
        y = object_position_y(merchants, rax_id);
        give_player_ctw_tribute(-item);
        create_unit(french, x, y, "Royal Janissaries", 5);
        times_bought += 2;
      } else {
        popup_dialog($S("Sorry, you do not have enough Tribute."));
      }
    }
  }

  if (object_selected(merchants, stable_id)) {
    clear_selection();
    item = (cost + times_bought);
    unit = popup_choice(parse("Would you like to buy 3 Elephants for $NUM0 Tribute? (You have $NUM1 Tribute.)", item, tribute), $S("Yes"), $S("No"));
    if (unit == 1) {
      if (tribute >= item) {
        tribute += -item;
        x = object_position_x(merchants, stable_id) + 2;
        y = object_position_y(merchants, stable_id);
        give_player_ctw_tribute(-item);
        create_unit(french, x, y, "Culverin Mahout", 3);
        times_bought += 2;
      } else {
        popup_dialog($S("Sorry, you do not have enough Tribute."));
      }
    }
  }

  if (object_selected(merchants, siege_id)) {
    clear_selection();
    item = (cost + times_bought);
    unit = popup_choice(parse("Would you like to buy 3 Basilica Cannons for $NUM0 Tribute? (You have $NUM1 Tribute.)", item, tribute), $S("Yes"), $S("No"));
    if (unit == 1) {
      if (tribute >= item) {
        tribute += -item;
        x = object_position_x(merchants, siege_id) + 2;
        y = object_position_y(merchants, siege_id);
        give_player_ctw_tribute(-item);
        create_unit(french, x, y, "Basilica Cannon", 3);
        times_bought += 2;
      } else {
        popup_dialog($S("Sorry, you do not have enough Tribute."));
      }
    }
  }
  if (object_selected(merchants, fort_id)) {
    clear_selection();
    popup_dialog($S("We have many things for sale. Royal Janissaries at our Barracks, Culverin Mahouts at our Stable, and Basilica Cannons at our Siege Factory. Click on the building that has what you want in order to buy something."));
  }
  
}

//  Destroy city buildings and get a count for how big the recruited army should be
int conquest destroy_city (String city_name)
{

  int building;
  String building_name;
  int build_destroyed = 0;
  int diff = get_difficulty();

  nation = 1;
  
  for (step = 1; step < 12; step++) {

    switch(step){

      case 1:
        building_name = "Temple";
        break;
      case 2:
        building_name = "Market";
        break;
      case 3:
        building_name = "Library";
        break;
      case 4:
        building_name = "Senate";
        break;
      case 5:
        building_name = "University";
        break;
      case 6:
        building_name = "Farm";
        break;
      case 7:
        building_name = "Woodcutter's Camp";
        break;
      case 8:
        building_name = "Mine";
        break;
      case 9:
        building_name = "Granary";
        break;
      case 10:
        building_name = "Smelter";
        break;
      case 11:
        building_name = "Lumber Mill";
        break;

    }

    for (n = num_city_buildings(nation, city_name, building_name, 1); n > 0; n--) {
      building = find_build_at_city(nation, city_name, building_name, 1);
      destroy_building(nation, building);
      build_destroyed++;
    }

  }

  //building = find_city_id(city_name);
  //destroy_building(nation, building);
  build_destroyed = build_destroyed + 4;
  if (diff > 4) build_destroyed + 2;
  
  return build_destroyed;
}