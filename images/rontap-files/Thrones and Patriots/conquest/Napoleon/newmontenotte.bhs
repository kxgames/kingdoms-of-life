scenario
{

  labels {
    FRENCH,
    AUSTRIANS,
    GENOANS = 8,
  }
  
  static int french_kills;
  static int french_razes;
  static int french_loses;
  static int austrians_buildings = num_buildings(AUSTRIANS);
  int temp_num;
  static int genoans_buildings = num_buildings(GENOANS);
  static int diff = get_difficulty();
  static int base = 25 + ((6 - diff) * 5);
  
  static int end_time = get_time_limit();
  int cur_time;
  int temp_base;
  static int count_time;
  static capital_id = 0;
  static String capital_name;
  static int city_two_id = 0;
  static String city_two;
  static int loc_x;
  static int loc_y;
  int unit;
  int your_unit;
  int y;
  int x;
  static int x_diff;
  static int y_diff;
  static int unit_x;
  static int unit_y;
  static int x_check;
  static int y_check;
  static int x_distance_absl;
  static int y_distance_absl;
  static int x_distance;
  static int y_distance;
  static int building_x;
  static int building_y;
  static int x_check_absl = 0;
  static int y_check_absl = 0;
  static int who_unit;
  static int general;
  static int scout;
  static int use_scout;
  int catapult;
  int cat_x;
  int cat_y;
  static int attack_count;
  static int build_check;
  static int max_attack_count;
  static String def_capital = find_capital(AUSTRIANS);
  static int def_capital_id = find_city_id(def_capital);
  static int def_cap_x = object_position_x(AUSTRIANS, def_capital_id);
  static int def_cap_y = object_position_y(AUSTRIANS, def_capital_id);

  run_once {
    ctw_add_objective_text($S("Hint: Build new troops at your military buildings."), 1, "");
    diff = get_difficulty();
    count_time = rand_int(45,75);
    if (diff > 3 && diff < 6) set_timer("lcav", 55);
    if (diff > 5) set_timer("lcav", 45);
    capital_name = find_capital(AUSTRIANS);
    capital_id = find_city_id(capital_name);
    gain_tech(AUSTRIANS, "The Art of War");
    gain_tech(FRENCH, "The Art of War");
    give_good(FRENCH, "Food", 100);
    give_good(FRENCH, "Timber", 250);
    give_good(FRENCH, "Metal", 100);
    give_good(FRENCH, "Wealth", 150);
    enable_trigger("findCity");
    set_timer("under_attack", 20);  
    set_timer("build_units", 70);
    set_timer("waves", 18-diff);
    //enable_trigger("attack_waves");
    if (diff < 3) max_attack_count = 5;
    else if (diff == 3) max_attack_count = 6;
    else if (diff == 4) max_attack_count = 7;
    else if (diff == 5) max_attack_count = 8;
    else if (diff == 6) max_attack_count = 9;
    set_base_rate(FRENCH, "Food", base);
    set_base_rate(FRENCH, "Timber", base);
    set_base_rate(FRENCH, "Metal", base);
    set_base_rate(FRENCH, "Wealth", base);
  }
  
   if (timer_expired("build_units")) {
    train_unit_with_cost(AUSTRIANS, 1, "phalanx");
    train_unit_with_cost(AUSTRIANS, 1, "javelineers");
    train_unit_with_cost(AUSTRIANS, 1, "archers");
    train_unit_with_cost(AUSTRIANS, 1, "light horse");
    train_unit_with_cost(AUSTRIANS, 1, "cataphract");
    train_unit_with_cost(AUSTRIANS, 1, "horse archers");
    set_timer("build_units", 20);
  }

  if (have_tech(AUSTRIANS, "City State")) place_city_with_cost(AUSTRIANS);

  if (timer_expired("under_attack")) { 
    //if (any_object_near_build(1, 20, 2, capital_id, 5)) {
    for (i = 0; i < 1; i++) {
      build_check = find_build(AUSTRIANS, "");
      if (object_health(AUSTRIANS, build_check) < 100) {
        clear_group(AUSTRIANS);
        for (n = num_military_units(AUSTRIANS); n > 0; n--) {
          unit = find_military(AUSTRIANS);
          add_to_group(AUSTRIANS, unit);
        }
        your_unit = find_military(FRENCH);
        x = object_position_x(FRENCH, your_unit);
        y = object_position_y(FRENCH, your_unit);
        group_stance_order(AUSTRIANS, "Aggressive");
        group_attack_to_order(AUSTRIANS, x, y);
      }
    }
    set_timer("under_attack", 1);
  }

  trigger findCity(find_city_with_num(FRENCH, 1)) {
    city_two = find_city_with_num(FRENCH, 1);
    city_two_id = find_city_id(city_two);
    city_assimilate(1, city_two);
    loc_x = object_position_x(FRENCH, city_two_id);
    loc_y = object_position_y(FRENCH, city_two_id);
    create_unit(FRENCH, loc_x, loc_y, "citizen", 5);
    disable_trigger("findCity");
  }

  if (timer_expired("lcav")) {
    if (find_unit(FRENCH, "catapult")) {
      cat = find_unit(FRENCH, "catapult");
      x = object_position_x(FRENCH, cat);
      y = object_position_y(FRENCH, cat);
      x = x + (rand_int(17,24));
      y = y + (rand_int(8,11));
      if (age(AUSTRIANS) >= 2) {
        x = x + 3;
        y = y + 1;
      }
      if (age(AUSTRIANS) >= 5) {
        x = x + 3;
        y = y + 1;
      }
      if (age(AUSTRIANS) >= 6) {
        x = x + 3;
        y = y + 1;
      }
      if (age(AUSTRIANS) >= 7) {
        x = x + 3;
        y = y + 1;
      }
      if (x < 0) x = 1;
      if (y < 0) y = 1;
      if (!map_is_land(x, y)) {
        x = def_cap_x + 3;
        y = def_cap_y;
      }
      if (diff >= 2 && age(AUSTRIANS) < 3) {
        for (i = diff - 3; i > 0; i--) {
          light_cav = create_unit_upgrade(AUSTRIANS, x, y, "light horse", 1);
          unit_attack_order(AUSTRIANS, light_cav, FRENCH, cat);
        }
      }
      else if (diff >= 2 && age(AUSTRIANS) > 2) {
        for (i = diff - 2; i > 0; i--) {
          light_cav = create_unit_upgrade(AUSTRIANS, x, y, "light horse", 1);
          unit_attack_order(AUSTRIANS, light_cav, FRENCH, cat);
        }
      }
      count_time = rand_int(45,90);
      set_timer("lcav", count_time);
    }
    else if (find_unit(FRENCH, "supply wagon")) {
      sw = find_unit(FRENCH, "supply wagon");
      x = object_position_x(FRENCH, sw);
      y = object_position_y(FRENCH, sw);
      x = x + (rand_int(17,24));
      y = y + (rand_int(8,11));
      if (diff >= 2) {
        for (i = (diff - 1); i > 0; i--) {
          light_cav = create_unit_upgrade(AUSTRIANS, x, y, "light horse", 1);
          unit_attack_order(AUSTRIANS, light_cav, FRENCH, sw);
        }
      }
      count_time = rand_int(45,75);
      set_timer("lcav", 45);
    }
  }


  trigger (num_type_upgrade(FRENCH, "Fort") == 0) {
    victory(AUSTRIANS);
  }


  
  trigger (city_id_captured(AUSTRIANS, capital_id)) {
    victory(FRENCH);
  }

  cur_time = time_min();
  if (cur_time >= end_time) {
    defeat(FRENCH);
  }
  
  if (num_cities(AUSTRIANS) == 0) {
    victory(FRENCH);
  }

  //track the stats
  if (num_units_killed(FRENCH) > french_kills) {
    french_kills = num_units_killed(FRENCH);
  }
  
  if (num_units_lost(FRENCH) > french_loses) {
    french_loses = num_units_lost(FRENCH);
  }

  temp_num = num_buildings(AUSTRIANS);
  if (temp_num != austrians_buildings) {
    if (temp_num < austrians_buildings) {
      french_razes++;
    }
    austrians_buildings = temp_num;
  }
  
  temp_num = num_buildings(GENOANS);
  if (temp_num != genoans_buildings) {
    if (temp_num < genoans_buildings) {
      french_razes++;
    }
    genoans_buildings = temp_num;
  }
  
  temp_base = base + french_kills + french_razes - french_loses;
  temp_base = temp_base * 2;
  
  set_base_rate(FRENCH, "Food", temp_base);
  set_base_rate(FRENCH, "Timber", temp_base);
  set_base_rate(FRENCH, "Metal", temp_base);
  set_base_rate(FRENCH, "Wealth", temp_base);  

  if (timer_expired("waves")) {
        who = 2;
    //find human army
    who_unit = find_unit(1, "");
    scout = find_unit(1, "scout");
    general = find_unit(1, "general");
    use_scout = rand_int(1,5);
    if (use_scout < 2) who_unit = scout;
    unit_x = object_position_x(1, who_unit);
    unit_y = object_position_y(1, who_unit);
    x_check = unit_x;
    y_check = unit_y;

    /*if (x_check == 0 && y_check == 0) {
      who_unit = find_unit(1, "");
      x_check = object_position_x(2, who_unit);
      y_check = object_position_y(2, who_unit);
    }*/
    //find place spot for army
    building_id = find_military_build(who);
    building_x = object_position_x(who, building_id);
    building_y = object_position_y(who, building_id);
    x_distance = x_check - building_x;
    y_distance = y_check - building_y;
    x_distance_absl = absl_int(x_distance);
    y_distance_absl = absl_int(y_distance);
    if (x_check_absl > y_check_absl) {
      if ((x_check - building_x) > 0) {
        x = x_check - 20;
        if (age(AUSTRIANS) >= 2) {
          x = x - 5;
        }
        if (age(AUSTRIANS) >= 5) {
          x = x - 2;
        }
        if (age(AUSTRIANS) >= 6) {
          x = x - 2;
        }
        if (age(AUSTRIANS) >= 7) {
          x = x - 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          x = x_check - 25;
        }
      }
      else {
        x = x_check + 20;
        if (age(AUSTRIANS) >= 2) {
          x = x + 5;
        }
        if (age(AUSTRIANS) >= 5) {
          x = x + 2;
        }
        if (age(AUSTRIANS) >= 6) {
          x = x + 2;
        }
        if (age(AUSTRIANS) >= 7) {
          x = x + 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          x = x_check + 25;
        }
      }
      if ((y_check - building_y) > 0) {
        y = y_check - 15;
        if (age(AUSTRIANS) >= 2) {
          y = y - 5;
        }
        if (age(AUSTRIANS) >= 5) {
          y = y - 2;
        }
        if (age(AUSTRIANS) >= 6) {
          y = y - 2;
        }
        if (age(AUSTRIANS) >= 7) {
          y = y - 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          y = x_check - 20;
        }
      }
      else {
        y = y_check + 15;
        if (age(AUSTRIANS) >= 2) {
          y = y + 5;
        }
        if (age(AUSTRIANS) >= 5) {
          y = y + 2;
        }
        if (age(AUSTRIANS) >= 6) {
          y = y + 2;
        }
        if (age(AUSTRIANS) >= 7) {
          y = y + 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          y = y_check - 20;
        }
      }
    }
    else {
      if ((y_check - building_y) > 0) {
        y = y_check - 20;
        if (age(AUSTRIANS) >= 2) {
          y = y - 5;
        }
        if (age(AUSTRIANS) >= 5) {
          y = y - 2;
        }
        if (age(AUSTRIANS) >= 6) {
          y = y - 2;
        }
        if (age(AUSTRIANS) >= 7) {
          y = y - 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          y = y_check - 25;
        }
      }
      else {
        y = y_check + 20;
        if (age(AUSTRIANS) >= 2) {
          y = y + 5;
        }
        if (age(AUSTRIANS) >= 5) {
          y = y + 2;
        }
        if (age(AUSTRIANS) >= 6) {
          y = y + 2;
        }
        if (age(AUSTRIANS) >= 7) {
          y = y + 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          y = y_check + 25;
        }
      }
      if ((x_check - building_x) > 0) {
        x = x_check - 15;
        if (age(AUSTRIANS) >= 2) {
          x = x - 5;
        }
        if (age(AUSTRIANS) >= 5) {
          x = x - 2;
        }
        if (age(AUSTRIANS) >= 6) {
          x = x - 2;
        }
        if (age(AUSTRIANS) >= 7) {
          x = x - 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          x = x_check - 20;
        }
      }
      else {
        x = x_check + 15;
        if (age(AUSTRIANS) >= 2) {
          x = x + 5;
        }
        if (age(AUSTRIANS) >= 5) {
          x = x + 2;
        }
        if (age(AUSTRIANS) >= 6) {
          x = x + 2;
        }
        if (age(AUSTRIANS) >= 7) {
          x = x + 3;
        }
        if (any_object_near(FRENCH, 1, x, y, 5)) {
          x = x_check - 20;
        }
      }
    }
    if (x < 0) x = 1;
    if (y < 0) y = 1;
    if (!map_is_land(x, y)) {
      x = def_cap_x + 3;
      y = def_cap_y;
    }
    //easiest, easy, moderate
    if (diff < 4 && attack_count < 3) {
      create_unit_upgrade(AUSTRIANS, x, y, "javelineers", 1);
      create_unit_in_group(AUSTRIANS, x, y, "javelineers", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff < 4 && attack_count < 5) {
      create_unit_upgrade(AUSTRIANS, x, y, "light horse", 1);
      create_unit_in_group(AUSTRIANS, x, y, "archers", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff < 4 && attack_count < 6) {
      create_unit_upgrade(AUSTRIANS, x, y, "phalanx", 1);
      create_unit_in_group(AUSTRIANS, x, y, "phalanx", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    //tough
    else if (diff == 4 && attack_count < 3) {
      create_unit_upgrade(AUSTRIANS, x, y, "javelineers", 2);
      if (age(AUSTRIANS) > 3) create_unit_in_group(AUSTRIANS, x, y, "javelineers", 1);
      if (age(AUSTRIANS) > 6) create_unit_in_group(AUSTRIANS, x, y, "javelineers", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff == 4 && attack_count < 5) {
      create_unit_upgrade(AUSTRIANS, x, y, "light horse", 1);
      if (diff == 4) create_unit_in_group(AUSTRIANS, x, y, "light horse", 1);
      if (age(AUSTRIANS) > 3) create_unit_in_group(AUSTRIANS, x, y, "light horse", 1);
      if (age(AUSTRIANS) > 6) create_unit_in_group(AUSTRIANS, x, y, "light horse", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff == 4 && attack_count < 6) {
      create_unit_upgrade(AUSTRIANS, x, y, "phalanx", 2);
      if (age(AUSTRIANS) > 3) create_unit_in_group(AUSTRIANS, x, y, "phalanx", 1);
      if (age(AUSTRIANS) > 6) create_unit_in_group(AUSTRIANS, x, y, "phalanx", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    //tougher, toughest
    else if (diff > 4 && attack_count < 4) {
      create_unit_upgrade(AUSTRIANS, x, y, "javelineers", 2);
      create_unit_in_group(AUSTRIANS, x, y, "archers", 1);
      if (age(AUSTRIANS) > 3) create_unit_in_group(AUSTRIANS, x, y, "javelineers", 1);
      if (age(AUSTRIANS) > 6) create_unit_in_group(AUSTRIANS, x, y, "archers", 2);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff > 4 && attack_count < 7) {
      create_unit_upgrade(AUSTRIANS, x, y, "phalanx", 2);
      if (age(AUSTRIANS) > 3) create_unit_in_group(AUSTRIANS, x, y, "javelineers", 1);
      if (age(AUSTRIANS) > 6) create_unit_in_group(AUSTRIANS, x, y, "phalanx", 2);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff > 4 && attack_count < 8) {
      create_unit_upgrade(AUSTRIANS, x, y, "light horse", 1);
      if (age(AUSTRIANS) > 3) create_unit_in_group(AUSTRIANS, x, y, "light horse", 1);
      if (age(AUSTRIANS) > 6) create_unit_in_group(AUSTRIANS, x, y, "light horse", 2);
      catapult = find_unit(FRENCH, "catapult");
      cat_x = object_position_x(FRENCH, catapult);
      cat_y = object_position_y(FRENCH, catapult);
      group_attack_to_order(who, cat_x, cat_y);
    }

    attack_count++;
    set_timer("waves", 25-diff);
  }

}