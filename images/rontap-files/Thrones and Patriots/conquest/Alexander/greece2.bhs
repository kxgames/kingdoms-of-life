int scenario raze_city (String city_name);
int scenario new_force( int step, int x, int y );
int scenario thebes_falls( int who );
int scenario tech_level(int who, String category);

scenario
{

  static int map_size = get_map_size();

  //Alexander
  static int alexander = find_unit(1, "Alexander");

  //get nation numbers
  static int macedonians = 1;
  static int athens = 5;
  static int sparta = 3;
  static int thebes = 4;
  static int thessaly = 2;

  static int diff = get_difficulty();

  //Theban cities
  static String thebes_cap_name = find_capital(thebes);
  static String thebes_two_name = find_city_with_num(thebes, 2);
  static String thebes_three_name = find_city_with_num(thebes, 3);
  static String thebes_four_name = find_city_with_num(thebes, 4);

  //athenian cities
  static String athens_cap_name = find_capital(athens);
  static String athens_two_name = find_city_with_num(athens, 2);
  static String athens_three_name = find_city_with_num(athens, 3);

  //spartan cities
  static String sparta_cap_name = find_capital(sparta);
  static String sparta_two_name = find_city_with_num(sparta, 2);
  static String sparta_three_name = find_city_with_num(sparta, 3);
  static String sparta_four_name = find_city_with_num(sparta, 4);

  static String thessaly_cap_name = find_capital(thessaly);

  static int old_units_killed;
  int new_units_killed;
  int reinforce_num;
  static int armies_received = 0;

  int building;
  String city_name;
  int nation;
  int new_unit;
  int amount;
  static int step = 1;

  static int tx;
  static int ty;

  static int thess_yours;

  static int athens_submit;
 
  static int cur_time = time_min();

  static int end_time = get_time_limit();

  run_once {

  enable_type_by_tribe("Greek Mercenaries", "French", "Barracks", 0, 3);
  gain_upgrade(2, "Greek Mercenaries");
  enable_type_by_tribe("Greek Mercenaries", "Germans", "Stable", 0, 2);
  enable_type_by_tribe("Greek Mercenaries", "Dutch", "Stable", 0, 2);
  enable_type_by_tribe("Greek Mercenaries", "Americans", "Stable", 0, 2);
  gain_upgrade(3, "Greek Mercenaries");
  gain_upgrade(4, "Greek Mercenaries");
  gain_upgrade(5, "Greek Mercenaries");

    //add_objective_text($S("Crush all Greek opposition"), 10, "");
    ctw_add_objective($S("Reach the Thessalians' (Blue) capital in hopes that your large army will pressure them into joining your side."), "kill_thessaly", "");
    city_name = find_capital(thessaly);
    building = find_city_id(city_name);
    set_seen(macedonians, thessaly, building);
  
    building = find_city_id(thessaly_cap_name);
    tx = object_position_x(thessaly, building);
    ty = object_position_y(thessaly, building);

    enable_all_triggers();
  
   // disable_trigger("dead_athens");
    //disable_trigger("friend_athens");
    //disable_trigger("dead_sparta");
    //disable_trigger("friend_sparta");
    disable_trigger("athens_yours");

    //timers
    set_timer("thess_horse", 5);
    set_timer("reinforcements", 300);

  }
  
  trigger (time_later_than(0)) {
  enable_type_by_tribe("Greek Mercenaries", "French", "Barracks", 0, 3);
  enable_type_by_tribe("Greek Mercenaries", "Germans", "Stable", 0, 2);
  enable_type_by_tribe("Greek Mercenaries", "Dutch", "Stable", 0, 2);
  enable_type_by_tribe("Greek Mercenaries", "Americans", "Stable", 0, 2);  
  }  

  trigger (is_defeated(thessaly)) {
    set_capital(macedonians, $S("Thessalonica"));
  }

  cur_time = time_min();

  if (cur_time >= end_time) defeat(1); 
  
  for (nation = 2; nation < 9; nation++) {
    if (offer_made(macedonians, nation)) {
      reject_offer(nation, macedonians);
    }
  }  
  
  trigger (any_object_near(macedonians, 5, tx, ty, 20)) {
    if (diff < 6 && diff > 2) set_timer("thessaly_choice", 300);
    if (num_cities(macedonians) > 0) {
      popup_dialog($S("Message from the Thessalians (Blue): We have been waiting a long time for you to get here, Alexander. Perhaps if you had come earlier without causing such mischief we would have joined you. Unfortunately, we must now fight you to the death."));
      for (i = 0; i < num_military_units(thessaly); i++) {
        unit = find_all_military(thessaly);
        if (is_garrisoned(thessaly, unit)) {
          unit_eject_order(thessaly,unit);
        }
      }
      ctw_objective_complete("kill_thessaly");
      ctw_add_objective($S("Destroy the Thessalians (Blue)."), 17, "");
    } else {
      if (num_type(thessaly, "Fort") < 2) popup_dialog($S("Message from the Thessalians (Blue): You have impressed us with your tactics, Alexander. There is no further need for fighting between our two nations. We appoint you Archon of Thessaly, as your father was before you. Our armies are yours to command against the remaining Greek dissidents."));
      else popup_dialog($S("Message from the Thessalians (Blue): How have you gotten past our Forts without us knowing about it? You have such a large army... Well, there is no question now, we submit to you, Alexander. We appoint you Archon of Thessaly, as your father was before you. Our armies are yours to command against the remaining Greek dissidents."));
      set_base_rate(thessaly, "metal", 0);
      set_base_rate(thessaly, "wealth", 0);
      if (diff > 2) {
        offer_peace(macedonians, thessaly);
        offer_peace(thessaly, macedonians);
        accept_offer(thessaly, macedonians);
        accept_offer(macedonians, thessaly);
        offer_alliance(macedonians, thessaly);
        offer_alliance(thessaly, macedonians);
        accept_offer(thessaly, macedonians);
        accept_offer(macedonians, thessaly);
      }
      for (n = num_units(thessaly); n > 0; n--) {
        unit = find_all_unit(thessaly, "");
        unit_clear_orders(thessaly, unit);
      }
      if (diff > 2) {
        for (i = 0; i < tech_level(thessaly, "Military"); i++) {
          lose_tech(thessaly, "Military");
        }
        for (i = 0; i < tech_level(thessaly, "Civics"); i++) {
          lose_tech(thessaly, "Civics");
        }
        for (i = 0; i < tech_level(thessaly, "Commerce"); i++) {
          lose_tech(thessaly, "Commerce");
        }
        for (i = 0; i < tech_level(thessaly, "Science"); i++) {
          lose_tech(thessaly, "Science");
        }
        change_to_human(thessaly);
        popup_dialog($S("You are now in control of both the Red and Blue players. You can change who you control by selecting a unit or building of the side you want to control."));
      }
      else {
        thebes_falls(thessaly);
      }
      ctw_objective_complete("kill_thessaly");
      for (nation = 3; nation < 6; nation++) {
        if (!have_war(thessaly, nation)) declare_war(thessaly, nation);
      }
      stop_timer("thess_horse");
      disable_trigger("thessaly_horse");
      thess_yours = 1;
      diplomacy_set_auto(thessaly);
      set_timer("athens_objective", 5);
    }
  }
  
  trigger (is_defeated(thessaly) && thess_yours != 1) {
    stop_timer("thess_horse");
    set_timer("athens_objective", 30);
    ctw_objective_complete(17);
  }

  trigger (timer_expired("athens_objective") && !is_defeated(athens) && !is_defeated(thebes)) {
    if (!is_defeated(thebes)) {
      if (!is_defeated(athens)) {
        popup_dialog($S("Message from the Thebans (Green): We hope you do not expect us to submit to you. If anything, you should be submitting to us. In fact, why don't you just go home and leave the fighting to adults like us and our allies, the Athenians (Yellow)?"));
      }
      else {
        popup_dialog($S("Message from the Thebans (Green): We hope you do not expect us to submit to you. If anything, you should be submitting to us. In fact, why don't you just go home and leave the fighting to the adults?"));
        ctw_add_objective($S("Destroy the Athenians (Yellow)."), 13, "");
        city_name = find_capital(athens);
        building = find_city_id(city_name);
        set_seen(macedonians, athens, building);    
      }
      ctw_add_objective($S("Destroy the Thebans (Green)."), 12, "");
      city_name = find_capital(thebes);
      building = find_city_id(city_name);
      set_seen(macedonians, thebes, building);
    }
    else {
      popup_dialog($S("Message from the Athens (Yellow): We hope you do not expect us to submit to you. If anything, you should be submitting to us. In fact, why don't you just go home and leave the fighting to the adults?"));
      ctw_add_objective($S("Destroy the Athenians (Yellow)."), 13, "");
      city_name = find_capital(athens);
      building = find_city_id(city_name);
      set_seen(macedonians, athens, building);    
    }
  }

  trigger (is_defeated(thebes) || num_cities(thebes) == 0) {
    defeat(thebes);
    ctw_objective_complete(12);
  }

  trigger ((have_peace(macedonians, sparta) || is_defeated(sparta)) && (have_peace(macedonians, athens) || is_defeated(athens)) && is_defeated(thebes) && (have_alliance(macedonians, thessaly) || is_defeated(thessaly))) {
    victory(macedonians);
  }

  trigger (timer_expired("leave_sparta")) {
    if (popup_choice($S("Your Generals ask: Are you sure you do not want to leave the Spartans (Purple) alone? We do not have to defeat them to take Greece. Of course, they might revolt later, but our forces will be much stronger then, and have a much easier time against them."), $S("Peace"), $S("War")) == 1) {
      offer_peace(macedonians, sparta);
      offer_peace(sparta, macedonians);
      accept_offer(sparta, macedonians);
      accept_offer(macedonians, sparta);
      set_ctw_int("sparta_peace", 1);
      ctw_objective_complete(11);
      victory(macedonians);      
    } else {
      print_game_msg($S("Your Generals say: As you wish. As we followed your father, we will follow you."));
    }  
  }  

  trigger ((have_peace(macedonians, athens) || is_defeated(athens)) && is_defeated(thebes) && (have_alliance(macedonians, thessaly) || is_defeated(thessaly))) {
    for (i = 0; i < num_buildings(sparta); i++) {
      building = find_build(sparta, "");
      set_seen(macedonians, sparta, building);
    }
    set_timer("sparta_choice1", 3);
  }
  
  trigger (timer_expired("sparta_choice1")) {
    capital = find_capital(sparta);
    building = find_city_id(capital);
    x = object_position_x(sparta, building) - 4;
    y = object_position_y(sparta, building) + 1;
    jump_camera(x,y);
    if (popup_choice($S("Scouts have brought back maps of Sparta. Your Generals recommend that you leave the Spartans (Purple) alone. They look very strong, and it is not necessary to defeat them to take Greece. Of course, they might revolt later, but our forces will be much stronger then, and have a much easier time against them."), $S("Peace"), $S("War")) == 1) {
      offer_peace(macedonians, sparta);
      offer_peace(sparta, macedonians);
      accept_offer(sparta, macedonians);
      accept_offer(macedonians, sparta);
      set_ctw_int("sparta_peace", 1);
      victory(macedonians);      
    } else {
      print_game_msg($S("Your Generals say: So be it, but you cannot say we did not warn you!"));
      ctw_add_objective($S("Defeat the Spartans (Purple)."), 11, "");
      city_name = find_capital(sparta);
      building = find_city_id(city_name);
      set_seen(macedonians, sparta, building);
    }
    if (diff < 5) set_timer("leave_sparta", 300);
  }

  trigger (is_defeated(athens)) {
    disable_trigger("athens_yours");
  }

  trigger athens_yours(timer_expired("athens_submit") && !is_defeated(athens)) {
    popup_dialog($S("The Athenians (Yellow) have seen the destruction of the Thebans (Green), and do not wish to face the same fate. They have thrown down their arms in peace and submitted to your will."));
    make_alliance(macedonians, athens);
    make_alliance(thessaly, athens);
    for (n = num_units(athens); n > 0; n--) {
      unit = find_unit(athens, "");
      unit_clear_orders(athens, unit);
    }
    if (diff > 4) {
      change_to_human(athens);
      if (have_alliance(macedonians, thessaly)) {
        popup_dialog($S("You are now in control of the Red, Blue, and Yellow players."));
      }
      else {
        popup_dialog($S("You are now in control of the Blue and Yellow players."));
      }
    }
    else thebes_falls(athens);
    add_visibility(athens, macedonians);
    add_visibility(athens, thessaly);
    add_visibility(macedonians, athens);
    add_visibility(thessaly, athens);
    disable_take_attrition(macedonians);
    ctw_objective_complete("kill_athens");
    declare_war(athens, sparta);
    diplomacy_set_auto(athens);
    ctw_objective_complete(13);
  }

  trigger thessaly_horse(timer_expired("thess_horse")) {
    for (n = (num_type(thessaly, "Stable") * 2); n > 0; n--) {
      building = find_build(thessaly, "Stable");
      train_unit_at_with_cost(thessaly, 1, "Thessalian Cavalry", building);
    }
    if (thess_yours == 0) {
      set_timer("thess_horse", 30);
      enable_trigger("thessaly_horse");
    }
  }
  
  trigger (is_defeated(athens)) {
    ctw_objective_complete(13);
  }

  //find if macedonians have assimlated any Theban cities.

  trigger (city_captured_by(thebes, macedonians, thebes_cap_name) || city_captured_by(thebes, thessaly, thebes_cap_name)) {

    if (popup_choice($S("We have captured the Theban (Green) capital! You are tempted to raze it to the ground because of how their insult angered you. Also, the other Greek city states might be inspired to join our side rather than suffer the same fate. One of your Advisors warns you that this could actually hurt our diplomatic relations with other nations."), $S("Raze it!"), $S("Keep it")) == 1) {
      building = find_city_id(thebes_cap_name);
      nation = find_city_owner(thebes_cap_name);
      x = object_position_x(nation, building);
      y = object_position_y(nation, building);
      //amount = 
      raze_city(thebes_cap_name);      
      //for (a = amount; a > 0; a--) {
        //new_force(step, x, y);
        //step++;
        //if (step > 11) step = 0;
      //}
      set_timer("athens_submit", 3);
      enable_trigger("athens_yours");
      popup_dialog($S("The remaining Theban (Green) cities have sworn fealty to you."));
      thebes_falls(thebes);
      thebes_falls(thebes);

      for (c = 0; c < num_cities(macedonians); c++) {
        city_name = find_city_name(macedonians);
        if (city_being_assimilated(macedonians, city_name)) {
          city_assimilate(macedonians, city_name);
        }
      }
      defeat(thebes);
      ctw_objective_complete(12);
      set_ctw_int("atrocity", 1);   
    }
  }
  
  trigger (num_cities(macedonians) > 0) {
    city_name = find_city_name(macedonians);
    if (city_being_assimilated(macedonians, city_name)) {
      city_assimilate(macedonians, city_name);
      set_capital(macedonians, city_name);
    }
  }
  

  if (num_units(macedonians) == 0) {
    defeat(macedonians);
  }

}

int scenario raze_city (String city_name)
{

  int macedonians = 1;
  int thessaly = 2;
  int thebes = 4;

  int building;
  String building_name;
  int build_destroyed = 0;
  int nation;

  if (num_cities(macedonians) > 0) nation = macedonians;
  else nation = thessaly;
  
  for (step = 1; step < 12; step++) {

    switch(step){

      case 1:
        building_name = "Temple";
        break;
      case 2:
        building_name = "Market";
        break;
      case 3:
        building_name = "Library";
        break;
      case 4:
        building_name = "Senate";
        break;
      case 5:
        building_name = "University";
        break;
      case 6:
        building_name = "Farm";
        break;
      case 7:
        building_name = "Woodcutter's Camp";
        break;
      case 8:
        building_name = "Mine";
        break;
      case 9:
        building_name = "Granary";
        break;
      case 10:
        building_name = "Smelter";
        break;
      case 11:
        building_name = "Lumbermill";
        break;

    }

    for (n = num_city_buildings(nation, city_name, building_name, 1); n > 0; n--) {
      building = find_build_at_city(nation, city_name, building_name, 1);
      destroy_building(nation, building);
      build_destroyed++;
    }

  }

  building = find_city_id(city_name);
  destroy_building(nation, building);
  build_destroyed = build_destroyed + 3;

  return build_destroyed;

}

int scenario new_force( int step, int x, int y ) 
{

  int macedonians = 1;

  switch(step) {
  
      case 1:
        create_unit_upgrade(macedonians, x, y, "Javelineers", 1);
        print_game_msg($S("We have recruited a group of Javelineers."));
        break;
      case 2:
        create_unit_upgrade(macedonians, x, y, "Phalanx", 1);
        print_game_msg($S("We have recruited a group of Phalanx."));
        break;
      case 3:
        create_unit_upgrade(macedonians, x, y, "Archers", 1);
        print_game_msg($S("We have recruited a group of Archers."));
        break;
      case 4:
        create_unit_upgrade(macedonians, x, y, "Light Horse", 1);
        print_game_msg($S("We have recruited a Light Horse."));
        break;
      case 5:
        create_unit_upgrade(macedonians, x, y, "Companion", 1);
        print_game_msg($S("We have recruited a Companion."));
        break;
      case 6:
        create_unit_upgrade(macedonians, x, y, "Catapult", 1);
        print_game_msg($S("We have recruited a Catapult."));
        break;
      case 7:
        create_unit_upgrade(macedonians, x, y, "Javelineers", 1);
        print_game_msg($S("We have recruited a group of Javelineers."));
        break;
      case 8:
        create_unit_upgrade(macedonians, x, y, "Phalanx", 1);
        print_game_msg($S("We have recruited a group of Phalanx."));
        break;
      case 9:
        create_unit_upgrade(macedonians, x, y, "Phalanx", 1);
        print_game_msg($S("We have recruited a group of Phalanx."));
        break;
      case 10:
        create_unit_upgrade(macedonians, x, y, "Companion", 1);
        print_game_msg($S("We have recruited a Companion."));
        break;
      case 11:
        create_unit_upgrade(macedonians, x, y, "Supply Wagon", 1);
        print_game_msg($S("We have recruited a Supply Wagon."));
        break;

  }

  return 1;

}

int scenario thebes_falls(int who) {

  int new_team = 1;
  int cur_team = who;
  int unit_id = 0;
  int build_id = 0;
  int ally_guy = 0;
  int hidden = find_inside_unit(who, "");

  while (hidden > -1) {
    kill_unit_anim(who, hidden, 1);
    hidden = find_inside_unit(who, "");
  }

  for(cur_team = who; cur_team < who+1; cur_team++) {
    if (cur_team != ally_guy && !is_defeated(cur_team) && cur_team != new_team) {
      //////civilian/////////
      do {
        unit_id = find_all_unit(cur_team, "Citizen");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Scholar");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Caravan");
        if (is_on_transport(cur_team, unit_id)) {
          kill_unit_anim(cur_team, unit_id,2);
        }
        else {
          switch_teams(new_team, cur_team, unit_id);
        }
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Merchant");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      //////////Castle/Special
      /*do {
        unit_id = find_all_unit(cur_team, "General");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);*/
      do {
        unit_id = find_all_unit(cur_team, "Transport");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Merchant Fleet");
        kill_unit_anim(cur_team, unit_id, 2);
      } while(unit_id > -1);
      ///////////////////////////

      ///////barracks////////////
      do {
        unit_id = find_all_unit(cur_team, "Javelineers");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Phalanx");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Archers");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Scout");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      ///////////Stable/////////
      do {
        unit_id = find_all_unit(cur_team, "Light Horse");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Cataphract");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Horse Archer");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      //////////////////////////

      /////////Siege//////////
      do {
        unit_id = find_all_unit(cur_team, "Catapult");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Supply Wagon");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      /////////////////////

      ///////Dock////////////
      do {
        unit_id = find_all_unit(cur_team, "Dromon");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Galley");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Fire Raft");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Fishermen");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      ////tower, fort, observation post/////
      do {
        build_id = find_build(cur_team, "Tower");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Fort");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Lookout");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      ////barracks, stable, siege factory, dock/////////
      do {
        build_id = find_build(cur_team, "Barracks");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Stable");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Siege Factory");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Dock");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      /////woodcutter's camp, mine///////////
      do {
        build_id = find_build(cur_team, "Woodcutter's Camp");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Mine");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      ///////City////////////
      //number_of_cities = num_cities(cur_team);
      while (num_cities(cur_team) > 0) {
        city_name = find_city_name(cur_team);
        city_id = find_build(cur_team, "Small City");
        switch_teams(new_team, cur_team, city_id);
        city_assimilate(new_team, city_name);
        city_id = find_city_id(city_name);
        set_object_health (new_team, city_id, 100);
      }
      ///////////////////////////
    }
  }

}

int scenario tech_level(int who, String category)
{
  if (category == "Military") {
    if (!have_tech(who, "The Art of War")) {
      return 0;
    } else if (!have_tech(who, "Mercenaries")) {
      return 1;
    } else if (!have_tech(who, "Standing Army")) {
      return 2;
    } else if (!have_tech(who, "Conscription")) {
      return 3;
    } else if (!have_tech(who, "Levee en Masse")) {
      return 4;
    } else if (!have_tech(who, "Nation-in-Arms")) {
      return 5;
    } else if (!have_tech(who, "Selective Service")) {
      return 6;
    } else {
      return 7;
    }
  } else if (category == "Civic") {
    if (!have_tech(who, "City State")) {
      return 0;
    } else if (!have_tech(who, "Empire")) {
      return 1;
    } else if (!have_tech(who, "Feudalism")) {
      return 2;
    } else if (!have_tech(who, "Divine Right")) {
      return 3;
    } else if (!have_tech(who, "Constitution")) {
      return 4;
    } else if (!have_tech(who, "Great Power")) {
      return 5;
    } else if (!have_tech(who, "International Law")) {
      return 6;
    } else {
      return 7;
    }
  } else if (category == "Commerce") {
    if (!have_tech(who, "Barter")) {
      return 0;
    } else if (!have_tech(who, "Coinage")) {
      return 1;
    } else if (!have_tech(who, "Trade")) {
      return 2;
    } else if (!have_tech(who, "Mercantilism")) {
      return 3;
    } else if (!have_tech(who, "Finance")) {
      return 4;
    } else if (!have_tech(who, "Assembly Line")) {
      return 5;
    } else if (!have_tech(who, "Globalization")) {
      return 6;
    } else {
      return 7;
    }
  } else if (category == "Science") {
    if (!have_tech(who, "Written Word")) {
      return 0;
    } else if (!have_tech(who, "Mathematics")) {
      return 1;
    } else if (!have_tech(who, "Chemistry")) {
      return 2;
    } else if (!have_tech(who, "Laws of Nature")) {
      return 3;
    } else if (!have_tech(who, "Electricity")) {
      return 4;
    } else if (!have_tech(who, "Electronics")) {
      return 5;
    } else if (!have_tech(who, "Computerization")) {
      return 6;
    } else {
      return 7;
    }
  } else {
    return -1;
  }

}