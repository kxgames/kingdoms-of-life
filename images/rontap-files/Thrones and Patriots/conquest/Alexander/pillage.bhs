int scenario destroy_city (String city_name);

scenario
{

  labels {
    ALEXANDER,
    ENEMY,
  }
  
  static int end_time = get_time_limit();
  int cur_time;
  int i;
  int times;
  int building;
  static int fort_id = find_build(ALEXANDER, "Fort");
  
  static int recruit_time = 60;
  int temp_recruit;
  int searching;
  static int infantry[] = [1, 0, 0, 0];
  static String inf_names[] = ["Greek Mercenaries", "Legions", "Scutari", "Barbarians"];
  static int inf_timers[] = [60, -1, -1 , -1];
  static int ranged[] = [0, 0, 0, 0, 0];
  static String ran_names[] = ["Immortals", "Longbowmen", "Kushite Archers", "Camel Archer", "Chariot"];
  static int ran_timers[] = [-1, -1, -1 , -1, -1];
  static int cavalry[] = [0, 0, 0];
  static String cav_names[] = ["Chevalier", "Light Camel", "War Elephant"];
  static int cav_timers[] = [-1, -1, -1];
  int factor = 3;
  static int cost = 100;
  static int diff = get_difficulty();
  static int plunder_amount = 900 + diff * 100;

  run_once {

    //alexander, companions, 
    //greek mercenaries,//scutari, barbarians, legions,i
    //heavy - chevalier, light camel war elephant, s
    //archer - longbowmen, kushite archers, camel archer, chariot, immortals, l
    ctw_add_objective_text(parse("Stockpile $NUM0 of every resource (except Knowledge) through plunder.", plunder_amount), 8, "");
    ctw_add_objective_text($S("Hint: Build mercenaries at your Fort"), 10, "");
  }
  


  cur_time = time_min();
  if (cur_time >= end_time) {
    defeat(ALEXANDER);
  }

  if (num_cities(ALEXANDER) > 0 || num_type(ALEXANDER, "Small City") > 0) {
    city_name = find_city_name(ALEXANDER);
    destroy_city(city_name);
    for (a = 0; a < num_buildings(ALEXANDER); a++) {
      building = find_build(ALEXANDER, "");
      if (building != fort_id) {
        switch_teams(ENEMY, ALEXANDER, building);
      }
    }
  }

  if (num_type(1, "Food") >= plunder_amount && num_type(1, "Timber") >= plunder_amount && num_type(1, "Metal") >= plunder_amount && num_type(1, "Wealth") >= plunder_amount) {
    victory(ALEXANDER);
  }

  if (num_cities(2) == 0) {
    defeat(ALEXANDER);
  }


}

//  Destroy city buildings and get a count for how big the recruited army should be
int scenario destroy_city (String city_name)
{

  int building;
  String building_name;
  int build_destroyed = 0;
  int diff = get_difficulty();
  //temp = 120 wealth mill = 300 timber uni = 120 wealth tower = 160 metal wood = 100 timb
  //gran = 300 food farm = 80 food mine = 120 metal smelter = 300 metal lib = 120 timb 
  //market = 120 wealth senate = 120 wealth
  int resources[] = [0,0,0,0];
  String building_list[] = ["Temple", "Market", "Library", "Senate", "University", "Farm", "Woodcutter's Camp", "Mine", "Granary", "Smelter", "Lumber Mill"];
  int building_values[] = [120, 120, 120, 120, 120, 80, 100, 120, 300, 300, 300];
  String values_type[] = ["Wealth", "Wealth", "Timber", "Wealth", "Timber", "Food", "Timber", "Metal", "Food", "Metal", "Timber"];

  int nation = 1;
  int i;
  int n;
  
  for (i = 0; i < building_list.length; i++) {

    building_name = building_list[i];

    for (n = num_city_buildings(nation, city_name, building_name, 1); n > 0; n--) {
      building = find_build_at_city(nation, city_name, building_name, 1);
      bubble_text_obj(parse("+$NUM0 $STRING1", building_values[i], values_type[i]), nation, building);
      give_good(nation, values_type[i], building_values[i]);
      destroy_building(nation, building);
      build_destroyed++;
    }

  }

  building = find_city_id(city_name);
  destroy_building(nation, building);
  build_destroyed = build_destroyed + 4;
  if (diff > 4) build_destroyed + 2;
  
  return build_destroyed;
}