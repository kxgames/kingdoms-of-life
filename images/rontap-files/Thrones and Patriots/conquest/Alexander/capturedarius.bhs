String scenario real_time ( int the_time );
int scenario rising_star(int who, int who2);
int scenario kill_team(int who);
int scenario defeat_him(int defeat_who, int switch_who);
int scenario defeat_check();

scenario
{

  labels {
    ALEXANDER,
    BESSUS,
    SPITAMENES,
    SATRAP,
    DARIUS,
  }
  
  static int darius_id = find_unit(DARIUS, "Darius");
  static int diff = get_difficulty();
  int unit;
  String city_name;
  static int who = DARIUS;
  int x;
  int y;
  static String text_cap2 = $S("Darius is free.");
  static int capture_time = 600;
  static int capture1 = 600;
  static int capture2 = 600;
  static int capture3 = 600;
  
  static int capture[] = [0, 600, 600, 600];
  static String leaders[] = ["Blank", $S("Alexander"), $S("Bessus"), $S("Spitamenes")];
  static int order[] = [0, 1, 2, 3];
  
  int high_nation;
  int high_num;
  int temp_num;
  String text_cap;
  int tribe;
  int escape_time;
  int nation;
  
  static int end_time = get_time_limit();
  int cur_time;


  String caspian = "Caspian Gates";
  int building = find_city_id(caspian);
 
  run_once {
    set_seen(ALEXANDER, DARIUS, building);
    set_timer("hold_scholar", 1);
    //unit_ignore_orders(DARIUS, darius_id);
    ctw_add_objective_text($S("Capture Darius or conquer the enemies."), "cap_darius", "");
    add_objective_text($S("Alexander hold time: 10:00"), "alex_cap", "");
    add_objective_text($S("Bessus hold time: 10:00"), "bessus_cap", "");
    add_objective_text($S("Spitamenes hold time: 10:00"), "spit_cap", "");
    add_objective_text($S("Darius is free."), 6, "");
    set_timer("bessus_charge", 1);
    set_timer("spit_charge", 1);
    set_timer("darius_charge", 1);
    set_object_type_max_health("Darius", 500);
    set_timer("build_units", 1);
  }
  
  trigger (defeat_check()) {
    enable_type_by_tribe("Small City", "Persian");
    for (i = 2; i < 6; i++) {
      enable_tech(i, "Feudalism");
    }    
  }
   
  trigger (num_cities(BESSUS) == 0) {
    remove_objective("bessus_cap");
    if (who == BESSUS) {  
      if (!is_defeated(DARIUS)) {
        darius_id = switch_teams(DARIUS, BESSUS, darius_id);
        who = DARIUS;
      }
      else {
        kill_unit(BESSUS, darius_id);
      }
      kill_team(BESSUS);
    }
    else if (who == SPITAMENES) {  
      defeat_him(BESSUS, SPITAMENES);  
    }
    else {
      defeat_him(BESSUS, DARIUS);
    }    
    if (is_defeated(DARIUS) && is_defeated(SPITAMENES)) {
      if (who == ALEXANDER) {
        popup_dialog($S("Darius now has no choice but to appoint you ruler of Persia!"));
        set_ctw_int("darius_yours", 1);
      }
      //else {
        //popup_dialog($S("Darius has somehow managed to escape our grasp.")); 
      //}
      victory(ALEXANDER);    
    }   
    defeat(BESSUS);
  }
  
  trigger (num_cities(DARIUS) == 0) {
    //remove_objective("bessus_cap");
    if (who == DARIUS) {  
      kill_unit(DARIUS, darius_id);
      kill_team(DARIUS);
    }
    if (is_defeated(BESSUS) && is_defeated(SPITAMENES) && !unit_killed(who, darius_id)) {
      if (who == ALEXANDER) {
        popup_dialog($S("Darius now has no choice but to appoint you ruler of Persia!"));
        set_ctw_int("darius_yours", 1);
      }
      //else {
        //popup_dialog($S("Darius has somehow managed to escape our grasp.")); 
      //}
      victory(ALEXANDER);   
    }       
    defeat(DARIUS);
  }  
  
  trigger (num_cities(SPITAMENES) == 0) {
    remove_objective("spit_cap");
    if (who == SPITAMENES) {
      if (!is_defeated(DARIUS)) {
        darius_id = switch_teams(DARIUS, SPITAMENES, darius_id);
        who = DARIUS;
      }
      else {
        kill_team(SPITAMENES);
      }    
    }
    else if (who == BESSUS) {  
      defeat_him(SPITAMENES, BESSUS);  
    }
    else {
      defeat_him(SPITAMENES, DARIUS);
    }
    if (is_defeated(DARIUS) && is_defeated(BESSUS)) {
      if (who == ALEXANDER && !unit_killed(who, darius_id)) {
        popup_dialog($S("Darius now has no choice but to appoint you ruler of Persia!"));
        set_ctw_int("darius_yours", 1);
      }
      //else {
        //popup_dialog($S("Darius has somehow managed to escape our grasp.")); 
      //}
      victory(ALEXANDER);   
    }      
    defeat(SPITAMENES);
  }

  if (who > 1) {
    for (n = num_military_units(who); n > 0; n--) {
      unit = find_military(who);
      x = object_position_x(who, darius_id);
      y = object_position_y(who, darius_id);
      unit_move_order(who, unit, x, y);
    }
  }
  
  cur_time = time_min();
  if (cur_time >= end_time) {
    if (who == ALEXANDER) {
      if (capture1 >= capture_time) {
        set_ctw_int("darius_yours", 1);
        victory(ALEXANDER);
      }
      else if (capture2 >= capture_time) {
        set_ctw_int("darius_yours", 2);
        victory(BESSUS);
      }
      else if (capture3 >= capture_time) {
        set_ctw_int("darius_yours", 3);
        victory(SPITAMENES);
      }
    } else defeat(ALEXANDER);
  }
  
  trigger (capture1 <= 0) {
    set_ctw_int("darius_yours", 1);
    victory(who);
  }

  trigger (capture2 <= 0 || capture3 <= 0) {
    rising_star(DARIUS, who);
    defeat_him(DARIUS, who);
    if (who == BESSUS) {
      popup_dialog($S("Bessus has forced Darius to appoint him the new ruler of Persia! He has taken on the name Artaxerxes. Darius and Spitamenes's forces will now follow Artaxerxes."));
      remove_objective("spit_cap");
      remove_objective("alex_cap");
      remove_objective("bessus_cap");
      ctw_change_objective_text("cap_darius", $S("Capture the enemy capital(s)."));
      set_ctw_int("darius_yours", 2);
      defeat_him(SPITAMENES, BESSUS);
    } else {
      popup_dialog($S("Spitamenes has forced Darius to appoint him the new ruler of Persia! Darius and Bessus' forces will now follow Spitamenes."));
      remove_objective("spit_cap");
      remove_objective("alex_cap");
      remove_objective("bessus_cap");
      set_ctw_int("darius_yours", 3);
      defeat_him(BESSUS, SPITAMENES);
    }
  }

  if(who == DARIUS) unit_move_order(DARIUS, darius_id, 37, 1);
 
  x = object_position_x(who, darius_id);
  y = object_position_y(who, darius_id);
  
 // set_object_health(who, darius_id, 100);

  for (tribe = 4; tribe > 0; tribe--) {
    clear_reveal_points(tribe);
    add_reveal_point(tribe, x, y, 15);
  }  
  
  trigger darius_escapes((object_near(DARIUS, darius_id, 42, 11, 10) && who == DARIUS) || unit_killed(who, darius_id)) {
    if (unit_killed(who, darius_id)) {
      set_ctw_int("darius_yours", 4);
      popup_dialog($S("Darius has been killed! Bessus and Spitamenes are no longer interested in fighting and have left the battlefield. They have left their forces behind to fight alongside what is left of Darius' troops. We must now defeat their combined army."));
    } else popup_dialog($S("Darius has escaped! Bessus and Spitamenes are no longer interested in fighting and have left the battlefield. They have left their forces behind to fight alongside what is left of Darius' troops. We must now defeat their combined army."));
    remove_objective("spit_cap");
    remove_objective("alex_cap");
    remove_objective("bessus_cap");
    remove_objective(6);
    ctw_change_objective_text("cap_darius", $S("Capture the enemy capitals."));
    defeat_him(BESSUS, DARIUS);
    defeat_him(SPITAMENES, DARIUS);
  }

  trigger capture_leader() {
    if (is_garrisoned(DARIUS, darius_id)) {
      building = find_build(DARIUS, "Fort");
      x = object_position_x(DARIUS, building);
      y = object_position_y(DARIUS, building);
    } else {
      x = object_position_x(who, darius_id);
      y = object_position_y(who, darius_id);
    }
    if (!is_defeated(DARIUS)) enable_trigger("capture_leader");
    if (timer_expired("bessus_charge")) {
      set_timer("bessus_charge", rand_int(30, 60));
      for (n = num_military_units(BESSUS); n > 0; n--) {
        unit = find_idle_military(BESSUS);
        if (who == BESSUS) unit_move_order(BESSUS, unit, x+rand_int(-12,12), y+rand_int(-12,12));
        else if (capture1 > 300 || capture3 > 300) unit_attack_to_order(BESSUS, unit, x+rand_int(-12,12), y+rand_int(-12,12));
        else unit_attack_order(BESSUS, unit, who, darius_id);
      }
    }
    if (timer_expired("spit_charge")) {
      set_timer("spit_charge", rand_int(30, 60));
      for (n = num_military_units(SPITAMENES); n > 0; n--) {
        unit = find_idle_military(SPITAMENES);
        if (who == SPITAMENES) unit_move_order(SPITAMENES, unit, x+rand_int(-12,12), y+rand_int(-12,12));
        else if (capture1 > 300 || capture2 > 300) unit_attack_to_order(SPITAMENES, unit, x+rand_int(-12,12), y+rand_int(-12,12));
        else unit_attack_order(SPITAMENES, unit, who, darius_id);
      }
    }
    if (timer_expired("darius_charge")) {
      set_timer("darius_charge", rand_int(5,15));
      for (n = num_military_units(DARIUS); n > 0; n--) {
        unit = find_idle_military(DARIUS);
        if (who == DARIUS) unit_move_order(DARIUS, unit, x+rand_int(-12,12), y+rand_int(-12,12));
        else unit_attack_to_order(DARIUS, unit,  x+rand_int(-12,12), y+rand_int(-12,12));
      }   
    }
  }

  if (find_unit(who, "Darius")) {
    for (n = num_military_units(DARIUS); n > 0; n--) {
      unit = find_military(DARIUS);
      add_to_group(DARIUS, unit);
    }
    
    x = object_position_x(DARIUS, darius_id);
    y = object_position_y(DARIUS, darius_id);

    group_attack_to_order(DARIUS, x - 1, y - 1);  
  }
      
  if (timer_expired("hold_scholar")) { 
    if (who == ALEXANDER) {
      capture1--;
      //text_cap = real_time(capture1);
      //change_objective_text("alex_cap", parse("Alexander hold time: $STRING0", text_cap));
      if (!have_war(nation, ALEXANDER)) {
        declare_war(nation, ALEXANDER);
      }
    }
    else if (who == BESSUS) {
      capture2--;
      //text_cap = real_time(capture2);
      //change_objective_text("bessus_cap", parse("Bessus hold time: $STRING0", text_cap));
    }
    else if (who == SPITAMENES) {
      capture3--;    
      //text_cap = real_time(capture3);
      //change_objective_text("spit_cap", parse("Spitamenes hold time: $STRING0", text_cap));
    }   
    else change_objective_text(6, $S("Darius is free."));
    if (capture1 <= capture2) {
      if (capture1 <= capture3) {
        order[1] = ALEXANDER;
        capture[1] = capture1;
        if (capture2 <= capture3) {
          order[2] = BESSUS;
          capture[2] = capture2;
          order[3] = SPITAMENES;
          capture[3] = capture3;
        } else {
          order[2] = SPITAMENES;
          capture[2] = capture3;
          order[3] = BESSUS;
          capture[3] = capture2;
        }
      } else {
        order[1] = SPITAMENES;
        capture[1] = capture3;
        order[2] = ALEXANDER;
        capture[2] = capture1;
        order[3] = BESSUS;
        capture[3] = capture2;
      }
    } else if (capture2 <= capture3) {
      order[1] = BESSUS;
      capture[1] = capture2;
      if (capture1 <= capture3) {
        order[2] = ALEXANDER;
        capture[2] = capture1;
        order[3] = SPITAMENES;
        capture[3] = capture3;
      } else {
        order[2] = SPITAMENES;
        capture[2] = capture3;
        order[3] = ALEXANDER;
        capture[3] = capture1;
      }
    } else {
      order[1] = SPITAMENES;
      capture[1] = capture3;
      if (capture1 <= capture2) {
        order[2] = ALEXANDER;
        capture[2] = capture1;
        order[3] = BESSUS;
        capture[3] = capture2;
      } else {
        order[2] = BESSUS;
        capture[2] = capture2;
        order[3] = ALEXANDER;
        capture[3] = capture1;
      } 
    }   
    text_cap2 = real_time(capture[1]);
    change_objective_text("alex_cap", parse("$STRING0 hold time: $STRING1", leaders[order[1]], text_cap2));
    text_cap2 = real_time(capture[2]);
    change_objective_text("bessus_cap", parse("$STRING0 hold time: $STRING1", leaders[order[2]], text_cap2));    
    text_cap2 = real_time(capture[3]);
    change_objective_text("spit_cap", parse("$STRING0 hold time: $STRING1", leaders[order[3]], text_cap2));      
    for (nation = 2; nation < 6; nation++) {
      for (tribe = 3; tribe < 6; tribe++) {
        if (tribe != nation) {
          if (nation == who) {
            if (!have_war(tribe, nation)) {
              declare_war(tribe, who);
            }
          } else if (tribe == who) {
            if (!have_war(nation, tribe)) {
              declare_war(nation, tribe);
            }
          } else if (have_war(nation, tribe)) {
            make_peace(nation, tribe);
          }
        }
      }
    }    
    set_timer("hold_scholar", 1);   
  }
  
  x = object_position_x(who, darius_id);
  y = object_position_y(who, darius_id);

  for (tribe = 1; tribe < 6; tribe++) {
    if (tribe != 4) {
      temp_num = any_object_near(tribe, 1, x, y, 2);
      if (temp_num > high_num) {
        high_num = temp_num;
        high_nation = tribe;
      }
    }
  }  

  if (high_nation != who && !is_garrisoned(who, darius_id)) {
    unit_obey_orders(who, darius_id);
    darius_id = switch_teams(high_nation, who, darius_id);
    who = high_nation;
    if (who != DARIUS) unit_ignore_orders(who, darius_id);
    x = object_position_x(who, darius_id);
    y = object_position_y(who, darius_id);
    ping_object_all(5, who, darius_id);
    if (capture1 >= capture2) {
      if (capture1 >= capture3) {
        order[1] = ALEXANDER;
        capture[1] = capture1;
        if (capture2 >= capture3) {
          order[2] = BESSUS;
          capture[2] = capture2;
          order[3] = SPITAMENES;
          capture[3] = capture3;
        } else {
          order[2] = SPITAMENES;
          capture[2] = capture3;
          order[3] = BESSUS;
          capture[3] = capture2;
        }
      } else {
        order[1] = SPITAMENES;
        capture[1] = capture3;
        order[2] = ALEXANDER;
        capture[2] = capture1;
        order[3] = BESSUS;
        capture[3] = capture2;
      }
    } else if (capture2 >= capture3) {
      order[1] = BESSUS;
      capture[1] = capture2;
      if (capture1 >= capture3) {
        order[2] = ALEXANDER;
        capture[2] = capture1;
        order[3] = SPITAMENES;
        capture[3] = capture3;
      } else {
        order[2] = SPITAMENES;
        capture[2] = capture3;
        order[3] = ALEXANDER;
        capture[3] = capture2;
      }
    } else {
      order[1] = SPITAMENES;
      capture[1] = capture3;
      if (capture1 >= capture2) {
        order[2] = ALEXANDER;
        capture[2] = capture1;
        order[3] = BESSUS;
        capture[3] = capture2;
      } else {
        order[2] = BESSUS;
        capture[2] = capture2;
        order[3] = ALEXANDER;
        capture[3] = capture1;
      } 
    }   
    text_cap2 = real_time(capture[1]);
    change_objective_text("alex_cap", parse("$STRING0 hold time: $STRING1", leaders[order[1]], text_cap2));
    text_cap2 = real_time(capture[2]);
    change_objective_text("bessus_cap", parse("$STRING0 hold time: $STRING1", leaders[order[2]], text_cap2));    
    text_cap2 = real_time(capture[3]);
    change_objective_text("spit_cap", parse("$STRING0 hold time: $STRING1", leaders[order[3]], text_cap2));    
    if (who == ALEXANDER) {
      change_objective_text(6, $S("You have control of Darius."));
      print_msg($S("You have captured Darius!"));
    } else if (who == BESSUS) {
      change_objective_text(6, $S("Bessus has control of Darius."));   
      print_msg($S("Bessus has captured Darius!"));
    } else if (who == SPITAMENES) {
      change_objective_text(6, $S("Spitamenes has control of Darius."));     
      print_msg($S("Spitamenes has captured Darius!"));
    } else if (who == DARIUS) {
      change_objective_text(6, $S("Darius is free."));
      print_msg($S("Darius has escaped capture!"));
    }    
  }  

  trigger (capture1 > 450 && capture2 + capture3 < 300) {
    rising_star(SPITAMENES, BESSUS);
    capture2 += -capture3;
    popup_dialog($S("Seeing that their separate efforts are wasted, Spitamenes has agreed to follow Bessus. Their forces and hold time have been combined."));
    remove_objective("spit_cap");
    defeat_him(SPITAMENES, BESSUS);
  }
  
  if (who == ALEXANDER && timer_expired("build_units")) {
    set_timer("build_units", 13+(diff*2));
    for (tribe = 2; tribe < 6; tribe++) {
      train_unit_with_cost(tribe, 1, "Javelineers");
      train_unit_with_cost(tribe, 1, "Phalanx");
      train_unit_with_cost(tribe, 1, "Archers");
      train_unit_with_cost(tribe, 1, "Light Horse");
      train_unit_with_cost(tribe, 1, "Cataphract");
      train_unit_with_cost(tribe, 1, "Horse Archer");
      train_unit_with_cost(tribe, 1, "Catapult");
    }
  }



}

String scenario real_time ( int the_time ) {

  int min = the_time/60;
  int sec = the_time%60;
  String time_data;

  if (sec < 10) {
    time_data = min + ":0" + sec;
  } else {
    time_data = min + ":" + sec;
  }

  return time_data;

}

int scenario rising_star(int who, int who2) {

  int new_team = who2;
  int cur_team = who;
  int unit_id = 0;
  int build_id = 0;
  int ally_guy = 0;

  for(cur_team = who; cur_team < who+1; cur_team++) {
    if (cur_team != ally_guy && !is_defeated(cur_team) && cur_team != new_team) {
      //////civilian/////////
      do {
        unit_id = find_all_unit(cur_team, "Citizen");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Scholar");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Caravan");
        if (is_on_transport(cur_team, unit_id)) {
          kill_unit_anim(cur_team, unit_id,2);
        }
        else {
          switch_teams(new_team, cur_team, unit_id);
        }
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Merchant");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      //////////Castle/Special
      /*do {
        unit_id = find_all_unit(cur_team, "General");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);*/
      do {
        unit_id = find_all_unit(cur_team, "Transport");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Merchant Fleet");
        kill_unit_anim(cur_team, unit_id, 2);
      } while(unit_id > -1);
      ///////////////////////////

      ///////barracks////////////
      do {
        unit_id = find_all_unit(cur_team, "Javelineers");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Phalanx");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Archers");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Scout");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      ///////////Stable/////////
      do {
        unit_id = find_all_unit(cur_team, "Light Horse");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Cataphract");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Horse Archer");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      //////////////////////////

      /////////Siege//////////
      do {
        unit_id = find_all_unit(cur_team, "Catapult");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Supply Wagon");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      /////////////////////

      ///////Dock////////////
      do {
        unit_id = find_all_unit(cur_team, "Dromon");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Galley");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Fire Raft");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Fishermen");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      ////tower, fort, observation post/////
      do {
        build_id = find_build(cur_team, "Tower");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Fort");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Lookout");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      ////barracks, stable, siege factory, dock/////////
      do {
        build_id = find_build(cur_team, "Barracks");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Stable");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Siege Factory");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Dock");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      /////woodcutter's camp, mine///////////
      do {
        build_id = find_build(cur_team, "Woodcutter's Camp");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Mine");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      ///////City////////////
      number_of_cities = num_cities(cur_team);
      for (i = 1; i <= number_of_cities; i++) {
        city_name = find_city_name(cur_team);
        city_id = find_city_id(city_name);
        switch_teams(new_team, cur_team, city_id);
        city_assimilate(new_team, city_name);
        city_id = find_city_id(city_name);
        set_object_health (new_team, city_id, 100);
      }
      ///////////////////////////
    }
  }

}

int scenario kill_team(int who)
{

  int building;
  int unit;
  
  while (num_type_upgrade(who, "Fort") > 0) {
    building = find_build(who, "Fort");
    destroy_building(who, building);
  }
  
  while (num_type_upgrade(who, "Tower") > 0) {
    building = find_build(who, "Tower");
    destroy_building(who, building);
  }

  while (num_units(who) > 0) {
    unit = find_all_unit(who, "");
    if (is_garrisoned(who, unit)) {
      kill_unit_anim(who, unit, 1);
    }
    else {
      kill_unit_anim(who, unit, 2);
    }
  }
  
  defeat(who);
  
  return 1;
  
}

int scenario defeat_him(int defeat_who, int switch_who)
{

  int building;
  int unit;

  if (is_defeated(switch_who)) {
    kill_team(defeat_who);
    return 0;
  }
  
  while (num_type_upgrade(defeat_who, "Fort") > 0) {
    building = find_build(defeat_who, "Fort");
    destroy_building(defeat_who, building);
  }
  
  while (num_type_upgrade(defeat_who, "Tower") > 0) {
    building = find_build(defeat_who, "Tower");
    destroy_building(defeat_who, building);
  }

  while (num_units(defeat_who) > 0) {
    unit = find_all_unit(defeat_who, "");
    if (is_garrisoned(defeat_who, unit) || unit_category(defeat_who, unit) == "Civilian") {
      kill_unit_anim(defeat_who, unit, 1);
    }
    else {
      unit = switch_teams(switch_who, defeat_who, unit);
      unit_clear_orders(switch_who, unit);
      enable_unit_ai(switch_who, unit);
      unit_obey_orders(switch_who, unit);
    }
  }
  
  defeat(defeat_who);

}

int scenario defeat_check()
{

  int defeated;

  if (is_defeated(2)) {
    defeated++;
  }
  if (is_defeated(3)) {
    defeated++;
  }
  if (is_defeated(5)) {
    defeated++;
  }
  
  if (defeated == 2) {
    return 1;
  }
  else {
    return 0;
  }

}