int conquest sum_tribute( int offerer, int offeree );
void conquest status_check( int who );

conquest
{

  int macedonians = 1;
  int mineans = 2;//wealth - qarnaw - archer
  int sabeans = 3;//archers - mareb - wealth
  int hadhramis = 4;//250 - shabwa - same
  int qattabanians = 5;//tech - timna - same
  int himyarites = 6;//chariots - zafar - sa,e
  
  int diff = get_difficulty();  
  static int cost[];
  static int score_cost[] = [0,0,0,0,0,0,0];
  static int temp_cost[] = [0,0,0,0,0,0,0];
  static int cur_ally;
  static int broken_allies;
  
  int quit_out;
  int ally_array[] = [0,0,0,0,0,0,0];
  
  static int fought[] = [0,0,0,0,0,0,0];
  static int trade[] = [0,0,0,0,0,0,0];    
  int nation;
  int high_score;
  int low_score;
  int temp_score;
  int temp_attitude;
  int tribe;
  int factor;
  static int tribute_amount = 6000;
  int low_nation;
  int high_nation;
  static int players = num_players();
  static int ally_once;
  int peace_cost;
  int ally_cost;

  int building;
  String city_name;
  int who;
  int good_rate;
  int rand;

  String mina_name = find_capital(mineans);
  String saba_name = find_capital(sabeans);
  String had_name = find_capital(hadhramis);
  String qat_name = find_capital(qattabanians);
  String him_name = find_capital(himyarites);

  static int mina_cap = find_city_id(mina_name);
  static int saba_cap = find_city_id(saba_name);
  static int had_cap = find_city_id(had_name);
  static int qat_cap = find_city_id(qat_name);
  static int him_cap = find_city_id("Zafar");

  static int cur_time = time_min();
  static int end_time = get_time_limit();

  static int allied_once;
  static int unit_cost = 30 - diff;

  static int amount[] = [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000];
  static int diplo_wait[] = [0,0, rand_int(1,5), rand_int(3,10-diff), rand_int(5,12 - diff), rand_int(7-diff,20-diff), rand_int(10-diff,30-diff*2)];
  static int diplo_done;
  static int ally_goods;
  static int peace_goods;

  int who_ally;

  run_once {
    if (diff == 1) {
      cost = [0,0,0,0,0,0,0];
    } 
    else if (diff == 2) {
      cost = [0,0,100,100,100,100,100];
    }
    else if (diff == 3) {
      cost = [0,0,200,100,200,100,200];
    }
    else if (diff == 4) {
      cost = [0,0,400,200,300,200,300];
    }
    else if (diff == 5) {
      cost = [0,0,500,300,400,300,400];
    }
    else {
      cost = [0,0,600,400,500,500,400];
    }
    if (diff > 1) {
      set_timer("random_drift", 1);
    }
    enable_trigger("allies");
    set_timer("comp_ally2", rand_int(700-(diff*50), 1000-(diff*20)));
    set_timer("set_attitudes", 120);
    set_timer("status_check", 1);    
    disable_trigger("mina_no_ally");
    disable_trigger("qata_no_ally");
    disable_trigger("saba_no_ally");
    disable_trigger("hadra_no_ally");
    disable_trigger("him_no_ally");
    for (i = num_players(); i > 1; i--) {
      diplomacy_set_wait(i);
    }

    ctw_add_objective_text($S("Hint: Choose an ally. Each nation provides a different bonus. Click on a nation's capital to find out what bonus it provides."), "ally", "");

    for (nation = 2; nation < 7; nation++) {
      if (nation != 6) {
        city_name = find_capital(nation);
        building = find_city_id(city_name);
      } else {
        building = him_cap;
      }
      set_seen(1, nation, building);
    }

  }
  
  trigger (have_alliance(1,2) || have_alliance(1, 3) || have_alliance(1,4) || have_alliance(1,5) || have_alliance(1,6)) {
    objective_complete("ally");
  }

  if (timer_expired("status_check")) {
    set_timer("status_check",1);
    for (a = 1; a < num_players()+1; a++) {
      for (i = 1; i < num_players()+1; i++) {
        if (a == i) {
          i++;
        }
        if (i > num_players()) {
          break;
        }
        if (have_alliance(a,i)) {
          for (t = 1; t < num_players()+1; t++) {
            if (t == a) {
              t++;
            }
            if (t == i) {
              t++;
            }
            if (t == a) {
              t++;
            }
            if (t > num_players()) {
              break;
            }
            if (have_peace(a,t)) {
              if (!have_peace(i,t)) {
                make_peace(i,t);
              }
            }
            else {
              if (have_peace(i,t)) {
                declare_war(i,t);
              }
            }
          }
        }
      }
    }
  }

  if (timer_expired("random_drift")) {
    for (i = 2; i < cost.length; i++) {
      cost[i] += rand_int(diff-2,diff+3);
    }
    set_timer("random_drift", 300);
  }
  
  if (timer_expired("score_adjuster")) {
    high_score = 0;
    low_score = 0;
    for (nation = players; nation > 0; nation--) {
      temp_score = score(nation);
      if (temp_score > high_score) high_score = temp_score;
      else if (temp_score < low_score) low_score = temp_score;
    }
    if (high_score == 1) {
      for (z = 2; z < 5; z++) {
        score_cost[z] = (score(1) - score(z))/(160-diff*10);
      }
      for (z = 5; z < 7; z++) {
        score_cost[z] = -((score(1) - score(z))/(160-diff*10));
      }
    } else if (low_score == 1) {
      for (z = 2; z < 4; z++) {
        score_cost[z] = -((score(1) - score(z))/(160-diff*10));
      }
      for (z = 4; z < 7; z++) {
        score_cost[z] = (score(1) - score(z))/(160-diff*10);
      }
    }
    for (nation = num_players(); nation > 1; nation--) {
      if (fought[nation] == 0) {
        if (have_fought(nation, 1)) {
          fought[nation] = 1;
        }
      }
      if (have_trade(nation, 1)) {
        if (trade[nation] == 0) {
          trade[nation] = 1;
        }
      } else {
        if (trade[nation] == 1) {
          trade[nation] = 0;
        }
      }
    }
  }

  trigger allies() {
    for (nation = players; nation > 1; nation--) {
      if (cur_ally == nation) {
        if (!have_alliance(nation, macedonians)) {
          broken_allies++;
          cur_ally = 0;
        }
        else if (is_defeated(nation)) {
         cur_ally = 0;
        }
      }    
      if (have_alliance(1, nation)) {
        cur_ally = nation;
      }
    }
  } 

  for (nation = players; nation > 1; nation--) {
    for (tribe = players; tribe > 1; tribe--) {
      if (allied_once == 1 && nation == 5) {
        if (offer_made(1, 5)) {
          reject_offer(5,1);
        }
        if (offer_made(1, 4)) {
          reject_offer(4,1);
        }
        nation = 3;
      }
      if (cost[nation] <= 0) {
        cost[nation] = 1;
      }
      temp_attitude = fought[nation] + broken_allies - trade[nation];
      set_timer("diplo", rand_int(50, 250));
      if (offer_made(1, nation)) {
        tribute_amount = sum_tribute(1,nation);
        if (sum_tribute(nation,1) > 0) {
          reject_offer(nation, 1);
        }
        else if (is_offering_peace(1, nation) || diff == 1) {
          temp_attitude += fought[nation];
          peace_cost = cost[nation] + (temp_attitude * (10+diff)) + score_cost[nation] + peace_goods;      
          peace_cost += -peace_cost%100;    
          if (tribute_amount >= peace_cost) {
            accept_offer(nation, 1);
            temp_cost[nation] = 0; 
            set_timer("comp_ally2", rand_int(150-(diff*10),360-(diff*10)));                
          } else {
            make_counter_offer(1, nation, "Food", peace_cost - tribute_amount, $S("We will need a more compelling offer from you."));
            //attitudes[nation]--;
          }
        } 
        else if (is_offering_alliance(1, nation)) {
          temp_attitude += broken_allies - trade[nation];
          ally_cost = (cost[nation] * 2) + (temp_attitude * (13+(diff*2))) + (score_cost[nation] * 2) + ally_goods;
          ally_cost += -ally_cost%100;
          if (tribute_amount >= ally_cost || diff == 1) {
            accept_offer(nation, 1);
            temp_cost[nation] = 0;    
            set_timer("comp_ally2", rand_int(30,300));
            status_check(nation);               
          } else {
            make_counter_offer(1, nation, "Metal", ally_cost - tribute_amount, $S("We will need a more compelling offer from you."));
            //attitudes[nation]--;
          }
        } 
        else {//if (attitudes[nation] > 2) {
          if (have_war(1,nation)) {
            temp_cost[nation] += -tribute_amount;
          }
          else if (have_peace(1,nation)) {
            temp_cost[nation] += -tribute_amount/2;
          }
          accept_offer(nation, 1);
        } 
      }
    }
  }

  if (timer_expired("comp_ally2")) {
    ally_array = [0,0,0,0,0,0,0];
    set_timer("comp_ally", rand_int(600-(diff*50), 900-(diff*20)));
    for (nation = players; nation > 1; nation--) {
      if (ally_array[nation] == 0) {
        for (tribe = players; tribe > 1; tribe--) {
          if (tribe == nation) {
            tribe--;
          }
          if (tribe == 1) {
            break;
          }
          if (have_alliance(nation,tribe)) {
            ally_array[nation] = 1;
            ally_array[tribe] = 1;
          }
        }
      }
    }  
    quit_out = 0;
    for (nation = players; nation > 1; nation--) {
      if (quit_out == 1) {
        break;
      }
      if (ally_array[nation] == 0) {
        for (tribe = players; tribe > 1; tribe--) {
          if (ally_array[tribe] == 0) {
            if (have_peace(nation,tribe)) {
              for (m = 2; m < num_players()+2; m++) {
                if (have_alliance(nation,m)) {
                  break;
                }
                if (m == num_players()+1) {
                  make_alliance(nation,tribe);
                  quit_out = 1;
                }
              }

            }
            else {
              make_peace(nation,tribe);
              quit_out = 1;
            }
          }
        }
      }
    }      
  }

  if (!have_alliance(1,2) && !have_alliance(1,3) && !have_alliance(1,4) && !have_alliance(1,5) && !have_alliance(1,6)) {
  if (object_selected(sabeans, find_city_id(find_capital(sabeans))) && num_objects_selected(macedonians) == 0) {
    bubble_text_obj($S("Ally bonus: Wealth rate +50."), sabeans, saba_cap);
    clear_selection();
  }

  if (object_selected(mineans, find_city_id(find_capital(mineans))) && num_objects_selected(macedonians) == 0) {
    bubble_text_obj($S("Ally bonus: Foot Archers +1 attack and range."), mineans, mina_cap);
    clear_selection();
  }

  if (object_selected(hadhramis, find_city_id(find_capital(hadhramis))) && num_objects_selected(macedonians) == 0) {
    if (allied_once == 0 || have_alliance(macedonians, hadhramis)) bubble_text_obj($S("Ally bonus: +250 of each resource."), hadhramis, had_cap);
    else bubble_text_obj($S("They do not wish to ally with you."), hadhramis, had_cap);
    clear_selection();
  }

  if (object_selected(qattabanians, find_city_id(find_capital(qattabanians))) && num_objects_selected(macedonians) == 0) {
    if (allied_once == 0 || have_alliance(macedonians, qattabanians)) bubble_text_obj($S("Ally bonus: Free Commerce and Civics technology."), qattabanians, qat_cap);
    else bubble_text_obj($S("They do not wish to ally with you."), qattabanians, qat_cap);
    clear_selection();
  }

  if (object_selected(himyarites, find_city_id(find_capital(himyarites))) && num_objects_selected(macedonians) == 0) {
    bubble_text_obj($S("Ally bonus: Allows you to train Chariots."), himyarites, him_cap);
    clear_selection();
  }
  }

  cur_time = time_min();

  if (cur_time >= end_time) defeat(1);

  trigger saba_ally(have_alliance(macedonians, sabeans)) {
    popup_dialog($S("As a token of appreciation for the new alliance, the King of Saba is increasing your Wealth rate by 50."));
    good_rate = get_base_rate(macedonians, "Wealth") + 50;
    set_base_rate(macedonians, "Wealth", good_rate);
    disable_trigger("mina_ally");
    disable_trigger("qata_ally");
    enable_trigger("saba_no_ally");
    disable_trigger("hadra_ally");
    disable_trigger("him_ally");
  }

  trigger mina_ally(have_alliance(macedonians, mineans)) {
    popup_dialog($S("In gratitude of the new alliance, the King of Mina has taught our archers how to gain +1 attack and range."));
    set_object_type_max_range("Archers", 11);
    set_object_type_attack("Archers", 150);
    enable_trigger("mina_no_ally");
    disable_trigger("qata_ally");
    disable_trigger("saba_ally");
    disable_trigger("hadra_ally");
    disable_trigger("him_ally");
  }

  trigger hadra_ally(have_alliance(macedonians, hadhramis) && allied_once == 0) {
    if (allied_once == 0) {
      popup_dialog($S("The King of Hadhramis thanks us for our new alliance by giving us in Tribute 250 of every resource. Do not abuse his charity by breaking the alliance, or you will find it hard to make new friends."));
      allied_once = 1;
    }
    peace_goods = 625;
    ally_goods = 1250;
    give_good(macedonians, "Food", 250);
    print_game_msg($S("The Hadhramis have given us in Tribute 250 Food."));
    give_good(macedonians, "Timber", 250);
    print_game_msg($S("The Hadhramis have given us in Tribute 250 Timber."));
    give_good(macedonians, "Metal", 250);
    print_game_msg($S("The Hadhramis have given us in Tribute 250 Metal."));
    give_good(macedonians, "Wealth", 250);
    print_game_msg($S("The Hadhramis have given us in Tribute 250 Wealth."));
    give_good(macedonians, "Knowledge", 250);
    print_game_msg($S("The Hadhramis have given us in Tribute 250 Knowledge."));
    enable_trigger("hadra_no_ally");
    disable_trigger("qata_ally");
    disable_trigger("saba_ally");
    disable_trigger("hadra_ally");
    disable_trigger("him_ally");
  }

  trigger qata_ally(have_alliance(macedonians, qattabanians) && allied_once == 0) {
    if (allied_once == 0) {
      popup_dialog($S("The King of Qattaban welcomes our new alliance by sharing with us a new Commerce and Civics technology. Do not abuse his charity by breaking the alliance, or you will find it hard to make new friends."));
      allied_once = 1;
    } 
    gain_tech(macedonians, "Commerce");
    gain_tech(macedonians, "Civic");
    enable_trigger("qata_no_ally");
    disable_trigger("qata_ally");
    disable_trigger("saba_ally");
    disable_trigger("hadra_ally");
    disable_trigger("him_ally");
  }

  trigger him_ally(have_alliance(macedonians, himyarites)) {
    popup_dialog($S("The King of Himyarites is grateful for your friendship. He will allow us to train Chariots at our Stables (with appropriate Military technology)."));
    enable_type_by_tribe("Chariot", "Greeks", "Stable", 0, 3);
    enable_trigger("him_no_ally");
    disable_trigger("qata_ally");
    disable_trigger("saba_ally");
    disable_trigger("hadra_ally");
    disable_trigger("him_ally");
  }

  trigger mina_no_ally(!have_alliance(macedonians, mineans)) {
    popup_dialog($S("The King of Mina will no longer teach our archers how to gain 25% health."));  
    set_object_type_max_range("Archers", 10);
    set_object_type_attack("Archers", 140);
    enable_trigger("mina_ally");
    enable_trigger("saba_ally");
    enable_trigger("hadra_ally");
    enable_trigger("qata_ally");  
    enable_trigger("him_ally");
  }

  trigger saba_no_ally(!have_alliance(macedonians, sabeans)) {
    popup_dialog($S("The King of Saba will no longer send you his Wealth"));
    //good_rate = get_base_rate(macedonians, "Wealth") - 50;
    set_base_rate(macedonians, "Wealth", 0);
    enable_trigger("mina_ally");
    enable_trigger("saba_ally");
    enable_trigger("hadra_ally");
    enable_trigger("qata_ally");  
    enable_trigger("him_ally");
  }

  trigger hadra_no_ally(!have_alliance(macedonians, hadhramis)) {
    enable_trigger("mina_ally");
    enable_trigger("saba_ally");
    enable_trigger("hadra_ally");
    enable_trigger("qata_ally");  
    enable_trigger("him_ally");
  }

  trigger qata_no_ally(!have_alliance(macedonians, qattabanians)) {
    enable_trigger("mina_ally");
    enable_trigger("saba_ally");
    enable_trigger("hadra_ally");
    enable_trigger("qata_ally");  
    enable_trigger("him_ally"); 
  }

  trigger him_no_ally(!have_alliance(macedonians, himyarites)) {
    popup_dialog($S("The King of Himyarites will no longer be allowing us to train Chariots."));
    disable_type_by_tribe("Chariot", "Greeks");
    enable_trigger("mina_ally");
    enable_trigger("saba_ally");
    enable_trigger("hadra_ally");
    enable_trigger("qata_ally");  
    enable_trigger("him_ally");
  }

  if (!pop_cap_warning(mineans)) {
    for (n = num_military_buildings(mineans); n > 0; n--) {
      building = find_military_build(mineans);
      if (num_type_queued(mineans, building, "") > 0) {
        unit = num_type_queued(mineans, building, "");
        clear_build_queue(mineans, building, 0);
        x = object_position_x(mineans, building) + 2;
        y = object_position_y(mineans, building);
        if (time_sec()%2 == 0) {
          create_unit(mineans, x, y, "Kushite Archers", unit);
          take_good(mineans, "Wealth", unit_cost);
          take_good(mineans, "Timber", unit_cost);
        } else {
          create_unit(mineans, x, y, "Camel Archer", unit);
          take_good(mineans, "Wealth", unit_cost);
          take_good(mineans, "Timber", unit_cost);
        }
      }
    }
  }

  if (!pop_cap_warning(sabeans)) {
    for (n = num_military_buildings(sabeans); n > 0; n--) {
      building = find_military_build(sabeans);
      if (num_type_queued(sabeans, building, "") > 0) {
        unit = num_type_queued(sabeans, building, "");
        clear_build_queue(sabeans, building, 0);
        x = object_position_x(sabeans, building) + 2;
        y = object_position_y(sabeans, building);
        if (time_sec()%2 == 0) {
          create_unit(sabeans, x, y, "Hoplites", unit);
          take_good(mineans, "Metal", unit_cost);
          take_good(mineans, "Food", unit_cost);
        } else {
          create_unit(sabeans, x, y, "Cataphract", unit);
          take_good(mineans, "Wealth", unit_cost);
          take_good(mineans, "Metal", unit_cost);
        }
      }
    }
  }

  if (!pop_cap_warning(hadhramis)) {
    for (n = num_military_buildings(hadhramis); n > 0; n--) {
      building = find_military_build(hadhramis);
      if (num_type_queued(hadhramis, building, "") > 0) {
        unit = num_type_queued(hadhramis, building, "");
        clear_build_queue(hadhramis, building, 0);
        x = object_position_x(hadhramis, building) + 2;
        y = object_position_y(hadhramis, building);
        if (time_sec()%2 == 0) {
          create_unit(hadhramis, x, y, "Javelineers", unit);
          take_good(mineans, "Food", unit_cost);
          take_good(mineans, "Timber", unit_cost);
        } else {
          create_unit(hadhramis, x, y, "Light Camel", unit);
          take_good(mineans, "Food", unit_cost);
          take_good(mineans, "Timber", unit_cost);
        }
      }
    }
  }

  if (!pop_cap_warning(qattabanians)) {
    for (n = num_military_buildings(qattabanians); n > 0; n--) {
      building = find_military_build(qattabanians);
      if (num_type_queued(qattabanians, building, "") > 0) {
        unit = num_type_queued(qattabanians, building, "");
        clear_build_queue(qattabanians, building, 0);
        x = object_position_x(qattabanians, building) + 2;
        y = object_position_y(qattabanians, building);
        if (time_sec()%2 == 0) {
          create_unit(qattabanians, x, y, "War Elephant", unit);
          take_good(mineans, "Wealth", unit_cost);
          take_good(mineans, "Food", unit_cost);
        } else {
          create_unit(qattabanians, x, y, "Yangombi Umpakati", unit);
          take_good(mineans, "Food", unit_cost);
          take_good(mineans, "Timber", unit_cost);
        }
      }
    }
  }

  if (!pop_cap_warning(himyarites)) {
    for (n = num_military_buildings(himyarites); n > 0; n--) {
      building = find_military_build(himyarites);
      if (num_type_queued(himyarites, building, "") > 0) {
        unit = num_type_queued(himyarites, building, "");
        clear_build_queue(himyarites, building, 0);
        x = object_position_x(himyarites, building) + 2;
        y = object_position_y(himyarites, building);
        if (time_sec()%2 == 0) {
          create_unit(himyarites, x, y, "Chariot", unit);
          take_good(mineans, "Wealth", unit_cost);
          take_good(mineans, "Timber", unit_cost);
        } else {
          create_unit(himyarites, x, y, "Archers", unit);
          take_good(mineans, "Wealth", unit_cost);
          take_good(mineans, "Timber", unit_cost);
        }
      }
    }
  }


}


int conquest sum_tribute( int offerer, int offeree )
{
  int total;
  String resources[] = ["Food", "Wealth", "Metal", "Timber"];

  for (z = 0; z < resources.length; z++) {
    total += amount_offered(offerer,offeree,resources[z]);
  }

  return total;

}

void conquest status_check( int who )
{

  int macedonians = 1;
  int nation;
  
  for (nation = num_players(); nation > 1; nation--) {
    if (nation == who) {
      nation--;;
    }
    if (nation == 1) {
      break;
    }
    if (have_peace(macedonians, nation)) {
      make_peace(who, nation);
    }
    else if (have_war(macedonians, nation)) {
      declare_war(who, nation);
    }
  }

}