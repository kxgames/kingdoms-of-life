  scenario
{

labels {
  //Add any constant labels here in a comma separated list.
}

static alexander_id = 0;
static diff = get_difficulty();

static int ally = 0;
static int x = 0;
static int y = 0;
static int popcap = 0;
static int dead_men = 0;
static int companion_health = 0;

run_once {
  disable_all_triggers();
  
  alexander_id = find_unit(1, "General");

  unit_id = find_unit(1, "Companion");
  companion_health = object_max_health(1, unit_id);

  city_id = find_city_id("Apollonia");
  x = object_position_x(1, city_id);
  y = object_position_y(1, city_id);

  city_id = find_city_id("Taras");
  set_seen(1, 2, city_id);
  city_id = find_city_id("Metapontion");
  set_seen(1, 3, city_id);
  city_id = find_city_id("Herakleia");
  set_seen(1, 4, city_id);
  city_id = find_city_id("Syrus");
  set_seen(1, 5, city_id);
  city_id = find_city_id("Kroton");
  set_seen(1, 6, city_id);
  city_id = find_city_id("Pandosia");
  set_seen(1, 7, city_id);
  city_id = find_city_id("Lokroi");
  set_seen(1, 8, city_id);

  enable_trigger("Taras_Alliance");
  enable_trigger("Metapontion_Alliance");
  enable_trigger("Herakleia_Alliance");
  enable_trigger("Syrus_Alliance");
  enable_trigger("Kroton_Alliance");
  enable_trigger("Pandosia_Alliance");
  enable_trigger("Lokroi_Alliance");

  diplomacy_set_wait(2);
  diplomacy_set_wait(3);
  diplomacy_set_wait(4);
  diplomacy_set_wait(5);
  diplomacy_set_wait(6);
  diplomacy_set_wait(7);
  diplomacy_set_wait(8);

  enable_trigger("Diplo");
  enable_trigger("PreDiplo");

  enable_trigger("TarasUnitSwap");
  enable_trigger("MetapontionUnitSwap");
  enable_trigger("HerakleiaUnitSwap");
  enable_trigger("SyrusUnitSwap");
  enable_trigger("KrotonUnitSwap");
  enable_trigger("LokroiUnitSwap");
  enable_trigger("PandosiaUnitSwap");

  enable_trigger("Federation");
  enable_trigger("TarasDefeat");
  enable_trigger("MetapontionDefeat");
  enable_trigger("HerakleiaDefeat");
  enable_trigger("SyrusDefeat");
  enable_trigger("KrotonDefeat");
  enable_trigger("LokroiDefeat");
  enable_trigger("PandosiaDefeat");
  enable_trigger("AllyPowers");

  ctw_add_objective($S("Hint: Choose an Ally. Each nation provides a different bonus. Click on their capital to see what bonus they will provide."), "Ally_id", "");
}

/////////////////////////////////////////////

trigger Taras_Alliance(have_alliance(1, 2))
{
  if (ally != 2) {
    popup_dialog($S("Taras has agreed to pay you a small tribute. You have gained a +45 gather rate for all resources."));
    yo = get_base_rate(1, "Food");
    set_base_rate(1, "Food", yo+45);

    yo = get_base_rate(1, "Timber");
    set_base_rate(1, "Timber", yo+45);

    yo = get_base_rate(1, "Metal");
    set_base_rate(1, "Metal", yo+45);

    yo = get_base_rate(1, "Wealth");
    set_base_rate(1, "Wealth", yo+45);
    ally = 2;
  }
  enable_trigger("No_Taras_For_You");
}

trigger No_Taras_For_You(!have_alliance(1, 2))
{
  yo = get_base_rate(1, "Food");
  set_base_rate(1, "Food", yo-45);

  yo = get_base_rate(1, "Timber");
  set_base_rate(1, "Timber", yo-45);

  yo = get_base_rate(1, "Metal");
  set_base_rate(1, "Metal", yo-45);

  yo = get_base_rate(1, "Wealth");
  set_base_rate(1, "Wealth", yo-45);

  ally = 0;

  enable_trigger("Taras_Alliance");
}

/////////////////////////////////////////////

trigger Metapontion_Alliance(have_alliance(1, 3))
{
  if (ally != 3) {
    popup_dialog($S("Metapontion has agreed to lend you some lodging space. Your population capacity has increased by 50."));
    popcap = population_cap(1);
    set_population_cap(1, popcap+50);
    ally = 3;
  }
  enable_trigger("No_Metapontion_For_You");
  enable_trigger("Pop_Check");
}

trigger Pop_Check()
{
  if (have_tech(1, "Selective Service")) {
    set_population_cap(1, 250);
  }
  else if (have_tech(1, "Nation-in-Arms")) {
    set_population_cap(1, 225);
  }
  else if (have_tech(1, "Levee en Masse")) {
    set_population_cap(1, 200);
  }
  else if (have_tech(1, "Conscription")) {
    set_population_cap(1, 175);
  }
  else if (have_tech(1, "Standing Army")) {
    set_population_cap(1, 150);
  }
  else if (have_tech(1, "Mercenaries")) {
    set_population_cap(1, 125);
  }
  else if (have_tech(1, "The Art of War")) {
    set_population_cap(1, 100);
  }
  enable_trigger("Pop_Check");
}

trigger No_Metapontion_For_You(!have_alliance(1, 3))
{
  popcap = population_cap(1);
  set_population_cap(1, popcap-50);
  ally = 0;
  enable_trigger("Metapontion_Alliance");
  disable_trigger("Pop_Check");
}

/////////////////////////////////////////////

trigger Herakleia_Alliance(have_alliance(1, 4))
{
  if (ally != 4) {
    popup_dialog($S("Herakleia has agreed to share their technology plans with you. You have gained a level of research in all categories."));
    gain_tech(1, "Military");
    gain_tech(1, "Civic");
    gain_tech(1, "Commerce");
    gain_tech(1, "Science");
    ally = 4;
  }
  enable_trigger("No_Herakleia_For_You");
}

trigger No_Herakleia_For_You(!have_alliance(1, 4))
{
  lose_tech(1, "Military");
  lose_tech(1, "Civic");
  lose_tech(1, "Commerce");
  lose_tech(1, "Science");

  ally = 0;
  
  enable_trigger("Herakleia_Alliance");
}

/////////////////////////////////////////////

trigger Syrus_Alliance(have_alliance(1, 5))
{
  //give +100 to the resource caps
  if (ally != 5) {
    ally = 5;
    popup_dialog($S("Syrus allows you to make use of their storage facilities, increasing your resource capacities by 100."));
    set_bonus_cap(1, "Food", 100);
    set_bonus_cap(1, "Timber", 100);
    set_bonus_cap(1, "Metal", 100);
    set_bonus_cap(1, "Wealth", 100);
  }
  enable_trigger("No_Syrus_For_You");
}

trigger No_Syrus_For_You(!have_alliance(1, 5))
{
  ally = 0;
  set_bonus_cap(1, "Food", 0);
  set_bonus_cap(1, "Timber", 0);
  set_bonus_cap(1, "Metal", 0);
  set_bonus_cap(1, "Wealth", 0);
  enable_trigger("Syrus_Alliance");
}

/////////////////////////////////////////////

trigger Kroton_Alliance(have_alliance(1, 6))
{
  if (ally != 6) {
  //free barracks unit for every one that is produced
    popup_dialog($S("Kroton sends you military advisors, they will train an extra Barracks unit for every unit you train."));
    enable_trigger("Buy_One_Get_One_Free");
    ally = 6;
  }
  enable_trigger("No_Kroton_For_You");
}

trigger Buy_One_Get_One_Free()
{
  built_id = get_last_type_built(1, "Phalanx");
  if (built_id > -1) {
    clear_group(1);
    x = object_position_x(1, built_id);
    y = object_position_y(1, built_id);
    create_unit_in_group(1, x, y, "Phalanx", 1);
    group_guard_order(1, 1, built_id);
  }

  built_id = get_last_type_built(1, "Javelineers");
  if (built_id > -1) {
    clear_group(1);
    x = object_position_x(1, built_id);
    y = object_position_y(1, built_id);
    create_unit_in_group(1, x, y, "Javelineers", 1);
    group_guard_order(1, 1, built_id);
  }

  built_id = get_last_type_built(1, "Archers");
  if (built_id > -1) {
    clear_group(1);
    x = object_position_x(1, built_id);
    y = object_position_y(1, built_id);
    create_unit_in_group(1, x, y, "Archers", 1);
    group_guard_order(1, 1, built_id);
  }

  enable_trigger("Buy_One_Get_One_Free");
}

trigger No_Kroton_For_You(!have_alliance(1, 6))
{
  ally = 0;
  disable_trigger("Buy_One_Get_One_Free");
  
  enable_trigger("Kroton_Alliance");
}

/////////////////////////////////////////////

trigger Pandosia_Alliance(have_alliance(1, 7))
{
  if (ally != 7) {
    //doubles the hitpoints of companions
    popup_dialog($S("The High Priest of Poseidon in Pandosia has blessed your Royal Guard. Your Companions can take much greater damage in battle."));
    set_object_type_max_health("Companion", companion_health*2);
    ally = 7;
  }
  enable_trigger("No_Pandosia_For_You");
}

trigger No_Pandosia_For_You(!have_alliance(1, 7))
{
  ally = 0;
  set_object_type_max_health("Companion", companion_health);
  enable_trigger("Pandosia_Alliance");
}

/////////////////////////////////////////////

trigger Lokroi_Alliance(have_alliance(1, 8))
{
  if (ally != 8) {
    popup_dialog($S("The healers of Lokroi have shared a secret treatment for wounded horses with you. Your Cavalry can now heal in the field."));
    enable_trigger("Heal_Cav");
    set_timer("HC", 10);
    ally = 8;
  }
  enable_trigger("No_Lokroi_For_You");
}

trigger Heal_Cav(timer_expired("HC"))
{
  for (i = 0; i < num_type_upgrade(1, "Light Horse"); i++) {
    unit_id = find_unit(1, "Light Horse");
    if (object_health(1, unit_id) < 100) {
      heal_object(1, unit_id, 2);
    }
  }
  for (i = 0; i < num_type_upgrade(1, "Companion"); i++) {
    unit_id = find_unit(1, "Companion");
    if (object_health(1, unit_id) < 100) {
      heal_object(1, unit_id, 2);
    }
  }
  for (i = 0; i < num_type_upgrade(1, "Horse Archer"); i++) {
    unit_id = find_unit(1, "Horse Archer");
    if (object_health(1, unit_id) < 100) {
      heal_object(1, unit_id, 2);
    }
  }
  enable_trigger("Heal_Cav");
  set_timer("HC", 2);
}

trigger No_Lokroi_For_You(!have_alliance(1, 8))
{
  ally = 0;
  disable_trigger("Heal_Cav");
  
  enable_trigger("Lokroi_Alliance");
}

/////////////////////////////////////////////
trigger Diplo(have_alliance(1, 2) || have_alliance(1, 3) || have_alliance(1, 4) || have_alliance(1, 5) || have_alliance(1, 6) || have_alliance(1, 7) || have_alliance(1, 8))
{
  ctw_objective_complete("Ally_id");
  diplomacy_set_auto(2);
  diplomacy_set_auto(3);
  diplomacy_set_auto(4);
  diplomacy_set_auto(5);
  diplomacy_set_auto(6);
  diplomacy_set_auto(7);
  diplomacy_set_auto(8);
  disable_trigger("PreDiplo");
  ctw_add_objective_text($S("Use diplomacy combined with force to conquer the peninsula."), "CA_id", "");
}

trigger PreDiplo()
{
  if (is_offering_alliance(1, 2)) {
    diplomacy_set_auto(2);
  }
  else {
    diplomacy_set_wait(2);
  }

  if (is_offering_alliance(1, 3)) {
    diplomacy_set_auto(3);
  }
  else {
    diplomacy_set_wait(3);
  }

  if (is_offering_alliance(1, 4)) {
    diplomacy_set_auto(4);
  }
  else {
    diplomacy_set_wait(4);
  }

  if (is_offering_alliance(1, 5)) {
    diplomacy_set_auto(5);
  }
  else {
    diplomacy_set_wait(5);
  }

  if (is_offering_alliance(1, 6)) {
    diplomacy_set_auto(6);
  }
  else {
    diplomacy_set_wait(6);
  }

  if (is_offering_alliance(1, 7)) {
    diplomacy_set_auto(7);
  }
  else {
    diplomacy_set_wait(7);
  }

  if (is_offering_alliance(1, 8)) {
    diplomacy_set_auto(8);
  }
  else {
    diplomacy_set_wait(8);
  }

  enable_trigger("PreDiplo");
}

trigger TarasUnitSwap()
{
  built_id = get_last_type_built(2, "Phalanx");
  if (built_id > -1) {
    x = object_position_x(2, built_id);
    y = object_position_y(2, built_id);
    kill_unit_anim(2, built_id, 1);
    create_unit_upgrade(2, x, y, "Javelineers", 1);
  }

  built_id = get_last_type_built(2, "Archers");
  if (built_id > -1) {
    x = object_position_x(2, built_id);
    y = object_position_y(2, built_id);
    kill_unit_anim(2, built_id, 1);
    create_unit_upgrade(2, x, y, "Javelineers", 1);
  }

  built_id = get_last_type_built(2, "Horse Archer");
  if (built_id > -1) {
    x = object_position_x(2, built_id);
    y = object_position_y(2, built_id);
    kill_unit_anim(2, built_id, 1);
    create_unit_upgrade(2, x, y, "Light Horse", 1);
  }

  built_id = get_last_type_built(2, "Cataphract");
  if (built_id > -1) {
    x = object_position_x(2, built_id);
    y = object_position_y(2, built_id);
    kill_unit_anim(2, built_id, 1);
    create_unit_upgrade(2, x, y, "Light Horse", 1);
  }
  enable_trigger("TarasUnitSwap");
}

trigger MetapontionUnitSwap()
{
  built_id = get_last_type_built(3, "Phalanx");
  if (built_id > -1) {
    x = object_position_x(3, built_id);
    y = object_position_y(3, built_id);
    kill_unit_anim(3, built_id, 1);
    create_unit_upgrade(3, x, y, "Archers", 1);
  }

  built_id = get_last_type_built(3, "Javelineers");
  if (built_id > -1) {
    x = object_position_x(3, built_id);
    y = object_position_y(3, built_id);
    kill_unit_anim(3, built_id, 1);
    create_unit_upgrade(3, x, y, "Archers", 1);
  }

  built_id = get_last_type_built(3, "Light Horse");
  if (built_id > -1) {
    x = object_position_x(3, built_id);
    y = object_position_y(3, built_id);
    kill_unit_anim(3, built_id, 1);
    create_unit_upgrade(3, x, y, "Horse Archer", 1);
  }

  built_id = get_last_type_built(3, "Cataphract");
  if (built_id > -1) {
    x = object_position_x(3, built_id);
    y = object_position_y(3, built_id);
    kill_unit_anim(3, built_id, 1);
    create_unit_upgrade(3, x, y, "Horse Archer", 1);
  }
  enable_trigger("MetapontionUnitSwap");
}

trigger HerakleiaUnitSwap()
{
  built_id = get_last_type_built(4, "Archers");
  if (built_id > -1) {
    x = object_position_x(4, built_id);
    y = object_position_y(4, built_id);
    kill_unit_anim(4, built_id, 1);
    create_unit_upgrade(4, x, y, "Phalanx", 1);
  }

  built_id = get_last_type_built(4, "Javelineers");
  if (built_id > -1) {
    x = object_position_x(4, built_id);
    y = object_position_y(4, built_id);
    kill_unit_anim(4, built_id, 1);
    create_unit_upgrade(4, x, y, "Phalanx", 1);
  }

  built_id = get_last_type_built(4, "Light Horse");
  if (built_id > -1) {
    x = object_position_x(4, built_id);
    y = object_position_y(4, built_id);
    kill_unit_anim(4, built_id, 1);
    create_unit_upgrade(4, x, y, "Cataphract", 1);
  }

  built_id = get_last_type_built(4, "Horse Archer");
  if (built_id > -1) {
    x = object_position_x(4, built_id);
    y = object_position_y(4, built_id);
    kill_unit_anim(4, built_id, 1);
    create_unit_upgrade(4, x, y, "Cataphract", 1);
  }
  enable_trigger("HerakleiaUnitSwap");
}

trigger SyrusUnitSwap()
{
  built_id = get_last_type_built(5, "Phalanx");
  if (built_id > -1) {
    x = object_position_x(5, built_id);
    y = object_position_y(5, built_id);
    kill_unit_anim(5, built_id, 1);
    create_unit_upgrade(5, x, y, "Archers", 1);
  }

  built_id = get_last_type_built(5, "Javelineers");
  if (built_id > -1) {
    x = object_position_x(5, built_id);
    y = object_position_y(5, built_id);
    kill_unit_anim(5, built_id, 1);
    create_unit_upgrade(5, x, y, "Archers", 1);
  }

  built_id = get_last_type_built(5, "Cataphract");
  if (built_id > -1) {
    x = object_position_x(5, built_id);
    y = object_position_y(5, built_id);
    kill_unit_anim(5, built_id, 1);
    create_unit_upgrade(5, x, y, "Light Horse", 1);
  }

  built_id = get_last_type_built(5, "Horse Archer");
  if (built_id > -1) {
    x = object_position_x(5, built_id);
    y = object_position_y(5, built_id);
    kill_unit_anim(5, built_id, 1);
    create_unit_upgrade(5, x, y, "Light Horse", 1);
  }
  enable_trigger("SyrusUnitSwap");
}

trigger KrotonUnitSwap()
{
  built_id = get_last_type_built(6, "Archers");
  if (built_id > -1) {
    x = object_position_x(6, built_id);
    y = object_position_y(6, built_id);
    kill_unit_anim(6, built_id, 1);
    create_unit_upgrade(6, x, y, "Phalanx", 1);
  }

  built_id = get_last_type_built(6, "Javelineers");
  if (built_id > -1) {
    x = object_position_x(6, built_id);
    y = object_position_y(6, built_id);
    kill_unit_anim(6, built_id, 1);
    create_unit_upgrade(6, x, y, "Phalanx", 1);
  }

  built_id = get_last_type_built(6, "Cataphract");
  if (built_id > -1) {
    x = object_position_x(6, built_id);
    y = object_position_y(6, built_id);
    kill_unit_anim(6, built_id, 1);
    create_unit_upgrade(6, x, y, "Horse Archer", 1);
  }

  built_id = get_last_type_built(6, "Light Horse");
  if (built_id > -1) {
    x = object_position_x(6, built_id);
    y = object_position_y(6, built_id);
    kill_unit_anim(6, built_id, 1);
    create_unit_upgrade(6, x, y, "Horse Archer", 1);
  }
  enable_trigger("KrotonUnitSwap");
}

trigger LokroiUnitSwap()
{
  built_id = get_last_type_built(7, "Archers");
  if (built_id > -1) {
    x = object_position_x(7, built_id);
    y = object_position_y(7, built_id);
    kill_unit_anim(7, built_id, 1);
    create_unit_upgrade(7, x, y, "Javelineers", 1);
  }

  built_id = get_last_type_built(7, "Phalanx");
  if (built_id > -1) {
    x = object_position_x(7, built_id);
    y = object_position_y(7, built_id);
    kill_unit_anim(7, built_id, 1);
    create_unit_upgrade(7, x, y, "Javelineers", 1);
  }

  built_id = get_last_type_built(7, "Horse Archer");
  if (built_id > -1) {
    x = object_position_x(7, built_id);
    y = object_position_y(7, built_id);
    kill_unit_anim(7, built_id, 1);
    create_unit_upgrade(7, x, y, "Cataphract", 1);
  }

  built_id = get_last_type_built(7, "Light Horse");
  if (built_id > -1) {
    x = object_position_x(7, built_id);
    y = object_position_y(7, built_id);
    kill_unit_anim(7, built_id, 1);
    create_unit_upgrade(7, x, y, "Cataphract", 1);
  }
  enable_trigger("LokroiUnitSwap");
}

trigger PandosiaUnitSwap()
{
  built_id = get_last_type_built(8, "Javelineers");
  if (built_id > -1) {
    x = object_position_x(8, built_id);
    y = object_position_y(8, built_id);
    kill_unit_anim(8, built_id, 1);
    create_unit_upgrade(8, x, y, "Archers", 1);
  }

  built_id = get_last_type_built(8, "Phalanx");
  if (built_id > -1) {
    x = object_position_x(8, built_id);
    y = object_position_y(8, built_id);
    kill_unit_anim(8, built_id, 1);
    create_unit_upgrade(8, x, y, "Archers", 1);
  }

  built_id = get_last_type_built(8, "Horse Archer");
  if (built_id > -1) {
    x = object_position_x(8, built_id);
    y = object_position_y(8, built_id);
    kill_unit_anim(8, built_id, 1);
    create_unit_upgrade(8, x, y, "Cataphract", 1);
  }

  built_id = get_last_type_built(8, "Light Horse");
  if (built_id > -1) {
    x = object_position_x(8, built_id);
    y = object_position_y(8, built_id);
    kill_unit_anim(8, built_id, 1);
    create_unit_upgrade(8, x, y, "Cataphract", 1);
  }
  enable_trigger("PandosiaUnitSwap");
}

trigger Federation(dead_men > 2)
{
  int new_team = 0;
  int cur_team = 0;
  int ally_guy = 0;
  string fed_team = "None";
  int unit_id = 0;
  int build_id = 0;

  //fixing problems with guys who are garrisoned
  int hidden; 



  if (have_alliance(1, 2)) {
    ally_guy = 2;
  }
  else if (have_alliance(1, 3)) {
    ally_guy = 3;
  }
  else if (have_alliance(1, 4)) {
    ally_guy = 4;
  }
  else if (have_alliance(1, 5)) {
    ally_guy = 5;
  }
  else if (have_alliance(1, 6)) {
    ally_guy = 6;
  }
  else if (have_alliance(1, 7)) {
    ally_guy = 7;
  }
  else if (have_alliance(1, 8)) {
    ally_guy = 8;
  }  

  if (!is_defeated(8) && ally_guy != 8) {
    new_team = 8;
    new_capital = find_capital(8);
  }
  else if (!is_defeated(7) && ally_guy != 7) {
    new_team = 7;
    new_capital = find_capital(7);
  }
  else if (!is_defeated(6) && ally_guy != 6) {
    new_team = 6;
    new_capital = find_capital(6);
  }
  else if (!is_defeated(5) && ally_guy != 5) {
    new_team = 5;
    new_capital = find_capital(5);
  }
  else if (!is_defeated(4) && ally_guy != 4) {
    new_team = 4;
    new_capital = find_capital(4);
  }
  else if (!is_defeated(3) && ally_guy != 3) {
    new_team = 3;
    new_capital = find_capital(3);
  }
  else if (!is_defeated(2) && ally_guy != 2) {
    new_team = 2;
    new_capital = find_capital(2);
  }

  fed_name = get_leader_name(new_team);  
  popup_dialog(parse("The remaining city states have decided they cannot defeat you alone. They have banded together to form the League of $s0.", fed_name));
  declare_war(1, new_team);

  for(cur_team = 2; cur_team < 8; cur_team++) {
    //probs switching stuff that has units inside
    hidden = find_inside_unit(cur_team, "");
    while (hidden > -1) {
      kill_unit_anim(cur_team, hidden, 1);
      hidden = find_inside_unit(cur_team, "");
    }  
    if (cur_team != ally_guy && !is_defeated(cur_team) && cur_team != new_team) {
      //////civilian/////////
      do {
        unit_id = find_all_unit(cur_team, "Citizen");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Scholar");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Caravan");
        if (is_on_transport(cur_team, unit_id)) {
          kill_unit_anim(cur_team, unit_id,2);
        }
        else {
          switch_teams(new_team, cur_team, unit_id);
        }
      } while(unit_id > -1);

      do {
        unit_id = find_all_unit(cur_team, "Merchant");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      //////////Castle/Special
      /*do {
        unit_id = find_all_unit(cur_team, "General");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);*/
      do {
        unit_id = find_all_unit(cur_team, "Transport");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Merchant Fleet");
        kill_unit_anim(cur_team, unit_id, 2);
      } while(unit_id > -1);
      ///////////////////////////

      ///////barracks////////////
      do {
        unit_id = find_all_unit(cur_team, "Javelineers");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Phalanx");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Archers");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Scout");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      ///////////Stable/////////
      do {
        unit_id = find_all_unit(cur_team, "Light Horse");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Cataphract");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Horse Archer");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      //////////////////////////

      /////////Siege//////////
      do {
        unit_id = find_all_unit(cur_team, "Catapult");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Supply Wagon");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      /////////////////////

      ///////Dock////////////
      do {
        unit_id = find_all_unit(cur_team, "Dromon");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Galley");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Fire Raft");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      do {
        unit_id = find_all_unit(cur_team, "Fishermen");
        switch_teams(new_team, cur_team, unit_id);
      } while(unit_id > -1);
      ///////////////////////////

      ////tower, fort, observation post/////
      do {
        build_id = find_build(cur_team, "Tower");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Fort");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Lookout");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      ////barracks, stable, siege factory, dock/////////
      do {
        build_id = find_build(cur_team, "Barracks");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Stable");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Siege Factory");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Dock");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      /////woodcutter's camp, mine///////////
      do {
        build_id = find_build(cur_team, "Woodcutter's Camp");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);
      do {
        build_id = find_build(cur_team, "Mine");
        switch_teams(new_team, cur_team, build_id);
      } while(build_id > -1);

      ///////City////////////
      number_of_cities = num_cities(cur_team);
      for (i = 1; i <= number_of_cities; i++) {
        city_name = find_city_name(cur_team);
        city_id = find_city_id(city_name);
        switch_teams(new_team, cur_team, city_id);
        city_assimilate(new_team, city_name);
        city_id = find_city_id(city_name);
        set_object_health (new_team, city_id, 100);
      }
      ///////////////////////////
    }
  }

  while (num_type_upgrade(new_team, "Citizen") > 75) {
    unit_id = find_unit(new_team, "Citizen");
    kill_unit_anim(new_team, unit_id, 1);
  }

  while (num_type_upgrade(new_team, "Fishermen") > 10) {
    unit_id = find_unit(new_team, "Fishermen");
    kill_unit_anim(new_team, unit_id, 1);
  }

  diplomacy_set_wait(new_team);
}

trigger TarasDefeat(is_defeated(2))
{
  dead_men++;
}

trigger MetapontionDefeat(is_defeated(3))
{
  dead_men++;
}
trigger HerakleiaDefeat(is_defeated(4))
{
  dead_men++;
}
trigger SyrusDefeat(is_defeated(5))
{
  dead_men++;
}
trigger KrotonDefeat(is_defeated(6))
{
  dead_men++;
}
trigger LokroiDefeat(is_defeated(7))
{
  dead_men++;
}
trigger PandosiaDefeat(is_defeated(8))
{
  dead_men++;
}

trigger AllyPowers(!have_alliance(1, 2) && !have_alliance(1, 3) && !have_alliance(1, 4) && !have_alliance(1, 5) && !have_alliance(1, 6) && !have_alliance(1, 7) && !have_alliance(1, 8))
{
  //taras
  city_id = find_city_id(find_capital(2));
  if (object_selected(2, city_id)) {
    bubble_text_obj($S("An alliance with Taras will increase your gather rate for each resource."), 2, city_id);
    clear_selection();
  }

  //metapontion
  city_id = find_city_id(find_capital(3));
  if (object_selected(3, city_id)) {
    bubble_text_obj($S("An alliance with Metapontion will increase your population capacity."), 3, city_id);
    clear_selection();
  }

  //herakleia
  city_id = find_city_id(find_capital(4));
  if (object_selected(4, city_id)) {
    bubble_text_obj($S("An alliance with Herakleia will give you an extra level of research in each branch."), 4, city_id);
    clear_selection();
  }

  //syrus
  city_id = find_city_id(find_capital(5));
  if (object_selected(5, city_id)) {
    bubble_text_obj($S("An alliance with Syrus will increase your Commerce capacity for each resource."), 5, city_id);
    clear_selection();
  }

  //kroton
  city_id = find_city_id(find_capital(6));
  if (object_selected(6, city_id)) {
    bubble_text_obj($S("An alliance with Kroton will give you an extra unit for every unit you train at a Barracks."), 6, city_id);
    clear_selection();
  }

  //lokroi
  city_id = find_city_id(find_capital(8));
  if (object_selected(8, city_id)) {
    bubble_text_obj($S("An alliance with Lokroi will give your Cavalry the ability to heal in the field."), 8, city_id);
    clear_selection();
  }

  //pandosia
  city_id = find_city_id(find_capital(7));
  if (object_selected(7, city_id)) {
    bubble_text_obj($S("An alliance with Pandosia will give your Companions more hit points."), 7, city_id);
    clear_selection();
  }
  enable_trigger("AllyPowers");
}

if(time() >= get_time_limit()) {
  defeat(1);
}

}