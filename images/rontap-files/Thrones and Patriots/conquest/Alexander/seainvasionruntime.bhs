//offensive tactics scenario runtime

conquest
{
  labels {
    ATTACKER,
    DEFENDER,
  }

  static int wave_time = 5;
  static int wave_size = 3;
  static int attack_start_x;
  static int attack_start_y;
  static int map_size = get_map_size();
  int unit_id;
  int build_id;
  int hoplites_id;
  int hoplites_x;
  int hoplites_y;
  int attack_who;

  static int count_time;
  static capital_id = 0;
  static int diff;
  static String capital_name;
  static int city_two_id = 0;
  static String city_two;
  static int loc_x;
  static int loc_y;
  int unit;
  int your_unit;
  int y;
  int x;
  static int x_diff;
  static int y_diff;
  static int unit_x;
  static int unit_y;
  static int x_check;
  static int y_check;
  static int x_distance_absl;
  static int y_distance_absl;
  static int x_distance;
  static int y_distance;
  static int building_x;
  static int building_y;
  static int x_check_absl = 0;
  static int y_check_absl = 0;
  static int who_unit;
  static int general;
  static int scout;
  static int use_scout;
  int catapult;
  int cat_x;
  int cat_y;
  static int attack_count;
  static int build_check;
  static int max_attack_count;
  static String def_capital = find_capital(DEFENDER);
  static int def_capital_id = find_city_id(def_capital);
  static int def_cap_x = object_position_x(DEFENDER, def_capital_id);
  static int def_cap_y = object_position_y(DEFENDER, def_capital_id);

  static int cur_time = time_min();

  static int end_time = get_time_limit();

  run_once {

    ctw_add_objective_text($S("Hint: Use your Citizens to build a City."), 9, "");

    disable_all_triggers();

    //set time limit and timers
    set_timer("sneak_attack", 2);

    //enable triggers
    enable_trigger("naval_sneak_attack");
    enable_trigger("attack_wave");
    enable_trigger("army_of");

    //find ATTACKER starting position
    unit_id = find_unit(ATTACKER, "fire raft");
    attack_start_x = object_position_x(ATTACKER, unit_id);
    attack_start_y = object_position_y(ATTACKER, unit_id);

    //orders the DEFENDER'S sail units to attack the ATTACKERS transports.
    for (n = num_unit_category(DEFENDER, "Sail"); n > 0; n--) {
      hoplites_id = find_unit(ATTACKER, "hoplites");
      hoplites_x = object_position_x(ATTACKER, hoplites_id);
      hoplites_y = object_position_y(ATTACKER, hoplites_id);
      unit_id = find_military_category(DEFENDER, "Sail");
      attack_who = rand_int(1,10);
      if (attack_who < 5) unit_attack_to_order(ATTACKER, unit_id, hoplites_x, hoplites_y);
      else unit_attack_order(ATTACKER, unit_id, DEFENDER, hoplites_id);      
    }    

    diff = get_difficulty();
    count_time = rand_int(45,75);
    if (diff > 3 && diff < 6) set_timer("lcav", 55);
    if (diff > 5) set_timer("lcav", 45);
    capital_name = find_capital(DEFENDER);
    capital_id = find_city_id(capital_name);
    give_good(ATTACKER, "Food", 100);
    give_good(ATTACKER, "Timber", 250);
    give_good(ATTACKER, "Metal", 100);
    give_good(ATTACKER, "Wealth", 150);
    set_timer("under_attack", 20);  
    set_timer("build_units", 70);
    set_timer("waves", 75);
    enable_trigger("army_of");
    //enable_trigger("attack_waves");
    if (diff < 3) max_attack_count = 5;
    else if (diff == 3) max_attack_count = 6;
    else if (diff == 4) max_attack_count = 7;
    else if (diff == 5) max_attack_count = 8;
    else if (diff == 6) max_attack_count = 9;
  }
  
  trigger (num_cities(ATTACKER) > 0) {
    ctw_objective_complete(9);
  }
  
  trigger (num_cities(ATTACKER) > 0 && find_city_name(ATTACKER) != capital_name) {
    set_capital(ATTACKER, find_city_name(ATTACKER));
  }

  cur_time = time_min();

  if (cur_time >= end_time) defeat(1);

  //Makes a naval force for the DEFENDER which tries to sneak some ATTACKER transports.
  trigger naval_sneak_attack (timer_expired("sneak_attack")) {
    unit_id = find_unit(ATTACKER, "transport");
    x = object_position_x(ATTACKER, unit_id);
    y = object_position_y(ATTACKER, unit_id);
    for (n = num_type(ATTACKER, "transport"); n > 0; n--) {
      unit_id = find_unit(ATTACKER, "transport");
      temp_x = object_position_x(ATTACKER, unit_id);
      temp_y = object_position_y(ATTACKER, unit_id);
      if (temp_x < x) {
        x = temp_x;
        y = temp_y;
      }
    }
    create_unit_upgrade(DEFENDER, x - 20, y, "bark", 1);
    if (diff > 3) create_unit_in_group(DEFENDER, x - 20, y, "bark", 1);
    group_attack_to_order(DEFENDER, x, y);
    if (time_earlier_than(1)) {
      set_timer("sneak_attack", 10);
      enable_trigger("naval_sneak_attack");
    }
  }
  
  if (diff < 4) {
    building = find_inactive_build(2, "Fort");
    destroy_building(2, building);
  }
    
  //sends an attack wave from the DEFENDER to the ATTACKER'S capital.
  trigger attack_wave (time_later_than(wave_time) && num_cities(ATTACKER) > 0) {

    //create units and put them in the same group
    x = attack_start_x;
    y = attack_start_y;
    create_unit_upgrade(DEFENDER, x, y, "hoplites", wave_size);
    create_unit_in_group(DEFENDER, x, y, "bowmen", wave_size);
    create_unit_in_group(DEFENDER, x, y, "slingers", wave_size);
    create_unit_in_group(DEFENDER, x, y, "light horse", wave_size);
    create_unit_in_group(DEFENDER, x, y, "cataphract", wave_size);

    //find ATTACKER'S capital position
    att_cap_name = find_capital(ATTACKER);
    build_id = find_city_id(att_cap_name);
    x = object_position_x(ATTACKER, build_id);
    y = object_position_y(ATTACKER, build_id);

    //give group attack order to ATTACKER'S capital.
    group_attack_to_order(DEFENDER, x, y);

    //create boats to protect the units and patrol the sea
    x = attack_start_x;
    y = attack_start_y;
    create_unit_upgrade(DEFENDER, x, y, "trireme", wave_size);
    create_unit_in_group(DEFENDER, x, y, "heavy_fire_raft", wave_size);
    create_unit_in_group(DEFENDER, x, y, "bark", wave_size);
    
    //give group movement orders
    x = rand_int(0, map_size);
    y = rand_int(0, map_size);
    group_attack_to_order(DEFENDER, x, y);

  }  

  if (timer_expired("waves")) {
        who = 2;
    //find human army
    who_unit = find_unit(1, "");
    scout = find_unit(1, "scout");
    general = find_unit(1, "general");
    use_scout = rand_int(1,5);
    if (use_scout < 2) who_unit = scout;
    unit_x = object_position_x(1, who_unit);
    unit_y = object_position_y(1, who_unit);
    x_check = unit_x;
    y_check = unit_y;

    /*if (x_check == 0 && y_check == 0) {
      who_unit = find_unit(1, "");
      x_check = object_position_x(2, who_unit);
      y_check = object_position_y(2, who_unit);
    }*/
    //find place spot for army
    building_id = find_military_build(who);
    building_x = object_position_x(who, building_id);
    building_y = object_position_y(who, building_id);
    x_distance = x_check - building_x;
    y_distance = y_check - building_y;
    x_distance_absl = absl_int(x_distance);
    y_distance_absl = absl_int(y_distance);
    if (x_check_absl > y_check_absl) {
      if ((x_check - building_x) > 0) {
        x = x_check - 20;
        if (age(DEFENDER) >= 2) {
          x = x - 5;
        }
        if (age(DEFENDER) >= 5) {
          x = x - 2;
        }
        if (age(DEFENDER) >= 6) {
          x = x - 2;
        }
        if (age(DEFENDER) >= 7) {
          x = x - 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          x = x_check - 25;
        }
      }
      else {
        x = x_check + 20;
        if (age(DEFENDER) >= 2) {
          x = x + 5;
        }
        if (age(DEFENDER) >= 5) {
          x = x + 2;
        }
        if (age(DEFENDER) >= 6) {
          x = x + 2;
        }
        if (age(DEFENDER) >= 7) {
          x = x + 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          x = x_check + 25;
        }
      }
      if ((y_check - building_y) > 0) {
        y = y_check - 15;
        if (age(DEFENDER) >= 2) {
          y = y - 5;
        }
        if (age(DEFENDER) >= 5) {
          y = y - 2;
        }
        if (age(DEFENDER) >= 6) {
          y = y - 2;
        }
        if (age(DEFENDER) >= 7) {
          y = y - 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          y = x_check - 20;
        }
      }
      else {
        y = y_check + 15;
        if (age(DEFENDER) >= 2) {
          y = y + 5;
        }
        if (age(DEFENDER) >= 5) {
          y = y + 2;
        }
        if (age(DEFENDER) >= 6) {
          y = y + 2;
        }
        if (age(DEFENDER) >= 7) {
          y = y + 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          y = y_check - 20;
        }
      }
    }
    else {
      if ((y_check - building_y) > 0) {
        y = y_check - 20;
        if (age(DEFENDER) >= 2) {
          y = y - 5;
        }
        if (age(DEFENDER) >= 5) {
          y = y - 2;
        }
        if (age(DEFENDER) >= 6) {
          y = y - 2;
        }
        if (age(DEFENDER) >= 7) {
          y = y - 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          y = y_check - 25;
        }
      }
      else {
        y = y_check + 20;
        if (age(DEFENDER) >= 2) {
          y = y + 5;
        }
        if (age(DEFENDER) >= 5) {
          y = y + 2;
        }
        if (age(DEFENDER) >= 6) {
          y = y + 2;
        }
        if (age(DEFENDER) >= 7) {
          y = y + 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          y = y_check + 25;
        }
      }
      if ((x_check - building_x) > 0) {
        x = x_check - 15;
        if (age(DEFENDER) >= 2) {
          x = x - 5;
        }
        if (age(DEFENDER) >= 5) {
          x = x - 2;
        }
        if (age(DEFENDER) >= 6) {
          x = x - 2;
        }
        if (age(DEFENDER) >= 7) {
          x = x - 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          x = x_check - 20;
        }
      }
      else {
        x = x_check + 15;
        if (age(DEFENDER) >= 2) {
          x = x + 5;
        }
        if (age(DEFENDER) >= 5) {
          x = x + 2;
        }
        if (age(DEFENDER) >= 6) {
          x = x + 2;
        }
        if (age(DEFENDER) >= 7) {
          x = x + 3;
        }
        if (any_object_near(ATTACKER, 1, x, y, 5)) {
          x = x_check - 20;
        }
      }
    }
    if (x < 0) x = 1;
    if (y < 0) y = 1;
    if (!map_is_land(x, y)) {
      x = def_cap_x + 3;
      y = def_cap_y;
    }
    //easiest, easy, moderate
    if (diff < 4 && attack_count < 3) {
      create_unit_upgrade(DEFENDER, x, y, "slingers", 2);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "slingers", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "slingers", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff < 4 && attack_count < 5) {
      create_unit_upgrade(DEFENDER, x, y, "light horse", 1);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "bowmen", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "bowmen", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff < 4 && attack_count < 7) {
      create_unit_upgrade(DEFENDER, x, y, "hoplites", 2);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "hoplites", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "hoplites", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    //tough
    else if (diff == 4 && attack_count < 3) {
      create_unit_upgrade(DEFENDER, x, y, "slingers", 2);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "slingers", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "slingers", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff == 4 && attack_count < 5) {
      create_unit_upgrade(DEFENDER, x, y, "light horse", 1);
      if (diff == 4) create_unit_in_group(DEFENDER, x, y, "light horse", 1);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "light horse", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "light horse", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff == 4 && attack_count < 7) {
      create_unit_upgrade(DEFENDER, x, y, "hoplites", 2);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "hoplites", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "hoplites", 1);
      group_attack_to_order(who, x_check, y_check);
    }
    //tougher, toughest
    else if (diff > 4 && attack_count < 4) {
      create_unit_upgrade(DEFENDER, x, y, "slingers", 2);
      create_unit_in_group(DEFENDER, x, y, "bowmen", 1);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "slingers", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "bowmen", 2);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff > 4 && attack_count < 7) {
      create_unit_upgrade(DEFENDER, x, y, "hoplites", 2);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "slingers", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "hoplites", 2);
      group_attack_to_order(who, x_check, y_check);
    }
    else if (diff > 4 && attack_count < 9) {
      create_unit_upgrade(DEFENDER, x, y, "light horse", 1);
      if (age(DEFENDER) > 3) create_unit_in_group(DEFENDER, x, y, "light horse", 1);
      if (age(DEFENDER) > 6) create_unit_in_group(DEFENDER, x, y, "light horse", 2);
      catapult = find_unit(ATTACKER, "catapult");
      cat_x = object_position_x(ATTACKER, catapult);
      cat_y = object_position_y(ATTACKER, catapult);
      group_attack_to_order(who, cat_x, cat_y);
    }

    attack_count++;
    set_timer("waves", 31 - diff);
  }

  trigger army_of(num_unit_category(ATTACKER, "Artillery") == 0 && num_type_upgrade(ATTACKER, "hoplites") == 0 && num_unit_category(ATTACKER, "Mounted") == 0 && num_cities(ATTACKER) == 0) {
    unit = find_unit(ATTACKER, "");
    scout = find_unit(ATTACKER, "scout");
    if (unit == scout) unit = find_unit(ATTACKER, "");
    x = object_position_x(ATTACKER, unit);
    y = object_position_y(ATTACKER, unit);
    create_unit_upgrade(DEFENDER, x + 17, y + 11, "light horse", 4);
    create_unit_in_group(DEFENDER, x + 17, y + 11, "cataphract", 4);
    group_attack_to_order(DEFENDER, x, y);
    disable_trigger("army_of");
  }

  if (timer_expired("lcav")) {
    if (find_unit(ATTACKER, "catapult")) {
      cat = find_unit(ATTACKER, "catapult");
      x = object_position_x(ATTACKER, cat);
      y = object_position_y(ATTACKER, cat);
      x2 = x + (rand_int(17,24));
      y2 = y + (rand_int(8,11));
      if (age(DEFENDER) >= 2) {
        x = x + 3;
        y = y + 1;
      }
      if (age(DEFENDER) >= 5) {
        x = x + 3;
        y = y + 1;
      }
      if (age(DEFENDER) >= 6) {
        x = x + 3;
        y = y + 1;
      }
      if (age(DEFENDER) >= 7) {
        x = x + 3;
        y = y + 1;
      }
      if (x < 0) x2 = 1;
      if (y < 0) y2 = 1;
      if (!map_is_land(x, y)) {
        x = def_cap_x + 3;
        y = def_cap_y;
      }
      if (diff >= 2 && age(DEFENDER) < 3) {
        for (i = diff - 3; i > 0; i--) {
          light_cav = create_unit_upgrade(DEFENDER, x2, y2, "light horse", 1);
          unit_attack_order(DEFENDER, light_cav, ATTACKER, cat);
        }
      }
      else if (diff >= 2 && age(DEFENDER) > 2) {
        for (i = diff - 2; i > 0; i--) {
          light_cav = create_unit_upgrade(DEFENDER, x2, y2, "light horse", 1);
          unit_attack_order(DEFENDER, light_cav, ATTACKER, cat);
        }
      }
      count_time = rand_int(45,90);
      set_timer("lcav", count_time);
    }
    else if (find_unit(ATTACKER, "supply wagon")) {
      sw = find_unit(ATTACKER, "supply wagon");
      x = object_position_x(ATTACKER, sw);
      y = object_position_y(ATTACKER, sw);
      x2 = x + (rand_int(17,24));
      y2 = y + (rand_int(8,11));
      if (diff >= 2) {
        for (i = (diff - 1); i > 0; i--) {
          light_cav = create_unit_upgrade(DEFENDER, x2, y2, "light horse", 1);
          unit_attack_order(DEFENDER, light_cav, ATTACKER, sw);
        }
      }
      count_time = rand_int(45,75);
      set_timer("lcav", 45);
    }
  }


  if (num_military_units(ATTACKER) == 0 && num_cities(ATTACKER) == 0) {
    victory(DEFENDER);
  }


  
  //if (city_id_captured(DEFENDER, capital_id)) {
    //victory(ATTACKER);
  //}
}
