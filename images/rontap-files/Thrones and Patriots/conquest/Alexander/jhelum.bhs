int conquest even_goods (int amount);
int conquest sum_tribute( int offerer, int offeree );
void conquest status_check( int who );

conquest
{

  int who;
  static int players = 4;
  static int macedonians = 1;
  static int porus = 2;
  static int kashmir = 3;
  static int taxila = 4;
  int building;
  int x;
  int y;
  int unit;
  String city_name;
  
  static int ele_food[] = [102,104,109,117,127,140,155,173,193,216,229];
  static int ele_gold[] = [59,62,67,74,85,97,113,130,133,133,133];
  static int cha_wood[] = [60,61,63,66,70,75,81,88,95,105,115,126,135];
  static int cha_gold[] = [40,41,43,46,50,55,61,68,75,85,90,90,90];
  
  static int alex = find_unit(macedonians, "Alexander");
  static int diff = get_difficulty();

  String kash_name = "Sherpur";
  String tax_name = "Dilawar";
  String porus_name = "Malakwal";

  static int kash_cap = find_city_id(kash_name);
  static int tax_cap = find_city_id(tax_name);
  static int porus_cap = find_city_id(porus_name);

  static int who_ally;

  static int cur_time = time_min();

  static int end_time = get_time_limit();
  static int ally_once;
  
  static int attitudes[] = [10,10,10,10,10,10,10];
  static int fought[] = [0,0,0,0,0,0,0];
  static int trade[] = [0,0,0,0,0,0,0];    
  int nation;
  int high_score;
  int low_score;
  int temp_score;
  int temp_attitude;
  int tribe;
  int factor;
  static int tribute_amount = 6000/(7-diff);
  int low_nation;
  int high_nation;
  
  static int owed_ele;
  static int owed_cha;

  static int cost[];
  static int score_cost[] = [0,0,0,0,0,0,0];
  static int temp_cost[] = [0,0,0,0,0,0,0];
  static int cur_ally;
  static int broken_allies;  

  run_once {
    set_timer("cha_create", 15);
    set_timer("ele_create", 30);
    ctw_add_objective_text($S("Conquer Porus (Blue) to win."), "conquer", "");
    //`ctw_add_objective_text($S("Hint: Choose an ally. Each nation provides a different bonus. Click on a nation's capital to find out what bonus it provides."), "ally", "");
    enable_trigger("alliances");

    set_seen(macedonians, porus, porus_cap);
    set_seen(macedonians, kashmir, kash_cap);
    set_seen(macedonians, taxila, tax_cap);
    diplomacy_set_wait(kashmir);
    diplomacy_set_wait(taxila);
    diplomacy_set_reject(porus);
    if (diff == 1) {
      cost = [0,0,0,0,0,0,0];
    } 
    else if (diff == 2) {
      cost = [0,0,0,0,100];
    }
    else if (diff == 3) {
      cost = [0,0,0,0,300];
    }
    else if (diff == 4) {
      cost = [00,0,0,0,500];
    }
    else if (diff == 5) {
      cost = [0,0,0,0,700];
    }
    else {
      cost = [0,0,0,0,900];
    }
    if (diff > 1) {
      set_timer("random_drift", 1);
    }
    enable_trigger("allies");
    set_timer("comp_ally2", rand_int(700-(diff*50), 1000-(diff*20)));
    set_timer("set_attitudes", 120);
  }

  if (timer_expired("random_drift")) {
    cost[4] += rand_int(diff-2,diff+3);
    set_timer("random_drift", 300);
  }
  
  if (timer_expired("score_adjuster")) {
    high_score = 0;
    low_score = 0;
    for (nation = players; nation > 0; nation--) {
      temp_score = score(nation);
      if (temp_score > high_score) high_score = temp_score;
      else if (temp_score < low_score) low_score = temp_score;
    }
    if (high_score == 1) {
      for (z = 2; z < 5; z++) {
        score_cost[z] = (score(1) - score(z))/(160-diff*10);
      }
      for (z = 5; z < 7; z++) {
        score_cost[z] = -((score(1) - score(z))/(160-diff*10));
      }
    } else if (low_score == 1) {
      for (z = 2; z < 4; z++) {
        score_cost[z] = -((score(1) - score(z))/(160-diff*10));
      }
      for (z = 4; z < 7; z++) {
        score_cost[z] = (score(1) - score(z))/(160-diff*10);
      }
    }
    for (nation = num_players(); nation > 1; nation--) {
      if (fought[nation] == 0) {
        if (have_fought(nation, 1)) {
          fought[nation] = 1;
        }
      }
      if (have_trade(nation, 1)) {
        if (trade[nation] == 0) {
          trade[nation] = 1;
        }
      } else {
        if (trade[nation] == 1) {
          trade[nation] = 0;
        }
      }
    }
  }

  trigger allies() {
    for (nation = players; nation > 1; nation--) {
      if (cur_ally == nation) {
        if (!have_alliance(nation, macedonians)) {
          broken_allies++;
          cur_ally = 0;
        }
        else if (is_defeated(nation)) {
         cur_ally = 0;
        }
      }    
      if (have_alliance(1, nation)) {
        cur_ally = nation;
      }
    }
  } 

  nation = 4;
  if (cost[nation] <= 0) {
    cost[nation] = 1;
  }
  temp_attitude = fought[nation] + broken_allies - trade[nation];
  set_timer("diplo", rand_int(50, 250));
  if (offer_made(1, nation)) {
    tribute_amount = sum_tribute(1,nation);
    if (sum_tribute(nation,1) > 0) {
      reject_offer(nation, 1);
    }
    else if (is_offering_peace(1, nation) || diff == 1) {
      temp_attitude += fought[nation];
      peace_cost = cost[nation] + (temp_attitude * (10+diff)) + score_cost[nation];      
      peace_cost += -peace_cost%100;    
      if (tribute_amount >= peace_cost) {
        accept_offer(nation, 1);
        temp_cost[nation] = 0; 
        set_timer("comp_ally2", rand_int(150-(diff*10),360-(diff*10)));                
      } else {
        make_counter_offer(1, nation, "Food", peace_cost - tribute_amount, $S("We will need a more compelling offer from you."));
        //attitudes[nation]--;
      }
    } 
    else if (is_offering_alliance(1, nation)) {
      temp_attitude += broken_allies - trade[nation];
      ally_cost = (cost[nation] * 2) + (temp_attitude * (13+(diff*2))) + (score_cost[nation] * 2);
      ally_cost += -ally_cost%100;
      if (tribute_amount >= ally_cost || diff == 1) {
        accept_offer(nation, 1);
        temp_cost[nation] = 0;    
        set_timer("comp_ally2", rand_int(30,300));
        status_check(nation);               
      } else {
        make_counter_offer(1, nation, "Metal", ally_cost - tribute_amount, $S("We will need a more compelling offer from you."));
        //attitudes[nation]--;
      }
    } 
    else {//if (attitudes[nation] > 2) {
      if (have_war(1,nation)) {
        temp_cost[nation] += -tribute_amount;
      }
      else if (have_peace(1,nation)) {
        temp_cost[nation] += -tribute_amount/2;
      }
      accept_offer(nation, 1);
    } 
  }

  trigger (gather_rate(macedonians, "Food") >= 60 && time_later_than(3) && (have_alliance(macedonians, kashmir) || have_alliance(macedonians, taxila)) && num_military_units(macedonians) > 10 && timer_expired("timber_ho")) {
    building = popup_choice($S("Our ally is offering to give us 50 of his Timber production for 60 of our Food production."), $S("Okay"), $S("No"));
    if (building == 1) {
      if (have_alliance(macedonians, kashmir)) {
        set_base_rate(macedonians, "Food", -60);
        set_base_rate(macedonians, "Timber", 50);
        set_base_rate(kashmir, "Food", 60);
        who_ally = kashmir;
      } else if (have_alliance(macedonians, taxila)) {
        set_base_rate(macedonians, "Food", -60);
        set_base_rate(macedonians, "Timber", 50);
        set_base_rate(taxila, "Food", 60);
        who_ally = taxila;
      }
    }
  }
  
  trigger (who_ally > 1 && !have_alliance(macedonians, kashmir) && !have_alliance(macedonians, taxila)) {
    popup_dialog($S("We have lost our Timber income from our ally, but regained our Food income."));
    set_base_rate(macedonians, "Food", 60);
    set_base_rate(macedonians, "Timber", -50);
    set_base_rate(who_ally, "Food", -60);
  }

  if (is_defeated(porus)) {
    victory(macedonians);
  }

  trigger alliances() {
    for (nation = 2; nation < 9; nation++) {
      if (have_alliance(macedonians, nation)) {
        who_ally = 1;
        ctw_objective_complete("ally");
        set_timer("timber_ho", rand_int(30, 300));
      }
    }
    if (who_ally == 0) enable_trigger("alliances");
  }

  if (object_selected(porus, find_city_id(find_capital(porus))) && num_objects_selected(macedonians) == 0) {
    bubble_text_obj($S("Ally bonus: None."), porus, porus_cap);
    clear_selection();
  }

  if (object_selected(taxila, find_city_id(find_capital(taxila))) && num_objects_selected(macedonians) == 0) {
    bubble_text_obj($S("Ally bonus: Helps you kill War Elephants."), taxila, tax_cap);
    clear_selection();
  }

  if (object_selected(kashmir, find_city_id(find_capital(kashmir))) && num_objects_selected(macedonians) == 0) {
    bubble_text_obj($S("Ally bonus: Produces War Elephants for you."), kashmir, kash_cap);
    clear_selection();
  }

  cur_time = time_min();

  if (cur_time >= end_time) defeat(1);

  trigger (time_later_than(rand_int(10,15))) {
    who = rand_int(7,8);
    declare_war(who,2);
    declare_war(who,2);
  }

  trigger kash_money(have_alliance(macedonians, kashmir)) {
    enable_trigger("build_eles");
    set_timer("eles", 40);
    popup_dialog($S("In appreciation of our new alliance, Rajah Abisares (Purple) has dedicated the production of one of his Stables to making War Elephants for us. They will be sent to our Capital for our use."));
  }

  trigger kash_bling(!have_alliance(macedonians, kashmir)) {
    disable_trigger("build_eles");
  }

  trigger build_eles(timer_expired("eles")) {
    set_timer("eles", 40+num_type(1, "War Elephant"));
    enable_trigger("build_eles");
    if (population(macedonians) < population_cap(macedonians)) {
      building = find_build(kashmir, "Stable");
      x = object_position_x(kashmir, building);
      y = object_position_y(kashmir, building);
      unit = create_unit(macedonians, x + 2, y, "War Elephant", 1);
      city_name = find_capital(macedonians);
      building = find_city_id(city_name);
      x = object_position_x(macedonians, building);
      y = object_position_y(macedonians, building);
      unit_move_order(macedonians, unit, x + rand_int(-10,10), y +rand_int(-10,10));
    }
  }

  trigger tax_it(have_alliance(macedonians, taxila)) {
    enable_trigger("been_taxed");
    enable_trigger("taxed");
    set_timer("being_taxed", 1);
    popup_dialog($S("In appreciation of our new alliance, King Ambhi (Green) has taught us how to fight Elephants better. As a result, all enemy War Elephant hit points have been reduced by one-third."));
  }

  trigger taxed(timer_expired("being_taxed")) {
    set_object_type_max_health("War Elephant", 110);
  }

  if (offer_made(macedonians, porus)) {
    reject_offer(porus, macedonians);
  }

  trigger been_taxed(!have_alliance(macedonians, taxila)) {
    enable_trigger("tax_it");
    set_object_type_max_health("War Elephant", 165);
  }
  
  if (timer_expired("ele_create")) {
    for (i = 0; i < owed_ele; i++) {  
      if (!pop_cap_warning(porus) && rand_int(0, 7-diff) == 0) {
        building = find_military_build(porus);
        x = object_position_x(porus, building) + 2;
        y = object_position_y(porus, building);
        if (num_type(porus, "Chariot") * 2 > num_type(porus, "War Elephant")) {
          create_unit(porus, x, y, "War Elephant", 1);
        }
        else {
          create_unit(porus, x, y, "Chariot", 1);
        }
      }
    }
    owed_ele = 0;
    set_timer("ele_create", 35);
  }
  
  if (timer_expired("cha_create")) {
    for (i = 0; i < owed_cha; i++) {
      if (!pop_cap_warning(porus)) {
        building = find_military_build(porus);
        x = object_position_x(porus, building) + 2;
        y = object_position_y(porus, building);
        if (num_type(porus, "Chariot") * 2 > num_type(porus, "War Elephant")) {
          create_unit(porus, x, y, "War Elephant", 1);
        }
        else {
          create_unit(porus, x, y, "Chariot", 1);
        }
      }
    }  
    owed_cha = 0;
    set_timer("cha_create", 25);
  }
  
  trigger (have_alliance(taxila, macedonians) && diff > 2) {
    for (i = 0; i < num_military_buildings(porus); i++) {
      building = find_military_build(porus);
      x = object_position_x(porus, building);
      y = object_position_y(porus, building);
      create_unit_upgrade(porus, x+2, y, "War Elephant", 2);
    }
  }
  
//ele/cha
  //if (!pop_cap_warning(porus)) {
    for (n = num_military_buildings(porus); n > 0; n--) {
      building = find_military_build(porus);
      if (num_type_queued(porus, building, "") > 0) {
        unit = num_type_queued(porus, building, "");
        clear_build_queue(porus, building, 0);
        x = object_position_x(porus, building) + 2;
        y = object_position_y(porus, building);
        if (rand_int(0,diff) > 2) {
          //create_unit(porus, x, y, "War Elephant", unit);
          if (diff < 3) {
            if (num_military_units(porus) < 30) {
              owed_ele += unit;
            }
          }
          else {
            owed_ele += unit;
          }
          pay_amount = num_type(porus, "War Elephant");
          if (pay_amount >= ele_gold.length) {
            pay_amount = ele_gold.length - 1;
          }
          res_1 = num_type(porus, "Food");
          if (res_1 >= ele_food[pay_amount]) {
            take_good(porus, "Food", ele_food[pay_amount]);//13, 183
          }
          else {
            even_goods(ele_food[pay_amount]);
          }
          res_2 = num_type(porus, "Wealth");
          if (res_2 >= ele_gold[pay_amount]) {          
            take_good(porus, "Wealth", ele_gold[pay_amount]);//8, 119
          }
          else {
            even_goods(ele_gold[pay_amount]);
          }            
        } else  {
          if (diff < 3) {
            if (num_military_units(porus) < 30) {
              owed_cha += unit;
            }
          }
          else {
            owed_cha += unit;
          }
          //create_unit(porus, x, y, "Chariot", unit);
          pay_amount = num_type(porus, "Chariot");
          if (pay_amount >= cha_gold.length) {
            pay_amount = cha_wood.length - 1;
          }          
          res_1 = num_type(porus, "Timber");
          if (res_1 >= cha_wood[pay_amount]) {          
            take_good(porus, "Timber", cha_wood[pay_amount]);//126/  //60,z
          }
          else {
            even_goods(cha_wood[pay_amount]);
          }            
          res_2 = num_type(porus, "Metal");
          if (res_2 >= cha_gold[pay_amount]) {           
            take_good(porus, "Metal", cha_gold[pay_amount]);
          }
          else {
            even_goods(cha_gold[pay_amount]);
          }          
        }
      }
    }
 // }

}

int conquest even_goods (int amount)
{

  int food = num_type(2, "Food");
  int wood = num_type(2, "Timber");
  int metal = num_type(2, "Metal");
  int wealth = num_type(2, "Wealth");
  
  if (food >= amount) {
    take_good(2, "Food", amount);
    return 1;
  }
  else {
    amount += -food;
    take_good(2, "Food", amount);
  }
  if (wood >= amount) {
    take_good(2, "Timber", amount);
    return 1;
  }
  else {
    amount += -wood;
    take_good(2, "Timber", amount);
  } 
  if (wealth >= amount) {
    take_good(2, "Wealth", amount);
    return 1;
  }
  else {
    amount += -wealth;
    take_good(2, "Wealth", amount);
  } 
  if (metal >= amount) {
    take_good(2, "Metal", amount);
    return 1;
  }
  else {
    amount += -metal;
    take_good(2, "Metal", amount);
  } 
     
  return 0;

}

int conquest sum_tribute( int offerer, int offeree )
{
  int total;
  String resources[] = ["Food", "Wealth", "Metal", "Timber"];

  for (z = 0; z < resources.length; z++) {
    total += amount_offered(offerer,offeree,resources[z]);
  }

  return total;

}


void conquest status_check( int who )
{

  int macedonians = 1;
  int nation;
  
  for (nation = num_players(); nation > 1; nation--) {
    if (nation == who) {
      nation--;;
    }
    if (nation == 1) {
      break;
    }
    if (have_peace(macedonians, nation)) {
      make_peace(who, nation);
    }
    else if (have_war(macedonians, nation)) {
      declare_war(who, nation);
    }
  }

}