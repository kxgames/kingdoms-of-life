include "ctw_lib.bhs"

conquest
{
  
  new_world_rules();
  new_world_setup();
  int native = 1;
  int euro = 2;
  int nation;
  int side;
  int x;
  int y;
  int gx;
  int gy;
  int native_cap_id;
  int diff = get_difficulty();
  String native_capital = find_capital(native);
  
  if (diff > 3) {
    disable_type("Library");
    disable_type("University");
  }

  native_cap_id = find_city_id(native_capital);
  force_transport_ability(euro);
  disable_city_defeat(euro);

  //for (nation = 2; nation < 9; nation++) {
  //  gain_next_age(nation);
  //  for (i = 0; i < 7; i++) {
   //   gain_tech(nation, "Civics");
   //   gain_tech(nation, "Commerce");
    //  gain_tech(nation, "Science");
      //gain_tech(nation, "Military");
   // }
 // }

// Find a spawn point for the Europeans  
  side = rand_int(0, 3);
  switch (side) {
    case 0 :
      x = get_map_size();
      y = rand_int(0, get_map_size() - 1);
      break;
    case 1 :
      x = get_map_size();
      y = rand_int(0, get_map_size() - 1);
      break;
    case 2 :
      x = rand_int(0, get_map_size() - 1);
      y = get_map_size()/4;
      break;
    case 3 :
      x = rand_int(0, get_map_size() - 1);
      y = get_map_size();
      break;
  }  // switch (side)
  while(!map_is_land(x,y)) {
    side = rand_int(0, 3);
    switch (side) {
      case 0 :
        x = get_map_size();
        y = rand_int(0, get_map_size() - 1);
        break;
      case 1 :
        x = get_map_size();
        y = rand_int(0, get_map_size() - 1);
        break;
      case 2 :
        x = rand_int(0, get_map_size() - 1);
        y = get_map_size()/4;
        break;
      case 3 :
        x = rand_int(0, get_map_size() - 1);
        y = get_map_size();
        break;
    } // switch (side)
  } // while(!map_is_land
  create_unit(euro, x, y, "Citizen", 5);
  create_unit_upgrade(euro, x, y, "light horse", 2);
  
//setup your base
  x = object_position_x(native, native_cap_id);
  y = object_position_y(native, native_cap_id);
  create_unit_upgrade(native, x, y, "scout", 1);
  switch(diff) {
    case 1 :
      place_building_upgrade(native, "tower", native_capital);
      place_building_upgrade(native, "tower", native_capital);
      place_building_upgrade(native, "tower", native_capital);
      place_building_upgrade(native, "siege factory", native_capital);
      create_unit_upgrade(native, x, y, "hoplites", 3);
      create_unit_upgrade(native, x, y, "bowmen", 3);
      create_unit_upgrade(native, x, y, "slingers", 3);
      create_unit_upgrade(native, x, y, "scout", 2);
      create_unit_upgrade(native, x, y, "catapult", 2);
      break;
    case 2 :
      place_building_upgrade(native, "tower", native_capital);
      place_building_upgrade(native, "tower", native_capital);
      place_building_upgrade(native, "siege factory", native_capital);
      create_unit_upgrade(native, x, y, "hoplites", 2);
      create_unit_upgrade(native, x, y, "bowmen", 2);
      create_unit_upgrade(native, x, y, "slingers", 2);
      create_unit_upgrade(native, x, y, "scout", 2);
      create_unit_upgrade(native, x, y, "catapult", 2);
      break;
    case 3 :
      place_building_upgrade(native, "tower", native_capital);
      place_building_upgrade(native, "siege factory", native_capital);
      create_unit_upgrade(native, x, y, "hoplites", 1);
      create_unit_upgrade(native, x, y, "slingers", 1);
      create_unit_upgrade(native, x, y, "scout", 1);
      create_unit_upgrade(native, x, y, "catapult", 1);
      break;
    case 4 :
      create_unit_upgrade(native, x, y, "hoplites", 1);
      create_unit_upgrade(native, x, y, "scout", 1);
      create_unit_upgrade(native, x, y, "catapult", 1);
      break;
    case 5 :
      create_unit_upgrade(native, x, y, "scout", 1);
      break;
    case 6:
      break;
  }
  place_building_upgrade(native, "barracks", native_capital);
  place_building_upgrade(native, "stable", native_capital);
  gain_tech(native, "Military");

//set-up of outposts
  num_outposts = 6;
  radius = 32;
  center_x = get_map_size() / 2;
  center_y = center_x;
  increment =  360.0 / num_outposts;
  
  for (scan = 0; scan < num_outposts; scan++) {
    angle = scan * increment;
    rand_angle = angle + (rand_int(0, 10) - 5);
    rand_radius = radius - rand_int(1, 4) + 2;
    x = (int)(rand_radius * sin(rand_angle) + center_x);
    y = (int)(rand_radius * cos(rand_angle) + center_y);    
    
    if (map_is_buildable(x, y)) {
      create_building_near(native, x, y, "lookout", 8);           
    } // if (map_is_buildable
  } // for (scan = 0

//give resources
  switch(diff) {
    case 1 :
      give_good(native, "Food", 600);
      give_good(native, "Timber", 600);
      give_good(native, "Wealth", 600);
      give_good(native, "Metal", 600);
      give_good(native, "Oil", 600);
      give_good(native, "Knowledge", 600);
      break;
    case 2 :
      give_good(native, "Food", 500);
      give_good(native, "Timber", 500);
      give_good(native, "Wealth", 500);
      give_good(native, "Metal", 500);
      give_good(native, "Oil", 500);
      give_good(native, "Knowledge", 500);
      break;
    case 3 :
      give_good(native, "Food", 400);
      give_good(native, "Timber", 400);
      give_good(native, "Wealth", 400);
      give_good(native, "Metal", 400);
      give_good(native, "Oil", 400);
      give_good(native, "Knowledge", 400);
      break;
    case 4 :
      give_good(native, "Food", 400);
      give_good(native, "Timber", 400);
      give_good(native, "Wealth", 400);
      give_good(native, "Metal", 400);
      give_good(native, "Oil", 400);
      give_good(native, "Knowledge", 400);
      break;
    case 5 :
      give_good(native, "Food", 400);
      give_good(native, "Timber", 400);
      give_good(native, "Wealth", 300);
      give_good(native, "Metal", 300);
      give_good(native, "Oil", 300);
      give_good(native, "Knowledge", 300);
      break;
    case 6 :
      give_good(native, "Food", 400);
      give_good(native, "Timber", 400);
      give_good(native, "Wealth", 200);
      give_good(native, "Metal", 200);
      give_good(native, "Oil", 200);
      give_good(native, "Knowledge", 200);
      break;
  } // switch (diff)

}