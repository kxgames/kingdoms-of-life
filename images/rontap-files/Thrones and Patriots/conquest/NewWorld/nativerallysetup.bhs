include "ctw_lib.bhs"

conquest
{
  
  new_world_rules();
  new_world_setup();
  int HUMAN = 1;

  string HUMAN_capital = find_capital(HUMAN);

  int HUMAN_cap_id = find_city_id(HUMAN_capital);
  int diff = get_difficulty();
  int nation;
  int tribe;
  int map_size = get_map_size();
  int i;
  int x;
  int y;
  int step = 1;
  int x_toggle;
  int y_toggle;
  int side;
  int times;
  int next;
  int skip = 1;
  int fort;




// Ally the enemy natives
  for (nation = 2; nation < 6; nation++) {
    disable_building_attrition(nation);
    force_transport_ability(nation);
    disable_city_defeat(nation);
    lose_current_age(nation);
    //temp fix
    for (i = num_units(nation); i > 0; i--) {
      kill_unit_anim(nation, find_unit(nation, ""), 1);
    }
    for (i = num_buildings(nation); i > 0; i--) {
      destroy_building(nation, find_build(nation, ""));
    }
    for (tribe = 2; tribe < 6; tribe++) {
      if (tribe == nation) {
        tribe++;
      }
      make_alliance(tribe, nation);
    } // for (tribe
    if (nation == 2) { // North Corner
      times = 0;
      next = 0;
      do{
        if (times < 500) {
          x = rand_int(1, map_size/2);
          y = rand_int(1, map_size/2);
          if (object_type_near(1, "Small City", 1, x, y, 25)){
            x -= 25;
            y -= 25;
          }
        } // if (times < 500
        else {
          next = 1;
          break;
        }
        times++;
      } // do
      while(!map_is_buildable(x, y));
      if (next == 0) {
        if (diff > 2) {
          create_building_near(nation, x, y, "Fort", 5);
          fort = find_build(nation, "Fort");
          }
        else {
          create_building_near(nation, x, y, "Tower", 5);
          fort = find_build(nation, "Tower");
          }
        x = object_position_x(nation, fort);
        y = object_position_y(nation, fort);
        add_reveal_point(1, x, y, 5);
        } // if (next == 0
    } // if (nation == 2
    if (nation == 3) { // East Corner
      times = 0;
      next = 0;
      do{
        if (times < 500) {
          x = rand_int(map_size/2, map_size - 1);
          y = rand_int(1, map_size/2);
          if (object_type_near(1, "Small City", 1, x, y, 25)){
            x += 25;
            y -= 25;
          }
        } // if (times < 500
        else {
          next = 1;
          break;
        }
        times++;
      } // do
      while(!map_is_buildable(x, y));
      if (next == 0) {
        if (diff > 2) {
          create_building_near(nation, x, y, "Fort", 5);
          fort = find_build(nation, "Fort");
          }
        else {
          create_building_near(nation, x, y, "Tower", 5);
          fort = find_build(nation, "Tower");
          }
        x = object_position_x(nation, fort);
        y = object_position_y(nation, fort);
        add_reveal_point(1, x, y, 5);
        } // if (next == 0
    } // if (nation == 3
    if (nation == 4) { // South Corner
      times = 0;
      next = 0;
      do{
        if (times < 500) {
          x = rand_int(map_size/2, map_size - 1);
          y = rand_int(map_size/2, map_size - 1);
          if (object_type_near(1, "Small City", 1, x, y, 25)){
            x += 25;
            y += 25;
          }
        } // if (times < 500
        else {
          next = 1;
          break;
        }
        times++;
      } // do
      while(!map_is_buildable(x, y));
      if (next == 0) {
        if (diff > 2) {
          create_building_near(nation, x, y, "Fort", 5);
          fort = find_build(nation, "Fort");
          }
        else {
          create_building_near(nation, x, y, "Tower", 5);
          fort = find_build(nation, "Tower");
          }
        x = object_position_x(nation, fort);
        y = object_position_y(nation, fort);
        add_reveal_point(1, x, y, 5);
        } // if (next == 0
    } // if (nation == 4
    if (nation == 5) { // West Corner
      times = 0;
      next = 0;
      do{
        if (times < 500) {
          x = rand_int(1, map_size/2);
          y = rand_int(map_size/2, map_size - 1);
          if (object_type_near(1, "Small City", 1, x, y, 25)){
            x -= 25;
            y += 25;
          }
        } // if (times < 500
        else {
          next = 1;
          break;
        }
        times++;
      } // do
      while(!map_is_buildable(x, y));
      if (next == 0) {
        if (diff > 2) {
          create_building_near(nation, x, y, "Fort", 5);
          fort = find_build(nation, "Fort");
          }
        else {
          create_building_near(nation, x, y, "Tower", 5);
          fort = find_build(nation, "Tower");
          }
        x = object_position_x(nation, fort);
        y = object_position_y(nation, fort);
        add_reveal_point(1, x, y, 5);
        } // if (next == 0
    } // if (nation == 5
  } // for (nation = 2

//setup your base
  x = object_position_x(HUMAN, HUMAN_cap_id);
  y = object_position_y(HUMAN, HUMAN_cap_id);
  switch(diff) {
    case 1 :
      place_building_upgrade(HUMAN, "tower", HUMAN_capital);
      place_building_upgrade(HUMAN, "tower", HUMAN_capital);
      place_building_upgrade(HUMAN, "tower", HUMAN_capital);
      create_unit_upgrade(HUMAN, x, y, "hoplites", 4);
      create_unit_upgrade(HUMAN, x, y, "slingers", 5);
      create_unit_upgrade(HUMAN, x, y, "scout", 1);
      create_unit_upgrade(HUMAN, x, y, "catapult", 1);
      break;
    case 2 :
      place_building_upgrade(HUMAN, "tower", HUMAN_capital);
      place_building_upgrade(HUMAN, "tower", HUMAN_capital);
      create_unit_upgrade(HUMAN, x, y, "hoplites", 3);
      create_unit_upgrade(HUMAN, x, y, "slingers", 3);
      create_unit_upgrade(HUMAN, x, y, "scout", 1);
      break;
    case 3 :
      place_building_upgrade(HUMAN, "tower", HUMAN_capital);
      create_unit_upgrade(HUMAN, x, y, "hoplites", 1);
      create_unit_upgrade(HUMAN, x, y, "slingers", 1);
      create_unit_upgrade(HUMAN, x, y, "catapult", 1);
      break;
    case 4 :
      create_unit_upgrade(HUMAN, x, y, "hoplites", 1);
      create_unit_upgrade(HUMAN, x, y, "catapult", 1);
      break;
    case 5 :
      break;
    case 6:
      break;
  }
  place_building_upgrade(HUMAN, "barracks", HUMAN_capital);
  place_building_upgrade(HUMAN, "stable", HUMAN_capital);
  place_building_upgrade(HUMAN, "siege factory", HUMAN_capital);
  gain_tech(HUMAN, "Military");

//set-up of outposts
  num_outposts = 6;
  radius = 32;
  center_x = get_map_size() / 2;
  center_y = center_x;
  increment =  360.0 / num_outposts;
  
  for (scan = 0; scan < num_outposts; scan++) {
    angle = scan * increment;
    rand_angle = angle + (rand_int(0, 10) - 5);
    rand_radius = radius - rand_int(1, 4) + 2;
    x = (int)(rand_radius * sin(rand_angle) + center_x);
    y = (int)(rand_radius * cos(rand_angle) + center_y);    
    
    if (map_is_buildable(x, y)) {
      create_building_near(HUMAN, x, y, "lookout", 8);           
    } // if (map_is_buildable
  } // for (scan = 0

//give resources
  switch(diff) {
    case 1 :
      give_good(HUMAN, "Food", 600);
      give_good(HUMAN, "Timber", 600);
      give_good(HUMAN, "Wealth", 600);
      give_good(HUMAN, "Metal", 600);
      give_good(HUMAN, "Oil", 600);
      give_good(HUMAN, "Knowledge", 600);
      break;
    case 2 :
      give_good(HUMAN, "Food", 500);
      give_good(HUMAN, "Timber", 500);
      give_good(HUMAN, "Wealth", 500);
      give_good(HUMAN, "Metal", 500);
      give_good(HUMAN, "Oil", 500);
      give_good(HUMAN, "Knowledge", 500);
      break;
    case 3 :
      give_good(HUMAN, "Food", 400);
      give_good(HUMAN, "Timber", 400);
      give_good(HUMAN, "Wealth", 400);
      give_good(HUMAN, "Metal", 400);
      give_good(HUMAN, "Oil", 400);
      give_good(HUMAN, "Knowledge", 400);
      break;
    case 4 :
      give_good(HUMAN, "Food", 400);
      give_good(HUMAN, "Timber", 400);
      give_good(HUMAN, "Wealth", 400);
      give_good(HUMAN, "Metal", 400);
      give_good(HUMAN, "Oil", 400);
      give_good(HUMAN, "Knowledge", 400);
      break;
    case 5 :
      give_good(HUMAN, "Food", 400);
      give_good(HUMAN, "Timber", 400);
      give_good(HUMAN, "Wealth", 300);
      give_good(HUMAN, "Metal", 300);
      give_good(HUMAN, "Oil", 300);
      give_good(HUMAN, "Knowledge", 300);
      break;
    case 6 :
      give_good(HUMAN, "Food", 400);
      give_good(HUMAN, "Timber", 400);
      give_good(HUMAN, "Wealth", 200);
      give_good(HUMAN, "Metal", 200);
      give_good(HUMAN, "Oil", 200);
      give_good(HUMAN, "Knowledge", 200);
      break;
  } // switch (diff)
}