include "ctw_lib.bhs"

conquest
{

 // static int diff = get_difficulty();
  new_world_rules();
  int i;
  int n;
  int m;
  int cur_time;
  int x;
  int y;
  int building;
  int unit;
  int who;
  int gx;
  int gy;
  int side;
  int catapult;
  int cat;
  int catapult_g;
  int wagon_x;
  int wagon_y;
  int citizen;
  int step;
  int inactive;
  int barracks;
  int stable;
  int tower;
  int fort;

  String city_name;
  String building_name;

  static int native = 1;
  static int euro = 2;
  static int city_count = num_cities(euro);
  static int cities_off = 0;
  static int citizen2;
  static int map_size = get_map_size();
  static int center_x;
  static int count;
  static int end_time = get_time_limit();
  static int supply;
  static int center_y;
  static int radius;
  static int phase1;
  static int phase2;
  static int time_limit;  
  static int capital_id;
  static int diff = get_difficulty();
  static int attack_count;
  static int pick_value;
  static int start_age;
  static int impale_units;
  static int impale;
  static int attack_here;
  static int my_capital_id;
  static int raze_or_raid = 0;
  static int catapult_in_group;
  static int spawn_dir = get_conquest_invasion_dir();
  static String my_capital = find_capital(native);

  run_once {
    if (diff > 3) {
      popup_dialog($S("Foreign saboteurs have destroyed our Library and we do not have the resources to construct another one. We will have to make do with the technology we have."));
      destroy_building(1, find_build(1, "Library"));
    }
    ctw_add_objective_text($S("Destroy enemy cities- the foreigners must not have any cities when time expires."), "cities_obj", "");
    new_world_setup();
    disable_city_defeat(euro);
    set_timer("attack_cor", 60);
    enable_trigger("middle_attack");
    my_capital_id = find_city_id(my_capital);
    start_age = get_starting_age();
    pick_value = 1;
    force_transport_ability(euro);
    disable_city_defeat(euro);
    center_x = get_map_size() / 2;
    center_y = center_x;
    diff = get_difficulty();

  //how long until barbarian troops are spawned
    switch (diff) {    
      case 1 :
        set_timer ("units", 25);  
        break;
      case 2 :
        set_timer ("units", 20);      
        break;
      case 3 :
        set_timer ("units", 15);     
        break;
      case 4 :
        set_timer ("units", 10);   
        break;
      case 5 :
        set_timer ("units", 5);      
        break;
      case 6: 
        set_timer("units", 1);
        break;
    } // switch (diff)

    time_limit = get_time_limit();
    capital_name = find_capital(native);
    capital_id = find_city_id(capital_name);
    attack_count = 0;
    set_timer("new_citizens", rand_int(120, 240) - 5* diff);
    //set_timer("rally", 1);
  } // run_once

// ****************
// Make a new city
  if (timer_expired("new_citizens") && cities_off == 0) {
    side = rand_int(0, 3);
    switch (side) {
      case 0 :
        x = get_map_size() - 1;
        y = rand_int(1, get_map_size() - 1);
        break;
      case 1 :
        x = 1;
        y = rand_int(1, get_map_size() - 1);
        break;
      case 2 :
        x = rand_int(1, get_map_size() - 1);
        y = get_map_size() - 1;
        break;
      case 3 :
        x = rand_int(1, get_map_size() - 1);
        y = 1;
        break;
    } // switch (side)
    while(!map_is_land(x,y) && territory_owner(x,y) != native) {
      side = rand_int(0, 3);
      switch (side) {
        case 0 :
          x = get_map_size() - 1;
          y = rand_int(1, get_map_size() - 1);
          break;
        case 1 :
          x = 1;
          y = rand_int(1, get_map_size() - 1);
          break;
        case 2 :
          x = rand_int(1, get_map_size() - 1);
          y = get_map_size() - 1;
          break;
        case 3 :
          x = rand_int(1, get_map_size() - 1);
          y = 1;
          break;
      } // switch (side)
    } // while(!map_is_land
    clear_group(euro);
    if (num_cities(euro) < 1) {
      building = find_inactive_build(euro, "small city");
      if (building == -1) {
        give_good(euro, "food", 10);
        give_good(euro, "wood", 10);
        building = place_city_with_cost(euro);
      } // if (building
      n = 5;
      while (n > 0) {
        citizen = create_unit(euro, x, y, "Citizen", 1);
        citizen_repair_order(euro, citizen, building);
        n--;
      } // while (n > 0
      clear_group(euro);
      create_unit_upgrade(euro, x, y, "light horse", 1);
      if (time_later_than(8)) create_unit_in_group(euro, x, y, "cataphract", 1);
      group_guard_order(euro, euro, citizen);
    } // if (num_cities(euro
    set_timer("new_citizens", rand_int(120, 240) - 5*diff);;
  } // if (timer_expired("new_citizens")

//************************
//help your siege computer
  if (timer_expired("cat_check")) {
    set_timer("cat_check", 5);
    for (n = num_type(euro, "catapult"); n > 0; n--) {
      cat = find_unit(euro, "catapult");
      if (object_health(euro, cat) < 70) {
        for (n = 0; n > 3; n++) {
          unit = find_military(euro);
          x = object_position_x(euro, cat);
          y = object_position_y(euro, cat);
          unit_clear_orders(euro, unit);
          unit_attack_to_order(euro, unit, x, y);
        } // for (n = 0
      } // if (object_health(euro, cat)
    } // for (n = num_type(euro, "catapult")
  } // if (timer_expired("cat_check")

//********************************
//make it attack from another side
  if (timer_expired("units2")) {
    //////print_game_msg("attack count is: " + attack_count);
    //find a spot
    side = rand_int(0, 3);
    switch (side) {
      case 0 :
        x = 0;
        y = rand_int(0, get_map_size() - 1);
        wagon_x = center_x - 20;
        wagon_y = center_y;
        break;
      case 1 :
        x = get_map_size() - 1;
        y = rand_int(0, get_map_size() - 1);
        wagon_x = center_x;
        wagon_y = center_y + 20;
        break;
      case 2 :
        x = rand_int(0, get_map_size() - 1);
        y = 0;
        wagon_x = center_x;
        wagon_y = center_y - 20;
        break;
      case 3 :
        x = rand_int(0, get_map_size() - 1);
        y = get_map_size() - 1;
        wagon_x = center_x;
        wagon_y = center_y + 20;
        break;
    } // switch (side)

    clear_group(euro);
    //moderate
    if (diff == 3) {
      //add the units
      if (attack_count >= 0 && attack_count <= 4) {  
        //create_unit_upgrade(euro, x, y, "horse archer", 1);
        create_unit_upgrade(euro, x, y, "light horse", 1);
        //if (attack_count == 2) create_unit_in_group(euro, x, y, "horse archers", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 4 && attack_count <= 7) {   
        create_unit_upgrade(euro, x, y, "light horse", 1);
        //create_unit_in_group(euro, x, y, "cataphract", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 7 && attack_count <= 9) {            
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        group_stance_order(euro, "Raze");  
      }
      else if (attack_count == 10) {             
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        group_stance_order(euro, "Raze");  
      }
      else if (attack_count == 11) {             
        create_unit_upgrade(euro, x, y, "cataphract", 1);
        group_stance_order(euro, "Raze"); 
      }
      else if (attack_count == 12) {         
        create_unit_upgrade(euro, x, y, "light_horse", 1);  
        //catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        //group_guard_order(euro, euro, catapult);
        group_stance_order(euro, "Raze");     
      }
      else if (attack_count == 13) {         
        create_unit_upgrade(euro, x, y, "light horse", 1); 
        group_stance_order(euro, "Raze");  
      }
      else if (attack_count > 13 && attack_count <= 15) {    
        create_unit_upgrade(euro, x, y, "horse archers", 1); 
        //create_unit_in_group(euro, x, y, "cataphract", 1);              
        group_stance_order(euro, "Raze");
      }
      else if (attack_count >= 16 && attack_count <= 17) {    
        //create_unit_upgrade(euro, x, y, "light horse", 1);
        create_unit_upgrade(euro, x, y, "cataphract", 1);             
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);
        group_stance_order(euro, "Raze");
      }
      else if (attack_count == 18) {    
        //create_unit_upgrade(euro, x, y, "light horse", 1);  
        create_unit_upgrade(euro, x, y, "cataphract", 1);         
        group_stance_order(euro, "Raze");
      }
      else if (attack_count > 18 && attack_count <= 24) { 
        create_unit_upgrade(euro, x, y, "light horse", 1);               
        //create_unit_in_group(euro, x, y, "cataphract", 1);
        if (attack_count > 20) create_unit_in_group(euro, x, y, "cataphract", 1);
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);
        group_stance_order(euro, "Raze");
      }
    } // END MODERATE

    // tough
    else if (diff == 4) {
      //add the units
      if (attack_count >= 0 && attack_count <= 4) {  
        //create_unit_upgrade(euro, x, y, "horse archer", 1);
        create_unit_upgrade(euro, x, y, "light horse", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 4 && attack_count <= 7) {   
        //create_unit_upgrade(euro, x, y, "horse archer", 1);
        create_unit_upgrade(euro, x, y, "cataphract", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 7 && attack_count <= 9) {            
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        group_stance_order(euro, "Raid");  
      }
      else if (attack_count == 10) {             
        create_unit_upgrade(euro, x, y, "light horse", 1);
        group_stance_order(euro, "Raid");  
      }
      else if (attack_count == 11) {             
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        group_stance_order(euro, "Raid"); 
      }
      else if (attack_count == 12) {         
        create_unit_upgrade(euro, x, y, "horse archers", 1);  
        group_stance_order(euro, "Raze");     
      }
      else if (attack_count == 13) {         
        //create_unit_upgrade(euro, x, y, "horse archers", 1); 
        create_unit_upgrade(euro, x, y, "light horse", 1);
        group_stance_order(euro, "Raid");  
      }
      else if (attack_count > 13 && attack_count <= 15) {    
        create_unit_upgrade(euro, x, y, "horse archers", 1); 
        //create_unit_in_group(euro, x, y, "light horse", 1);             
        group_stance_order(euro, "Raid");
      }
      else if (attack_count >= 16 && attack_count <= 17) {    
        create_unit_upgrade(euro, x, y, "light horse", 1);             
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);
        group_stance_order(euro, "Raze");
      }
      else if (attack_count == 18) {    
        create_unit_upgrade(euro, x, y, "light horse", 1);             
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 18 && attack_count <= 24) { 
        create_unit_upgrade(euro, x, y, "cataphract", 1);   
        if (attack_count > 20) create_unit_in_group(euro, x, y, "light horse", 1);     
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);         
        group_stance_order(euro, "Raze");
      }
    } // END TOUGH

    // tougher
    else if (diff == 5) {
      //add the units
      if (attack_count >= 0 && attack_count <= 4) {  
        //create_unit_upgrade(euro, x, y, "horse archer", 1);
        create_unit_upgrade(euro, x, y, "light horse", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 4 && attack_count <= 7) {   
        //create_unit_upgrade(euro, x, y, "horse archer", 1);
        create_unit_upgrade(euro, x, y, "cataphract", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 7 && attack_count <= 9) {            
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        group_stance_order(euro, "Raid");  
      }
      else if (attack_count >= 10 && attack_count <= 11) {             
        //create_unit_upgrade(euro, x, y, "horse archers", 1);
        create_unit_upgrade(euro, x, y, "cataphract", 1);
        //catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        //group_guard_order(euro, euro, catapult);
        group_stance_order(euro, "Raid");  
      }
      else if (attack_count > 11 && attack_count <= 13) {         
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        //create_unit_in_group(euro, x, y, "light horse", 1);
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);  
        group_stance_order(euro, "Raze");     
      }
      else if (attack_count > 13 && attack_count <= 15) {    
        create_unit_upgrade(euro, x, y, "horse archers", 1); 
        //create_unit_in_group(euro, x, y, "light horse", 1);             
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 15 && attack_count <= 18) {    
        create_unit_upgrade(euro, x, y, "light horse", 1);             
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);
        group_stance_order(euro, "Raze");
      }
      else if (attack_count > 18 && attack_count <= 22) {
        create_unit_upgrade(euro, x, y, "light horse", 1);
        create_unit_in_group(euro, x, y, "horse archers", 1);    
        if (attack_count > 20) create_unit_in_group(euro, x, y, "cataphract", 1);     
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);         
        group_stance_order(euro, "Raze");
      }
      else if (attack_count == 23) { 
        create_unit_upgrade(euro, x, y, "light horse", 1);
        create_unit_in_group(euro, x, y, "horse archers", 1);     
        create_unit_in_group(euro, x, y, "cataphract", 1);             
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);
        group_stance_order(euro, "Raze");
      }
    } // END TOUGHER

    // toughest
    else if (diff == 6) {
      //add the units
      if (attack_count == 0) {  
        create_unit_upgrade(euro, x, y, "light horse", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 0 && attack_count <= 3) {   
        create_unit_upgrade(euro, x, y, "horse archer", 1); 
        group_stance_order(euro, "Raid");
      }
      else if (attack_count == 4) {   
        create_unit_upgrade(euro, x, y, "light horse", 1);
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);

        group_stance_order(euro, "Raze");
      }
      else if (attack_count > 4 && attack_count <= 6) {    
        //create_unit_upgrade(euro, x, y, "light horse", 1);
        create_unit_upgrade(euro, x, y, "cataphract", 1);
        group_stance_order(euro, "Raid");
      }
      else if (attack_count > 6 && attack_count <= 9) {     
        create_unit_upgrade(euro, x, y, "cataphract", 1);
        group_stance_order(euro, "Raid");     
      }
      else if (attack_count == 10) {         
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        group_stance_order(euro, "Raze");  
      }
      else if (attack_count > 10 && attack_count <= 13) {    
        create_unit_upgrade(euro, x, y, "horse archers", 1);
        create_unit_in_group(euro, x, y, "cataphract", 1);
        group_stance_order(euro, "Raid");  
      }
      else if (attack_count > 13 && attack_count <= 27) {   
        create_unit_upgrade(euro, x, y, "horse archers", 1);  
        if (attack_count > 21) create_unit_in_group(euro, x, y, "light horse", 1);
        if (attack_count > 23) create_unit_in_group(euro, x, y, "cataphract", 1);
        create_unit_in_group(euro, x, y, "general", 1);
        group_stance_order(euro, "Raze");
      }    
      if (attack_count > 19) {
        catapult = create_unit_in_group(euro, x, y, "catapult", 1);
        group_guard_order(euro, euro, catapult);  
      }         
    } // END TOUGHEST

    group_attack_to_order(euro, center_x, center_y);
  } // if (timer_expired("units2")

  if (timer_expired("units")) {
    //////print_game_msg("attack count is: " + attack_count);
    //find a spot
    side = rand_int(0, 3);
    switch (side) {
    case 0 :
      x = 1;
      y = rand_int(1, get_map_size() - 1);
      wagon_x = center_x - 20;
      wagon_y = center_y;
      break;
    case 1 :
      x = get_map_size() - 1;
      y = rand_int(1, get_map_size() - 1);
      wagon_x = center_x;
      wagon_y = center_y + 20;
      break;
    case 2 :
      x = rand_int(1, get_map_size() - 1);
      y = 1;
      wagon_x = center_x;
      wagon_y = center_y - 20;
      break;
    case 3 :
      x = rand_int(1, get_map_size() - 1);
      y = get_map_size() - 1;
      wagon_x = center_x;
      wagon_y = center_y + 20;
      break;
    }

    clear_group(euro);
    catapult_in_group = 0;
    if (object_health(native, my_capital_id) < 50 && diff < 3) create_unit_upgrade(euro, x, y, "light horse", 1);
    else {
      switch (diff) {
        case 1 : //EASIEST
          //add the units
          if (attack_count >= 0 && attack_count <= 1) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 20);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count >= 2 && attack_count <= 10) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count == 11) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);  
            //create_unit_in_group(euro, x, y, "horse archers", 1);
            //create_unit_in_group(euro, x, y, "cataphract", 1);
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count > 11 && attack_count <= 18) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            //create_unit_upgrade(euro, x, y, "light horse", 1);
            create_unit_upgrade(euro, x, y, "horse archer", 1);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 18 && attack_count <= 30) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            create_unit_in_group(euro, x, y, "supply wagon", 1);
            set_timer("units", 15);     
            group_stance_order(euro, "Raze");    
          }
          else if (attack_count > 30 && attack_count <= 39) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            create_unit_upgrade(euro, x, y, "light horse", 1);        
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 39 && attack_count <= 45) {
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            create_unit_upgrade(euro, x, y, "cataphract", 1);             
            set_timer("units", 15);
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count > 45 && attack_count <= 48) {
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            //create_unit_upgrade(euro, x, y, "light horse", 1);  
            create_unit_upgrade(euro, x, y, "horse archer", 1);
            create_unit_in_group(euro, x, y, "supply wagon", 1);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count == 49) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            create_unit_upgrade(euro, x, y, "cataphract", 1);  
            //create_unit_in_group(euro, x, y, "horse archers", 1);                  
            create_unit_in_group(euro, x, y, "general", 1);
            create_unit_in_group(euro, x, y, "supply wagon", 1);
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
            catapult_in_group = 1;
          } 
          break;
        case 2 : //EASY
          //add the units
          if (attack_count >= 0 && attack_count <= 1) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 20);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count >= 2 && attack_count <= 10) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count == 11) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);  
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            //create_unit_in_group(euro, x, y, "cataphract", 1);
            //create_unit_in_group(euro, x, y, "light horse", 1);
            set_timer("units", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count > 11 && attack_count <= 18) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "horse archer", 1);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 18 && attack_count <= 30) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            create_unit_in_group(euro, x, y, "supply wagon", 1);
            set_timer("units", 15);     
            group_stance_order(euro, "Raze");    
          }
          else if (attack_count > 30 && attack_count <= 39) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            create_unit_upgrade(euro, x, y, "light horse", 1);        
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 39 && attack_count <= 45) {
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            create_unit_upgrade(euro, x, y, "cataphract", 1);             
            set_timer("units", 15);
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count > 45 && attack_count <= 48) {
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            //create_unit_upgrade(euro, x, y, "light horse", 1);  
            create_unit_upgrade(euro, x, y, "horse archer", 1);
            create_unit_in_group(euro, x, y, "supply wagon", 1);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count == 49) { 
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            //create_unit_upgrade(euro, x, y, "cataphract", 1);  
            create_unit_upgrade(euro, x, y, "horse archers", 1);                  
            create_unit_in_group(euro, x, y, "general", 1);
            create_unit_in_group(euro, x, y, "supply wagon", 1);
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);
            set_timer("units", 15);
            group_stance_order(euro, "Raze");
            catapult_in_group = 1;
          } 
          break;
        case 3 : //moderate
          //add the units
          if (attack_count >= 0 && attack_count <= 1) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count >= 2 && attack_count <= 4) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 30);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count > 4 && attack_count <= 5) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count == 6) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            //create_unit_in_group(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 6 && attack_count <= 7) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            group_stance_order(euro, "Raid");
          }
          else if (attack_count > 7 && attack_count <= 11) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            //create_unit_upgrade(euro, x, y, "horse archers", 1);
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 35);     
            set_timer("units2", 15);
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count >= 12 && attack_count <= 14) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 30);   
            set_timer("units2", 1);  
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count > 14 && attack_count <= 16) {              
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);
            set_timer("units", 30);   
            set_timer("units2", 3);  
            group_stance_order(euro, "Raze");  
            catapult_in_group = 1;   
          }
          else if (attack_count > 16 && attack_count <= 25) {   
            create_unit_upgrade(euro, x, y, "cataphract", 1); 
            if (attack_count > 22) create_unit_in_group(euro, x, y, "horse archers", 1);                  
            if (attack_count > 22) create_unit_in_group(euro, x, y, "general", 1);  
    
            if (attack_count <= 22) set_timer("units", 30);
            if (attack_count > 22) set_timer("units", 25);
            set_timer("units2", 8);
            group_stance_order(euro, "Raze");
          } 
          if (attack_count > 22) {
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);    
            catapult_in_group = 1;
          }    
          if (attack_count > 16 && attack_count <= 25) {   
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);  
          }       
          break;
        case 4: //tough
          //add the units
          if (attack_count >= 0 && attack_count <= 1) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count >= 2 && attack_count <= 4) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 30);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count > 4 && attack_count <= 5) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count == 6) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            //create_unit_in_group(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 6 && attack_count <= 7) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            group_stance_order(euro, "Raid");
          }
          else if (attack_count > 7 && attack_count <= 11) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            //create_unit_upgrade(euro, x, y, "horse archers", 1);
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 35);     
            set_timer("units2", 15);
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count >= 12 && attack_count <= 14) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 30);   
            set_timer("units2", 1);  
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count > 14 && attack_count <= 16) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            catapult_g = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult_g);   
            set_timer("units", 30);   
            set_timer("units2", 3);  
            group_stance_order(euro, "Raze");     
          }
          else if (attack_count > 16 && attack_count <= 25) {   
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            create_unit_upgrade(euro, x, y, "cataphract", 2); 
            if (attack_count > 22) create_unit_in_group(euro, x, y, "horse archers", 1);                  
            if (attack_count > 22) create_unit_in_group(euro, x, y, "general", 1);    
            if (attack_count <= 22) set_timer("units", 30);
            if (attack_count > 22) set_timer("units", 10);
            group_stance_order(euro, "Raze");
          } 
          if ((attack_count > 22)) {
            catapult_g = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult_g);   
          }
          break;
        case 5: //tougher
          //add the units
          if (attack_count >= 0 && attack_count <= 1) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count >= 2 && attack_count <= 4) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 30);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count > 4 && attack_count <= 5) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count == 6) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            //create_unit_in_group(euro, x, y, "light horse", 1);
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);   
            set_timer("units", 35);
            set_timer("units2", 15);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 6 && attack_count <= 7) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 35);
            set_timer("units2", 15);
            group_stance_order(euro, "Raid");
          }
          else if (attack_count > 7 && attack_count <= 11) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            //create_unit_upgrade(euro, x, y, "horse archers", 1);
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 35);     
            set_timer("units2", 15);
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count >= 12 && attack_count <= 14) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 30);   
            set_timer("units2", 1);  
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count > 14 && attack_count <= 16) {     
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);   
            set_timer("units", 30);   
            set_timer("units2", 3);  
            group_stance_order(euro, "Raze");     
          }
          else if (attack_count > 16 && attack_count <= 18) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            create_unit_upgrade(euro, x, y, "cataphract", 1);   
            set_timer("units", 30);
            set_timer("units2", 8);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 18 && attack_count <= 25) {   
            if (!map_is_land(x, y)) create_unit_upgrade(euro, x, y, "bark", 1);
            if (!map_is_land(x, y)) create_unit_in_group(euro, x, y, "trireme", 1);
            group_attack_to_order(euro, center_x, center_y);
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);    
            create_unit_upgrade(euro, x, y, "horse archers", 1);   
            create_unit_in_group(euro, x, y, "cataphract", 2);           
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);   
            if (attack_count <= 22) set_timer("units", 30);
            if (attack_count > 22) set_timer("units", 25);
            set_timer("units2", 5);
            group_stance_order(euro, "Raze");
          }
          break;
        case 6 : //toughest
          //add the units
          if (attack_count == 0) {  
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            }    
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 30);
            set_timer("units2", 10);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count > 0 && attack_count <= 4) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "light horse", 1);
            set_timer("units", 30);
            set_timer("units2", 10);
            if (raze_or_raid == 0) {
              raze_or_raid = 1;
              group_stance_order(euro, "Raze");
            }
            else if (raze_or_raid == 1) {
              raze_or_raid = 0;
              group_stance_order(euro, "Raid");
            }
          }
          else if (attack_count == 5) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);
            create_unit_upgrade(euro, x, y, "light horse", 1);
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);   
            set_timer("units", 30);
            set_timer("units2", 10);
            group_stance_order(euro, "Raze");
          }
          else if (attack_count > 5 && attack_count <= 8) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              group_attack_to_order(euro, center_x, center_y);
            } 
            create_unit_upgrade(euro, x, y, "horse archer", 1);
            set_timer("units", 30);
            set_timer("units2", 10);
            group_stance_order(euro, "Raid");
          }
          else if (attack_count > 8 && attack_count <= 12) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);
            //create_unit_upgrade(euro, x, y, "light horse", 1);
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            set_timer("units", 30);  
            set_timer("units2", 6);   
            group_stance_order(euro, "Raze");     
          }
          else if (attack_count == 13) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }  
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);        
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            //create_unit_in_group(euro, x, y, "light horse", 1);
            // create_unit_in_group(euro, x, y, "cataphract", 1);
            set_timer("units", 30);    
            set_timer("units2", 5); 
            group_stance_order(euro, "Raze");  
          }
          else if (attack_count > 13 && attack_count <= 16) {    
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }          
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);
            create_unit_upgrade(euro, x, y, "horse archers", 1);
            create_unit_in_group(euro, x, y, "light horse", 1);
            //create_unit_in_group(euro, x, y, "cataphract", 1);
            set_timer("units", 30);     
            set_timer("units2", 3);
            group_stance_order(euro, "Raze");  
          }
          else if ((attack_count > 16 && attack_count <= 22)) {   
            if (!map_is_land(x, y)) {
              create_unit_upgrade(euro, x, y, "bark", 1);
              create_unit_in_group(euro, x, y, "trireme", 1);
              group_attack_to_order(euro, center_x, center_y);
            }
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);
            create_unit_upgrade(euro, x, y, "cataphract", 1);
            create_unit_in_group(euro, x, y, "general", 1);
            set_timer("units", 30);
            set_timer("units2", 6);
            group_stance_order(euro, "Raze");
          }
          else if (((attack_count > 22  && attack_count <= 26))) { 
            if (!map_is_land(x, y)) create_unit_upgrade(euro, x, y, "bark", 1);
            if (!map_is_land(x, y)) create_unit_in_group(euro, x, y, "trireme", 1);
            group_attack_to_order(euro, center_x, center_y);
            wagon = create_unit_upgrade(euro, x, y, "supply wagon", 1);
            unit_move_order(euro, wagon, wagon_x, wagon_y);          
            create_unit_upgrade(euro, x, y, "cataphract", 1);  
            create_unit_in_group(euro, x, y, "light horse", 1);
            create_unit_in_group(euro, x, y, "horse archers", 2);                  
            //if (start_age == 4) create_unit_in_group(euro, x, y, "cataphract", 1);
            catapult = create_unit_in_group(euro, x, y, "catapult", 1);
            group_guard_order(euro, euro, catapult);   
            set_timer("units", 25);
            set_timer("units2", 5);
            group_stance_order(euro, "Raze");
          } 
          break;
      } // switch (diff)
    } // else

    attack_count++;
    impale = rand_int(1,4);
    if (diff == 2 && impale < 4) impale_units = 1;
    else if (diff == 3 && impale < 4 && age(euro) == 0) impale_units = 1;
    else if (diff == 3 && impale < 3 && age(euro) > 0) impale_units = 1;
    else if (diff == 1) impale_units = 1;
    else if (catapult_in_group == 1) impale_units = 0;
    else impale_units = 0;
    if (diff == 3 && time_later_than(10)) impale = 2;
    if (diff < 4 && impale_units == 1) {
      attack_here = find_build(native, "tower");
      if (attack_here <= 0) {
        attack_here = find_build(native, "farm");
        if (attack_here <= 0) {
          attack_here = find_build(native, "");
          if (attack_here == my_capital_id) attack_here = find_build(native, "");
        }
      }
      set_seen(euro, native, attack_here);
      group_attack_order(euro, native, attack_here);
    } // if (diff < 4
    else group_attack_to_order(euro, center_x, center_y);
  } // if (timer_expired("units")

  trigger middle_attack(timer_expired("attack_cor")) {
    for (n = num_military_units(euro); n > 0; n--) {
      unit = find_military(euro);
      impale = rand_int(1,4);
      if (diff == 2 && impale < 4) impale_units = 1;
      else if (diff == 3 && impale < 4 && age(euro) == 0) impale_units = 1;
      else if (diff == 3 && impale < 3 && age(euro) > 0) impale_units = 1;
      else if (diff == 1) impale_units = 1;
      else if (catapult_in_group == 1) impale_units = 0;
      else impale_units = 0;
      if (diff == 3 && time_later_than(10)) impale = 2;
      if (diff < 4 && impale_units == 1) {
        attack_here = find_build(native, "tower");
        if (attack_here <= 0) {
          attack_here = find_build(native, "farm");
          if (attack_here <= 0) {
            attack_here = find_build(native, "");
            if (attack_here == my_capital_id) attack_here = find_build(native, "");
          }
        }
        set_seen(euro, native, attack_here);
        unit_attack_order(euro, unit, native, attack_here);
      } // if (diff < 4
      else unit_attack_to_order(euro, unit, center_x, center_y);
    } // for (n = num_military_units(euro)
    enable_trigger("supply_stop");
    enable_trigger("middle_attack");
    set_timer("attack_cor", 30);
    if (diff > 4) {
      set_timer("attack_cor", 26);
    }
  } // trigger middle_attack

  trigger supply_stop() {
    for (n = num_type(euro, "supply wagon"); n > 0; n--) {
      supply = find_unit(euro, "supply wagon");
      unit_clear_orders(euro, supply);
    }
    disable_trigger("supply_stop");
  } // trigger supply_stop

  cur_time = time_min();
  trigger (cur_time >= end_time) {
    if (num_cities(euro) > 0) defeat(native);
    else victory(native);
  } // trigger (cur_time >= time_limit

// ********************************
// Do something with idle citizens
  citizen = find_idle_citizen(euro);
  trigger idle_citizen(citizen > -1) {
    building = find_inactive_build(euro, "small city");
    if (building > -1) {
      citizen_repair_order(euro, citizen, building);
      enable_trigger ("idle_citizen");
    } // if (building > -1
    else {
      building = find_build (euro, "small city");
      if (building > -1) {
        x = object_position_x(euro, building);
        y = object_position_y(euro, building);
        unit_move_order(euro, citizen, x, y);
        enable_trigger ("idle_citizen");
      } // if (building > -1
      else {
        citizen2 = citizen;
        set_timer("idle_citizen", 10);
        enable_trigger ("idle_citizen10");
        idletoggle = 0;
      }
    } // else {
  } // trigger idle_citizen
  
  trigger idle_citizen10 (timer_expired ("idle_citizen")) {
    if (is_idle(euro, citizen2)) {
      give_good(euro, "food", 100);
      give_good(euro, "wood", 100);
      building = place_city_with_cost(euro);
      citizen_repair_order(euro, citizen, building);
    } // if (is_idle(citizen2
    enable_trigger ("idle_citizen");
  } // trigger idle_citizen10

// *****************************************************
// Destroy cities and buildings when they are taken over
  trigger eurocity_gone(city_captured(euro, "")) {
    for (n = num_cities(native); n > 0; n--) {
      city_name = find_city_name(native);
      if (city_being_assimilated(native, city_name)) {
        for (step = 1; step < 12; step++) {
          switch(step){
            case 1:
              building_name = "Temple";
              break;
            case 2:
              building_name = "Market";
              break;
            case 3:
              building_name = "Library";
              break;
            case 4:
              building_name = "Senate";
              break;
            case 5:
              building_name = "University";
              break;
            case 6:
              building_name = "Farm";
              break;
            case 7:
              building_name = "Woodcutter's Camp";
              break;
            case 8:
              building_name = "Mine";
              break;
            case 9:
              building_name = "Granary";
              break;
            case 10:
              building_name = "Smelter";
              break;
            case 11:
              building_name = "Lumber Mill";
              break;
          } // switch (step)
          for (m = num_city_buildings(native, city_name, building_name, 1); m > 0; m--) {
            building = find_build_at_city(native, city_name, building_name, 1);
            destroy_building(native, building);
          } // for (m = num_city_buildings
        } // for (step = 1
        destroy_building(native, find_city_id(city_name));
      } // if (city_being_assimilated
    } // for (n = num_cities
    enable_trigger ("eurocity_gone");
  } // trigger eurocity_gone

// ******************************************
// Stop making cities when 4 minutes are left
  trigger two_minute_warning(time_later_than(11)) {
    cities_off = 1;
  } // trigger two_minute_warning

  inactive = find_inactive_build(euro, "small city");
  if (cities_off == 1 && inactive > 0) {
    while (inactive > 0) {
      destroy_building(euro, inactive);
      inactive = find_inactive_build(euro, "small city");
    }
  } // if (cities_off == 1

// **************************************
// Place reveal points at new euro cities
  if (num_cities(euro) != city_count) {
    if (num_cities(euro) > city_count) {
      show_notice($S("The foreigners have established a colony!"), "city_notice", native);
      clear_reveal_points(euro);
      for (i = city_count; i > 0; i--) {
        building = find_build(euro, "small city");
        if (building < 0) building = find_build(euro, "large city");
        if (building < 0) break;
        x = object_position_x(euro, building);
        y = object_position_y(euro, building);
        add_reveal_point(native, x, y, 5);
      }
    } // if (num_cities(euro) >
    city_count = num_cities(euro);
  } // if (num_cites(euro

// ******************************************
// No military buildings for lower difficulty
  if (diff < 3) {
    barracks = find_inactive_build(euro, "barracks");
    stable = find_inactive_build(euro, "stable");
    tower = find_inactive_build(euro, "tower");
    fort = find_inactive_build(euro, "fort");
    if (barracks > 0) destroy_building(euro, barracks);
    if (stable > 0) destroy_building(euro, stable);
    if (tower > 0) destroy_building(euro, tower);
    if (fort > 0) destroy_building(euro, fort);
  } // if (diff < 3
}