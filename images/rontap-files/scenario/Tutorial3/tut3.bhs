// Josh Mitnick

include "tut_lib.bhs"



scenario {

  //Nation names==============================================
  labels {
    HUMAN,
    COMPUTER,
  }
  //==========================================================

  //Global variables==========================================
  static Workers_at_mine     = 0;
  static Workers_at_wood     = 0;
  static Mine_ID             = -1;
  static Wood_ID             = -1;
  static Market_ID           = -1;
  static New_City_ID         = -1;
  static pop_cap             = -1;
  static start_comp_health   = -1;
  static objective_delay     = 90;
  static amiens_id           = find_city_id($S("Amiens"));
  static amiens_x            = object_position_x( COMPUTER, amiens_id );
  static amiens_y            = object_position_y( COMPUTER, amiens_id );
  static amiens_start_health = object_health( COMPUTER, amiens_id );
  static amiens_library_id   = find_build_at_city( COMPUTER, "Amiens", "library", 0);
  static amiens_library_start_health = object_health(COMPUTER, amiens_library_id );
  static compienge_id        = find_city_id($S("Compienge"));
  static compienge_x         = object_position_x( COMPUTER, compienge_id );
  static compienge_y         = object_position_y( COMPUTER, compienge_id );
  static french_barracks_id  = find_build( COMPUTER, "barracks");
  static french_stable_id    = find_build( COMPUTER, "stable");
  static english_barracks_id = find_build( HUMAN, "barracks");
  static english_stable_id   = find_build( HUMAN, "stable");
  static english_siege_factory_id = find_build( HUMAN, "siege_factory");
  static french_troop_id     = -1;
  static has_zoomed_out      = false;
  static fast_wood_learner   = false;
  static knight_count        = 0;
  static treb_count          = 0;
  static longbow_count       = 0;
  static knights_built       = false;
  static treb_built          = false;
  static longbow_built       = false;
  static army_defeated       = false;
  static compienge_now_captured = false;
  static compienge_defeated  = false;
  static computer_library_id = -1;
  static computer_temple_id  = -1;
  static computer_granary_id = -1;
  static computer_library_health = -1;
  static computer_temple_health  = -1;
  static computer_granary_health = -1;
  static counter_attack_green_light = false;
  static player_queued       = false;
  static citizen_rally_x     = 53;
  static citizen_rally_y     = 62;
  static ready_to_destroy_buildings = false;
  static warning_point_x     = 89;
  static warning_point_y     = 96;
  static warning_range       = 23;
  static failure_range       = 17;
  static citizen_count       = -1;
  static citizen_1           = -1;
  static citizen_2           = -1;
  //==========================================================


  //Set initial configuration=================================
  run_once {
    set_auto_peasant_level( 3 );
    bubble_text_hide();
    show_all_map_enable(HUMAN);
    disable_all_triggers();
    disable_combat_ai( COMPUTER );
    disable_unit_ai( COMPUTER, -1 );

    enable_trigger("intro_compienge");
    enable_trigger("warning");
    enable_trigger("failure");
    //enable_trigger("build_army");
    //enable_trigger("army_selected");
    enable_trigger("check_zoom_out");

    enable_trigger("counter_attack");

    //enable_trigger("intro_double_click_select");
    //enable_trigger("intro_6");
    //enable_trigger("amiens_attacked");
    //enable_trigger("show_wood");
    enable_trigger("Objective_Reminder");


    set_timer("progress_check",objective_delay);
    set_base_rate (HUMAN, "Food",    0);
    set_base_rate (HUMAN, "Timber", 60);
    set_base_rate (HUMAN, "Metal",   0);
    set_base_rate (HUMAN, "Gold",    0);

    set_object_type_max_health( "barracks", 500 );
    set_object_type_max_health( "stable",  500 );
    set_object_type_max_health( "Library", 40000 );

    set_type_build_time("Woodcutter's Camp", type_build_time("Woodcutter's Camp") / 3 );
    set_type_build_time("Mine", type_build_time("Mine") / 3 );
    set_type_build_time("Citizen", type_build_time("Citizen") / 2 );
    set_type_build_time("farm", type_build_time("farm") / 5 );
    set_type_build_time("Knight", type_build_time("Knight") / 10 );
    set_type_build_time("King's Longbowmen", type_build_time("King's Longbowmen") / 8 );
    set_type_build_time("Trebuchet", type_build_time("Trebuchet") / 10 );
    set_type_build_time("Barter", type_build_time("Barter") / 4 );
    set_type_build_time("The Art of War", type_build_time("The Art of War") / 5 );

    disable_type("slingers");
    disable_type("hoplites");
    disable_type("bowmen");
    disable_type("scout");
    disable_type("catapult");
    disable_type("supply wagon");
    disable_type("general");
    disable_type("spy");
    disable_type("explorer");

    for (i = 0; i < num_military_units(HUMAN); i++ ) {
      add_to_group(HUMAN, find_all_military(HUMAN));
    }

    group_stance_order(HUMAN, "defensive");

    is_compienge_shown = true;
  }

  // ==========
  // Lost catch
  // ==========

  trigger Objective_Reminder( timer_expired("progress_check") && sound_finished() ) {
    clear_all_arrows();
    right = get_objectives_right();
    top   = get_objectives_top();

    if (right >= 0 && top >= 0) {
      draw_screen_arrow_line( right + 75, top - 75, right, top, 10 );
      play_sound("objective.wav");
      if(objective_delay < 300) {
       objective_delay = objective_delay * 2;
      } else {
       objective_delay = 300;
      }

    }
    set_timer("progress_check", objective_delay);
    enable_trigger("Objective_Reminder");
  }


  // ==============
  // end Lost catch
  // ==============

  // ==============
  // check zoom out 
  // ==============

  trigger check_zoom_out( is_zoomed_out() ) {
    has_zoomed_out = true;
  }

  // ==================
  // end check zoom out
  // ==================

  // =====
  // Intro
  // =====

  trigger intro_compienge() { 
    cutscene_begin();
   // WAV:  We are to attack the French city of Compienge.
   // Unfortunately, the French have discovered our intent and have rallied an army of Arquebusiers, a new type of 
   // foot troop that uses gunpowder.
   // Our army is well trained, but is outnumbered by the French troops.  There is no way we can 
   // defeat them if we immediately attack the city. 
    set_explored(HUMAN, compienge_x, compienge_y, 25);
    move_camera(get_camera_x(), get_camera_y());
    play_sound("intro1.wav");
    enable_trigger("intro_amiens");
    //enable_trigger("show_compienge");
    set_timer("progress_check", objective_delay);
  }

  trigger intro_amiens( sound_finished() ) {
    //disable_trigger("show_compienge");
    center_camera_on(COMPUTER, amiens_id);
    set_explored(HUMAN, amiens_x, amiens_y, 25);
    play_sound("intro2.wav");
    
    // WAV:  In their hasty preparations to defend Compienge, the French have left the city of Amiens undefended.
  // Instead of attacking Compienge directly, we should first attack and capture Amien.  We can gather resources there to build our army,
  // then lead our new larger fighting force to defeat the French at Compienge.
    enable_trigger("intro_3");
    set_timer("progress_check", objective_delay);
  }
  
  trigger intro_3( sound_finished() ) {
    show_all_map_disable(HUMAN);
    is_amiens_shown = false;
    //disable_trigger("show_amiens");
  // WAV:  This your army.  Their numbers may be few, but they should be able to take Amiens easily.
    play_sound("army_intro.wav");
    move_camera(38,30);
    enable_trigger("intro_5");
    set_timer("progress_check", objective_delay);
  }

  trigger intro_5( sound_finished() ) {
    is_amiens_shown = false;
    //disable_trigger("show_amiens");
    cutscene_end();
    //center_camera_on( HUMAN, find_unit( HUMAN, "Pikemen") );
    move_camera( 38, 29 );
    // WAV:  Select your entire army using a left click drag box.
    add_objective($S("Select your entire army using a left click drag box."), "select_army", "select_army.wav");
    play_objective_sound("select_army");
    enable_trigger("army_selected");
    enable_trigger("some_army_selected");
    enable_trigger("destroy_barracks");
    clear_selection();
    //enable_trigger("military_buildings_selected");
    set_timer("progress_check", objective_delay);
  }

  /*
  trigger military_buildings_selected( sound_finished() && ( object_selected( HUMAN, english_barracks_id ) || object_selected( HUMAN, english_stable_id ) || object_selected( HUMAN, english_siege_factory_id ) ) ) {
    // WAV:  We have military buildings on French soil, but they require us to have a city nearby in order to build units in them.
    //       Once we conquer Amiens, we will be able to use them.
    play_sound("military_buildings_selected.wav");
    set_timer("progress_check", objective_delay);
  }
  */

  trigger army_selected( all_military_selected( HUMAN ) ) {
    objective_complete("select_army");

    add_objective($S("Attack Amiens."), "attack_amiens", "attack_amiens.wav");
    play_objective_sound("attack_amiens");
    //WAV:  Now direct your units to attack by right clicking on Amiens
    enable_trigger("amiens_attacked");
    enable_trigger("army_deselected");
    enable_trigger("some_army_selected");
    enable_trigger("other_buildings_damaged");
    set_timer("progress_check", objective_delay);
  }

  trigger army_deselected( sound_finished() && !any_object_selected( HUMAN ) ) {
    play_sound("losearmy_rclick.wav");
  //WAV: Left-clicking on the map will clear all selections. To regain control of your army, drag-select around them, then 
  //     right-click to move them. 
    set_timer("progress_check", objective_delay);
  }

  trigger some_army_selected( any_object_selected(HUMAN ) && !all_military_selected(HUMAN )  ) {
    play_sound("not_all_selected3.wav");
    // WAV:  You have selected some, but not all of your military units.  Use a left click drag box to select all of them.  
    set_timer("progress_check", objective_delay);
  }

  trigger amiens_attacked( object_health( COMPUTER, amiens_id ) < ( 7 * amiens_start_health / 8 ) ) {
    disable_trigger("army_deselected");
    disable_trigger("some_army_selected");
    objective_complete("attack_amiens");

    //WAV: 
    //      When attacking cities or other buildings, it is often useful to bring along siege units like trebuchets.
    //      They specialize in damaging buildings from a good distance.
    treb_id = find_unit( HUMAN, "Trebuchet");
    treb_x = object_position_x( HUMAN, treb_id);
    treb_y = object_position_y( HUMAN, treb_id );
    ping( HUMAN, HUMAN, treb_x, treb_y );
    if( is_on_screen( treb_x, treb_y ) ) {
      center_camera_on( HUMAN, treb_id );
    }
    play_sound("notice_trebuchets.wav");
    enable_trigger("amiens_captured");
    set_timer("progress_check", objective_delay);
  }

  /*
  trigger intro_5( sound_finished() ) {
    center_camera_on(HUMAN, find_unit( HUMAN, "Trebuchet" ) );
    // The most effective way to damage and destroy buildings is to attack them with siege units.
    // Our siege units are horse-drawn Trebuchets.  We will send in the Trebuchets to attack from a 
  // distance before we capture the city with our foot troops.
    play_sound("trebs_intro.wav");
    enable_trigger("intro_6");
  }

  trigger intro_6( sound_finished() ) {
    add_objective($S("Select all of your trebuchets using a left-click drag box."),"select_trebs", "trebs_select.wav");
    play_objective_sound("select_trebs");
    // WAV:  Select all of your trebuchets using a left click drag box
    // ping trebuchet
    enable_trigger("trebs_selected");
  }

  trigger trebs_selected( ( num_unit_selected(HUMAN) == num_type( HUMAN, "Trebuchet") ) && ( all_object_type_selected(HUMAN, $S("Trebuchet)) ) ) {
    // WAV:  Good, now direct your trebuchets to attack Amiens by right clicking on the city
    objective_complete("select_trebs");
    add_objective($S("Right click on Amien to have your trebuchets attack."),"trebs_attack", "trebs_attack.wav");
    play_objective_sound("trebs_attack");
    enable_trigger("trebs_attacking");
    enable_trigger("amiens_damaged");
    enable_trigger("other_buildings_damaged");
  }

  trigger trebs_attacking( type_has_target_order( HUMAN, "Trebuchet" ) ) {
    objective_complete("trebs_attack");
    //WAV:  Trebuchets and other siege units must pack up to move then unpack when they want to attack.  This makes them a little
    //      slow and unwieldly, but wait till you see them in action!
    play_sound("trebs_packing.wav");
  }

  trigger amiens_damaged( object_health (COMPUTER, amiens_id) < amiens_start_health ) {
    // WAV:  Good.  Look at the health bar near Amiens to see how much damage the Trebuchets are dealing.
    //       They will reduce Amiens in very little time.
    play_sound("trebs_attack_city.wav");
    enable_trigger("amiens_zero_health");
    enable_trigger("amiens_captured");
  }

  trigger amiens_zero_health( sound_finished() && ( object_health( COMPUTER, amiens_id ) == 0 ) && !city_being_assimilated( HUMAN, $S("Amiens")) ) {
    // WAV:  Excellent work!  Now that your trebuchets have leveled Amiens, we can capture it by moving foot troops nearby.  
    //       Select your foot troops (and your knights) and move them to Amiens.
    add_objective($S("Move up your foot and horse units to capture Amiens."), "capture_amiens", "capture_amiens.wav");
    play_objective_sound("capture_amiens");
    enable_trigger("amiens_captured");
  }
  */

  trigger amiens_captured( sound_finished() && city_being_assimilated( HUMAN, $S("Amiens")) ) {
    //disable_trigger("amiens_zero_health");
    disable_trigger("other_buildings_damaged");
    objective_complete("capture_amiens");
    disable_all_unit_ai(HUMAN);
    amiens_id = find_city_id( $S("Amiens") );
    // WAV:  Good job!  Amiens is now under British rule! 
    play_sound("amiens_captured.wav");
    enable_trigger("select_city_assimilate");
    set_timer("progress_check", objective_delay);
  }

  trigger other_buildings_damaged( sound_finished() && ( object_health( COMPUTER, amiens_library_id ) < (amiens_library_start_health * 0.9) ) ) {
    //WAV:  Hmmmmm.  Lets not destroy the library.  Once we capture Amiens, we gain control of the library and we can use it to research new technology.
    //      Turning it into a pile of rubble won't help us.
    play_sound("save_library.wav");
  }

  trigger select_city_assimilate( sound_finished() ) {
    // WAV: Select the city of Amiens
    add_objective($S("Select Amiens."), "select_amiens_assimilate", "select_amiens_assimilate.wav");
    play_objective_sound( "select_amiens_assimilate");
    enable_trigger("assimilation_intro");
    set_timer("progress_check", objective_delay);
  }

  trigger assimilation_intro( object_selected( HUMAN, amiens_id ) && sound_finished() ) {
    objective_complete("select_amiens_assimilate");
    // WAV:  While Amiens is now a British colony, it has to be assimilated before it is completely integrated into our nation.
    play_sound("assimilation_intro.wav");
    enable_trigger( "look_at_assimilate" );
    set_timer("progress_check", objective_delay);
  }

  trigger look_at_assimilate( sound_finished() )  {
    build_display_left = get_button_right("left_window");
    build_display_top  = get_button_top("left_window");
    if( object_selected( HUMAN, amiens_id ) ) {
      draw_screen_arrow_line( build_display_left + 100, build_display_top - 100, build_display_left, build_display_top, 0 );
    }
    // WAV: The display in the bottom left shows how long until Amiens is completely under our control.
    play_sound("assimilation_display.wav");
    enable_trigger( "talk_ownership");
    enable_trigger("amiens_unselected");
    set_timer("progress_check", objective_delay);
  }

  trigger amiens_unselected( !object_selected( HUMAN, amiens_id ) ) {
    clear_all_arrows();
  }

  trigger talk_ownership( sound_finished() ) {
    disable_trigger("amiens_unselected");
    clear_all_arrows();
    // WAV: When you capture a city, you gain ownership of any non-military buildings near the city,
    //      but you will not be able to use them until the assimilation is complete.
    play_sound("gain_ownership.wav");
    enable_trigger("show_library");
    set_timer("progress_check", objective_delay);
  }

  trigger show_library( sound_finished() ) {
    // WAV:  Notice the library has changed from blue to red, indicating it is now under English control.
    amiens_library_id = find_build( HUMAN, "Library" );
    ping( HUMAN, HUMAN, object_position_x( HUMAN, amiens_library_id ), object_position_y( HUMAN, amiens_library_id) );
    center_camera_on( HUMAN, amiens_library_id );
    play_sound("show_library.wav");
    enable_trigger("show_barracks");
    set_timer("progress_check", objective_delay);
  }

  trigger show_barracks( sound_finished() ) {
    // WAV:  Military buildings, like the barracks and stable, remain under French control, but are easier to destroy because they are stranded in your territory. 
    ping( HUMAN, HUMAN, object_position_x( COMPUTER, french_barracks_id ), object_position_y( COMPUTER, french_barracks_id ) );
    center_camera_on( COMPUTER, french_barracks_id );
    play_sound("military_buildings.wav");
    enable_trigger("attack_barracks");
    set_timer("progress_check", objective_delay);
  }

  trigger attack_barracks( sound_finished() ) {
    center_camera_on( HUMAN, find_idle_military( HUMAN ) );
    enable_all_unit_ai(HUMAN);
    ready_to_destroy_buildings = true;

    if( find_build(COMPUTER, "barracks") || find_build( COMPUTER, "stable" ) ) {
      play_sound("attack_barracks.wav");
      // WAV:  The French barracks and stable are of no use to us.  Have your troops destroy them.  
      if( find_build( COMPUTER, "barracks" ) ) {
        add_objective($S("Destroy the barracks."), "destroy_barracks", "destroy_buildings.wav");
      }

      if( find_build( COMPUTER, "stable" ) ) {
        add_objective($S("Destroy the stable."), "destroy_stable", "destroy_buildings.wav");
      }
    }
  
    enable_trigger("destroy_barracks");
    enable_trigger("destroy_stable");
    //enable_trigger("send_counter_attack");
    set_timer("progress_check", objective_delay);
  }

  trigger destroy_barracks( !find_build( COMPUTER, "barracks") ) {
    objective_complete("destroy_barracks");
    counter_attack_green_light = true; 
    set_timer("progress_check", objective_delay);
  }

  trigger destroy_stable( !find_build( COMPUTER, "stable") ) {
    objective_complete("destroy_stable");
    set_timer("progress_check", objective_delay);
  }

  trigger counter_attack( counter_attack_green_light ) {
    enable_all_unit_ai(HUMAN);
    create_unit_in_group( COMPUTER, 58, 71, "Arquebusiers", 3 );
    group_attack_to_order( COMPUTER, amiens_x, amiens_y);
    add_objective($S("Use your foot troops and knights to defeat the French ambush."), "defeat_french_attack", "defeat_french_sneak_attack.wav");
    // WAV:  There were Arquebusiers garrisoned in the French barracks!
    //       Select your units and right click on the French troops to attack!
    play_objective_sound("defeat_french_attack");
    enable_trigger("out_of_troops");
    enable_trigger("defeated_french_attack");
  }

  trigger out_of_troops( num_military_units( HUMAN ) < 5 ) {
    create_unit_upgrade( HUMAN, 49, 27, "Knight", 5);
    for( i = 0; i < num_type(HUMAN, "Knight"); i++ ) {
      unit_attack_to_order( HUMAN, find_unit( HUMAN, "Knight"), 52, 61 );
    }
    //WAV:  We're running low on men, but we had some knights being trained in the stable that are now ready to fight!
    play_sound("reinforcements.wav");
    enable_trigger("out_of_troops");
  }

  trigger defeated_french_attack( !object_type_near( COMPUTER, "Arquebusiers", 1, amiens_x, amiens_y, 33) ) {
    objective_complete("defeat_french_attack");
    play_sound("defeated_french_attack.wav");
    // WAV: Congratulations - you have defeated the French attempt to reclaim Amiens!
    disable_trigger("out_of_troops");
    enable_trigger("buildings_destroyed");
    if( ready_to_destroy_buildings && (find_build( COMPUTER, "barracks") || find_build( COMPUTER, "stable"))) {
      enable_trigger("remember_buildings");
    }
  }

  trigger remember_buildings( sound_finished() ) {
    // WAV:  Now continue to attack the remaining French military buildings.
    play_sound("remember_buildings.wav");
  }

  trigger buildings_destroyed( sound_finished() && ready_to_destroy_buildings && !find_build( COMPUTER, "barracks") && !find_build( COMPUTER, "stable" ) ) {
    //WAV:  Good.  We have destroyed all the French troops and buildings around Amiens.  I think we're safe to focus on 
    //      repairing the city and starting to gather resources.
    play_sound("focus_on_rebuilding.wav");
    enable_trigger("french_citizens");

    for( i = 0; i < 4; i++ ) {
      citizen_id = create_unit(HUMAN, 70, 79, "Citizen", 1);
      unit_move_order( HUMAN, citizen_id, citizen_rally_x, citizen_rally_y );
    }
    
    //supply_wagon_id = create_unit(HUMAN, 71, 80, $S("supply wagon"), 1);
    //unit_move_order( HUMAN, supply_wagon_id, 54, 65 );
  }

  trigger french_citizens( sound_finished() ) {

    if( city_being_assimilated( HUMAN, $S("Amiens") ) ) {
      city_assimilate(HUMAN, $S("Amiens"));
    }
    //disable_trigger("military_buildings_selected");

    // WAV:  A few enlightened French citizens have become sympathetic to our cause and have volunteered to aid our rightful claim of the French throne.
    // They have agreed to help us rebuild Amiens to its former glory.
    play_sound("french_citizens.wav");

    move_camera( 59, 68 );

    heal_object( HUMAN, find_build( HUMAN, "barracks" ), 100);
    heal_object( HUMAN, find_build( HUMAN, "stable" ), 100 );
    heal_object( HUMAN, find_build( HUMAN, "siege factory"), 100 );
    heal_object( HUMAN, find_build( HUMAN, "Temple"), 100 );
    heal_object( HUMAN, find_build( HUMAN, "Library"), 100 );


    add_objective($S("Have the citizens repair Amiens."), "repair_amiens", "repair_amiens.wav");

    enable_trigger("start_citizens_repair");
  }

  trigger start_citizens_repair( sound_finished() ) {
    // WAV:  Select your citizens then right click on Amiens to have them start repairing the city.
    play_objective_sound("repair_amiens");
    enable_trigger("amiens_repairing");
  }

  trigger amiens_repairing( has_repair_order( HUMAN, find_unit( HUMAN, "citizen" ) ) || ( object_health( HUMAN, amiens_id ) > 95 ) ) {
    // NEW: WAV:  Good, while the citizens are repairing Amiens, let us discuss how we can gather resources to build more troops and buildings.
    objective_complete("repair_amiens");
    play_sound("amiens_repairing.wav");
    //enable_trigger("supply_wagon");
    
    enable_trigger("resource_intro");
  }

  //trigger supply_wagon( sound_finished() ) {
  //  play_sound("supply_wagon.wav" );
  //  supply_wagon_id = find_unit( HUMAN, "Supply Wagon" );
  //  supply_wagon_x  = object_position_x( HUMAN, supply_wagon_id );
  //  supply_wagon_y  = object_position_y( HUMAN, supply_wagon_id );
  //  center_camera_on(HUMAN, supply_wagon_id );
  //  ping( HUMAN, HUMAN, supply_wagon_x, supply_wagon_y );
  //  // WAV: Supply wagons heal all ground units close by.
  //  //      You can see which units are being healed by the green glow underneath them. 
  //  //      You can build your own supply wagons at siege factories. Supply wagons also cause 
  //  //      nearby siege units to fire more quickly.
  //  enable_trigger("onto_resources");
  //}

  //trigger onto_resources( sound_finished() ) {
  //  play_sound("think_about_resources.wav");
  //  // WAV: Now that our troops are being healed, let us discuss how we can gather resources to purchase more troops and buildings.
  //  enable_trigger("resource_intro");
  //}

  trigger resource_intro( sound_finished() ) {
    play_sound("intro.wav");
  //WAV:  Our resources are displayed in the upper left part of the screen.  From top to bottom, they are. . .
    draw_screen_arrow_line(250, 65, 150, 65, 0);
    enable_trigger ("show_food");
    set_timer("progress_check",objective_delay);
  }

  trigger show_food( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(200, 33, 100, 33, 0);
  //WAV: food
    play_sound("food.wav");
    enable_trigger ("show_wood");
  }

  trigger show_wood( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(200, 53, 100, 53, 0 );
  //WAV: timber
    play_sound("wood.wav");
    enable_trigger ("show_metal");
  }
  
  trigger show_metal( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(200, 74, 100, 74, 0 );
  //WAV: metal
    play_sound("metal.wav");
    enable_trigger ("show_wealth");
  }

  trigger show_wealth( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(200, 93, 100, 93, 0 );
  //WAV: wealth.
    play_sound("wealth.wav");
    enable_trigger ("show_knowledge");
  }

  trigger show_knowledge( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(200, 114, 100, 114, 0);
  //WAV: and knowledge.
    play_sound("knowledge.wav");
    enable_trigger("Intro2");
  }

  trigger Intro2( sound_finished() ) {
    clear_all_arrows();
    play_sound ("num_on_left.wav");
  //WAV: The number on the left shows how much of a resource you have. You have approximately
    enable_trigger ("show_food2");
    set_timer("progress_check",objective_delay);
  }

  trigger show_food2( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(167, 33, 67, 33, 0);
    play_sound("food_amount.wav");
  //WAV: 300 food
    //enable_trigger("show_wood2");
    enable_trigger("Intro3");
  }

  /*
  trigger show_wood2( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(167, 53, 67, 53, 0 );
    play_sound("wood_amount.wav");
  //WAV: 200 timber
    enable_trigger("show_metal2");
  }

  trigger show_metal2( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(167, 74, 67, 74, 0 );
    play_sound("metal_amount.wav");
  //WAV: 50 metal
    enable_trigger("show_wealth2");
  }

  trigger show_wealth2( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(167, 93, 67, 93, 0 );
    play_sound("wealth_amount.wav");
  //WAV: 100 wealth
    enable_trigger("show_knowledge2");
  }

  trigger show_knowledge2( sound_finished() ) {
    clear_all_arrows();
    draw_screen_arrow_line(167, 114, 67, 114, 0);
    play_sound("knowledge_amount.wav");
  //WAV: and 100 knowledge
    enable_trigger("Intro3");
  }
  */

  trigger Intro3 (sound_finished()) {
    clear_all_arrows();
    draw_screen_arrow_line(193, 33, 93, 33, 0);
    play_sound("num_on_right.wav");
  //WAV: The number on the right shows our income level of each resource.  Right now, we have very little food income.
  //To get food, we must direct our citizens to build farms.
    enable_trigger("farm_check");
  }

  // =========
  // end Intro
  // =========

  // =========
  // Farm Time
  // =========
  
  trigger farm_check( ) {
    if( find_build( HUMAN, "farm" ) ) {
      enable_trigger("check_zoom");
    } else {  
      enable_trigger("Build_farm");
    }
  }

  trigger Build_farm( sound_finished() ) {
    clear_all_arrows();
    //WAV: Select one of your citizens and have them build a farm.
    add_objective($S("Select a citizen and build a farm."),"build_farm","build_farm.wav");
    play_objective_sound("build_farm");
    highlight_build_option ("farm");
    enable_trigger ("Farm");
    enable_trigger("farm_building");
    enable_trigger("farm_built");
    enable_trigger("all_busy");
    set_timer("progress_check",objective_delay);
  }

  trigger Farm (build_option_selected ("farm")) {
    disable_trigger("all_busy");
    objective_complete("build_farm");
    clear_highlight();
  //WAV: Place the farm near your city
    add_objective($S("Place the farm near the city."),"place_farm","placefarm.wav");
    play_objective_sound("place_farm");
    set_timer("progress_check",objective_delay);
    enable_trigger("farm_deselected");
  }
  
  trigger all_busy( !find_idle_citizen( HUMAN ) && sound_finished() ) {
    // WAV:  All of your citizens are busy repairing Amien, but
    //       feel free to pull one away to build the farm.
    play_sound("pull_citizen_away.wav");
  }

  trigger farm_deselected( !build_option_selected("farm") && !find_inactive_build( HUMAN, "farm") && sound_finished() ) {
    // WAV:  Right clicking when trying to place a building will clear the selection.  To place a building, you need to select the building then left click on the location that you want to place it in.
    play_sound("building_deselected.wav");
  }


  trigger farm_building( find_inactive_build(HUMAN, "farm") ) {
    clear_highlight();
    disable_trigger("farm_deselected");
    objective_complete("place_farm");
  }

  trigger farm_built(find_build (HUMAN, "farm")) {
    clear_highlight();
    objective_complete("build_farm");
    objective_complete("place_farm");
    disable_trigger("Farm");
    disable_trigger("farm_building");
    play_sound ("farmbuilt.wav");
  //WAV: When the farm is completed, we get a permanent increase to our food income as long as the citizen works on the farm. 
  //Look again at the upper left, and you'll see that our food income has risen from +10 to +20.
    draw_screen_arrow_line(193, 33, 93, 33, 0);

    enable_trigger("check_zoom");
    set_timer("progress_check",objective_delay);
  }
  //=============
  //end Farm Time
  //=============
  
  //===================
  //begin zoom out time
  //===================

  trigger check_zoom() {
    if( has_zoomed_out ) {
      enable_trigger ("Time_for_wood");
    } else {
      enable_trigger("learn_zoom_out");
    }
  }

  trigger learn_zoom_out( sound_finished() ) {
    clear_all_arrows();
    disable_trigger("check_zoom_out");
    // WAV:: We need to get a better view of the terrain to help find good places to gather wood and metal.
    //       We can zoom out by rolling the mouse wheel backwards or pressing the page up key multiple times.
    play_sound("need_to_zoom_out.wav");
    enable_trigger("zoom_out_now");
  }

  trigger zoom_out_now( sound_finished() ) {
    add_objective($S("Zoom out by rolling the mousewheel backwards or pressing the Page Up key."), "zoom_out", "need_to_zoom_out.wav");
    // WAV:: Try zooming out now:
    play_sound("zoom_out_now.wav");
    enable_trigger("now_zoomed_out");
  }

  trigger now_zoomed_out( is_zoomed_out() ) {
    objective_complete("zoom_out");
    // WAV:: Good.  You can zoom in by rolling the mouse wheel forward or pressing the page down key.  
    //       Feel free to zoom in and out at any time.
    play_sound("zoom_complete.wav");
    enable_trigger("Time_for_wood");
  }

  // =============
  // End zoom time
  // =============

  // =============
  // Time for Wood
  // =============
  trigger Time_for_wood( ) {
    Wood_ID = find_build( HUMAN, "Woodcutter's Camp");
    if( Wood_ID >= 0 ) {
      enable_trigger("already_built_wood");      
    } else {
      enable_trigger("need_to_build_wood");
    }
  }

  trigger already_built_wood( sound_finished() ) {
    clear_all_arrows();
    // WAV:  The next step is to learn how to gather timber, but I see you already have a woodcutter's camp built.
    //       You are a fast learner, but there are a few things you should know.
    play_sound("already_have_woodcutter.wav");
    fast_wood_learner = true;
    enable_trigger("prompt_select_wood");
  }

  trigger need_to_build_wood(sound_finished ()) {
    clear_all_arrows();
    add_objective($S("Select a citizen and build a Woodcutter's Camp."), "build_woodcutters_camp", "timeforwood.wav");
    play_objective_sound("build_woodcutters_camp");
  //WAV: Now let's increase our timber income. Timber comes from the Woodcutters Camp, also built by citizens.
  //Select an idle citizen and build a Woodcutters Camp.
    highlight_build_option("Woodcutter's Camp" );
    enable_trigger("Build_wood");
    enable_trigger("wood_building");
    enable_trigger("Select_wood");
    enable_trigger("wood_built");
    
    if( !find_idle_citizen(HUMAN) ) {
      enable_trigger("all_citizens_assigned");
    }
    set_timer("progress_check",objective_delay);
  }

  trigger all_citizens_assigned( sound_finished() && !find_idle_citizen(HUMAN) ) {
    // WAV:  You have been very industrous and assigned all your citizens to work. 
    //       We need to select one of your citizens that are already working and have them
    //       build a woodcutter's camp.
    play_sound("all_citizens_assigned.wav");
  }

  trigger Build_wood (build_option_selected ("Woodcutter's Camp") && sound_finished() ) {
    disable_trigger("all_citizens_assigned");
    objective_complete("build_woodcutters_camp");
    clear_highlight();
    add_objective($S("Place your Woodcutters Camp."), "place_camp", "placewood.wav");
    play_objective_sound ("place_camp");
    add_flag(32,65);
    ping(HUMAN, HUMAN, 36, 69);
    move_camera(32, 65);
  //WAV: Woodcutters are placed near forests. They can be placed anywhere within your national
  //borders. Trees will highlight as you place your Camp:the more highlighted trees, the
  //more wood your camp will produce. Place your Woodcutters Camp now.
    enable_trigger ("wood_built");
    enable_trigger("wood_deselected");
    set_timer("progress_check",objective_delay);
  }

  trigger wood_deselected( !build_option_selected("Woodcutter's Camp") && !find_inactive_build( HUMAN, "Woodcutter's Camp") && sound_finished() ) {
    // WAV:  Right clicking when trying to place a building will clear the selection.  To place a building, 
    //       you need to select the building then left click on the location that you want to place it in.
    play_sound("building_deselected.wav");
  }

  trigger wood_building( find_inactive_build( HUMAN, "Woodcutter's Camp" ) ) {
    disable_trigger("wood_deselected");
    clear_flags();
    clear_highlight();
    objective_complete("build_woodcutters_camp");
    objective_complete("place_camp");
    set_timer("progress_check",objective_delay);
  }

  trigger wood_built( find_build( HUMAN, "Woodcutter's Camp") && sound_finished() ) {
    clear_highlight();
    objective_complete("place_camp");
    objective_complete("build_woodcutters_camp");
    disable_trigger("wood_building");
    disable_trigger("Build_wood");
    objective_complete("place_camp");

    Wood_ID = find_build(HUMAN, "Woodcutter's Camp");
    draw_screen_arrow_line(193, 53, 93, 53, 0);

    //WAV: We completed our woodcutter's camp and now our timber income has gone from +70 to +80.  
    //Unlike the farm, the woodcutter's camp can have a number of citizens assigned to work on it.
    play_sound("wood_built.wav");
    enable_trigger("prompt_select_wood");
  }

  trigger prompt_select_wood(sound_finished()) {
    clear_all_arrows();
    add_objective($S("Select your woodcutter's camp."), "select_camp", "select_woodcamp.wav");
    //WAV: Select your woodcutter's camp.
    play_objective_sound("select_camp");
    enable_trigger("Select_wood");
  }

  trigger Select_wood (object_selected(HUMAN, Wood_ID)) {
    disable_trigger("wood_building");
    disable_trigger("Build_wood");

    // point to faces 
    x_loc = get_button_left("right_window") + 140;
    y_loc = get_button_top("right_window") + 130;
    draw_screen_arrow_line( x_loc - 100, y_loc - 100, x_loc, y_loc, -1 );

    objective_complete("select_camp");
    play_sound("gather_build_display.wav");
  //WAV: At the bottom of the screen, there is a display of the faces of the citizens working at the woodcutter's camp.
  //The number of empty faces shows how many more citizens can be assigned to the camp.  Each citizen
  //assigned to a woodcutter's camp generates an additional +10 wood income.
    if( num_workers_at_building( HUMAN, wood_id) ==  1 ) {
      enable_trigger ("assign_wood");
    } else {
      enable_trigger("Commerce_cap_check");
    }

    enable_trigger("catch_camp_deselect");
    set_timer("progress_check",objective_delay);
  }

  trigger catch_camp_deselect( !object_selected(HUMAN, Wood_ID) ) {
    clear_all_arrows();
  }

  trigger assign_wood( sound_finished() ) {
    add_objective($S("Assign another citizen to the woodcutter's camp."), "assign_workers_to_camp", "assign_to_wood.wav" );
    // Select one of your idle citizens and right click on the woodcutter's camp to assign them to work there.
    play_objective_sound("assign_workers_to_camp");
    enable_trigger("assigned_wood");
  }

  trigger assigned_wood((num_workers_at_building (HUMAN, Wood_ID) > 1) ||  (num_workers_at_building( HUMAN, Wood_ID) == max_workers_at_building(HUMAN, Wood_ID)) ) {
    objective_complete("assign_workers_to_camp");
    clear_all_arrows();
    disable_trigger("catch_camp_deselect");
    objective_complete("assign_workers_to_camp");
    play_sound("woodassigned.wav");
  //WAV: Good!  We're now on our way to collect all the timber we need to build our army.
    enable_trigger("Commerce_cap_check");
    set_timer("progress_check",objective_delay);
  }
  // =================
  // end Time for Wood
  // =================

  // ============
  // Commerce Cap
  // ============

  trigger Commerce_cap_check( ) {
    if( have_tech( HUMAN, "Barter" ) ) {
      enable_trigger("mine_time");
    } else {
      if( !( num_workers_at_building( HUMAN, Wood_ID ) > 1 ) ) {
        set_base_rate( HUMAN, "timber", 100 );
      }

      enable_trigger("Commerce_cap");
    }
  }

  trigger Commerce_cap( commerce_cap_warning (HUMAN) ) {
    clear_all_arrows();
    play_sound ("commercecaphit.wav");
  //WAV: We are now gathering more timber.  However, look at the resource readout for timber again,
  // and notice that it is flashing yellow. This means that some of the timber we are gathering is going to waste.  
  // This is because we are currently at our commerce cap, which represents the rate at which our nation can deal 
  // with incoming resources.  We can research commerce technology at the library to increase our commerce cap.
    draw_screen_arrow_line(250, 55, 150, 55, 0);

    if( num_type( HUMAN, "library" ) ) {
      enable_trigger ("select_library");
    } else {
      enable_trigger("build_library");
    }

    set_timer("progress_check",objective_delay);
  }

  trigger build_library( sound_finished() ) {
    add_objective( "Build a library.", "build_library", "build_library.wav");
    play_objective_sound("build_library");
    highlight_build_option("library");
    // WAV: We need to build a library to perform research.  Select a citizen and have them build a library.
    enable_trigger("library_building");
    enable_trigger("library_built");
  }

  trigger library_building( find_inactive_build(HUMAN, "library") ) {
    clear_highlight();
  }

  trigger library_built( find_build( HUMAN, "library" ) ) {
    objective_complete("build_library");
    enable_trigger("select_library");
  }

  trigger select_library( sound_finished() ) {
    clear_all_arrows();
    add_objective($S("Select your library."), "select_library", "select_library.wav");
    center_camera_on(HUMAN, find_build (HUMAN, "Library"));
    play_objective_sound("select_library");
    enable_trigger("library_selected");
    set_timer("progress_check",objective_delay);
  }
  
  trigger library_selected( object_selected( HUMAN, find_build( HUMAN, "Library" ) ) ) {
    objective_complete("select_library");

    build_display_left = get_button_right("left_window");
    build_display_top  = get_button_top("left_window");
    draw_screen_arrow_line( build_display_left + 100, build_display_top - 100, build_display_left, build_display_top, 0 );

    // WAV:  In the lower left, the library shows you all the research currently available.  The red track represents military research, the blue track represents civic research,
    // the green track represents commerce research, and the yellow track represents science research.
    play_sound("learn_about_library.wav");
    enable_trigger("research_barter");
  }

  trigger research_barter( sound_finished() ) {
    clear_all_arrows();
    add_objective($S("Research the green Barter technology in the Commerce line at the library."), "research_barter","libraryselected.wav");
    play_objective_sound("research_barter");
  //WAV: Lets research the first green commerce technology, Barter, to increase our commerce cap.
    highlight_tech ("Barter");
    enable_trigger ("Barter_clicked");
    enable_trigger("researching_barter");
    set_timer("progress_check",objective_delay);
  } 

  trigger researching_barter( researching_tech( HUMAN, "Barter" ) ) {
    objective_complete("research_barter");
    clear_highlight();
  }

  trigger Barter_clicked (have_tech( HUMAN, "Barter" )) {
    objective_complete("research_barter");
    //disable_trigger ("Researching_green");
    clear_highlight();
    play_sound ("uncapped.wav");
  //WAV: Good. Now your Commerce Cap has been raised. You can see that your income of
  //Timber has increased because you were gathering more than the old cap allowed. Now let's learn about Wealth.
    enable_trigger ("Mine_time");    
    draw_screen_arrow_line(193, 53, 93, 53, 0);
    set_timer("progress_check",objective_delay);
  }
  //==========================================================

  //=========
  //Mine Time
  //=========
  trigger Mine_time (sound_finished ()) {
    clear_all_arrows();
  //WAV: We can start gathering metal by using a citizen to construct a metal mine.
  //     Find an idle citizen and have them start building a mine near the mountain.
    add_objective($S("Select a citizen and build a mine near the mountain."),"build_mine", "nowmetal.wav");
    play_objective_sound("build_mine");
    highlight_build_option("Mine");
    enable_trigger("Mine");
    enable_trigger("mine_building");
    enable_trigger("mine_built");
    //enable_trigger("Select_mine");
  
    if( find_idle_citizen( HUMAN ) > -1 ) {
      enable_trigger("idle_citizen");
    } else {
      enable_trigger("citizen");
    }

    set_timer("progress_check",objective_delay);
  }

  trigger idle_citizen( sound_finished() ) {
    mini_map_x = get_button_center_x("mid_window");
    mini_map_y = get_button_top("mid_window");
    draw_screen_arrow_line( mini_map_x + 134, mini_map_y + 23, mini_map_x + 134, mini_map_y + 123, 0);

    //WAV: To find an idle citizen to build a mine, you can use the "idle citizen" button that is located near the minimap.  
    // Click on it to select an idle citizen and then have them build a mine.
    play_sound("idle_citizen.wav");
    enable_trigger("idle_citizen_sound_complete");
  }

  trigger idle_citizen_sound_complete( sound_finished() && object_type_selected( HUMAN, "Citizen") ) {
    clear_all_arrows();
    highlight_build_option( "Mine" );
  }

  trigger citizen( sound_finished() && !find_inactive_build( HUMAN, "Mine" ) ) {
    //WAV: We will need to use one of your citizens working on another task to start building the mine.  
    // Try grabbing a citizen from the woodcutter's camp and 
    // direct them to build a mine.
    play_sound("citizen.wav");
  } 

  trigger Mine(build_option_selected("Mine")) {
    clear_all_arrows();
    disable_trigger("idle_citizen");
    objective_complete("build_mine");
    clear_highlight();
    mine_x = 68;
    mine_y = 50;
    move_camera( mine_x, mine_y );
    ping( 1, 1, mine_x, mine_y );
    add_flag( mine_x, mine_y );
    add_objective($S("Place the mine near the mountain."), "place_mine", "placemine.wav");
    play_objective_sound("place_mine");
  //WAV: Metal mines can be built next to mountains or cliffs. Like the woodcutter's camp, mines don't need to be near a city, but they do
  //    "have to be within your national borders.  Place your mine next to the mountain that is to the right of Amiens. 
    enable_trigger ("mine_building");
    enable_trigger("mine_deselected");
    set_timer("progress_check",objective_delay);
  }

  trigger mine_deselected( !build_option_selected("Mine") && !find_inactive_build(HUMAN, "Mine") && sound_finished() ) {
    play_sound("building_deselected.wav");
    // WAV:  Right clicking when trying to place a building will clear the selection.  To place a building, 
    //       you need to select the building then left click on the location that you want to place it in.
  }

  trigger mine_building( find_inactive_build(HUMAN, "Mine") ) {
    clear_highlight();
    disable_trigger("mine_deselected");
    clear_flags();
    objective_complete("place_mine");
  }

  trigger mine_built (find_build (HUMAN, "Mine")) {
    objective_complete("place_mine");
    objective_complete("build_mine");
    clear_objectives();
    disable_trigger("Mine");
    
    Mine_ID = find_build (HUMAN, "Mine");
    // WAV: Well done.  Each mountain can support one metal mine.  The bigger the mountain, the more citizens can
    // work at that mine.
    play_sound("mine_built.wav");
    enable_trigger("Build_citizen");
    set_timer("progress_check",objective_delay);
  }

  /*
  trigger Select_mine(object_selected (HUMAN, Mine_ID)) {
    objective_complete("select_mine");
    clear_objectives();
    disable_trigger("Mine");
    disable_trigger("Building_mine");
    clear_highlight();

    add_objective($S("Select a citizen and assign him to the mine by right-clicking on the mine"), "assign_miner", "mineselected.wav");
    play_objective_sound("assign_miner");
  //WAV: The number of empty faces shows how many more citizens can be assigned to the mine. Each citizen
  //assigned to a mine generates an additional +10 metal income. To assign citizens to work at the mine,
  //select one and then right click on the mine.
    Workers_at_mine = num_workers_at_building(HUMAN, Mine_ID);
    enable_trigger ("Assign_miners");
    set_timer("progress_check",objective_delay);
  }
  */

  /*
  trigger Assign_miners ((num_workers_at_building(HUMAN, Mine_ID) > Workers_at_mine) || (num_workers_at_building( HUMAN, Mine_ID) == max_workers_at_building(HUMAN, Mine_ID))) {
    objective_complete("assign_miner");
    play_sound ("workersassigned.wav");
  //WAV: Good! You can also build new citizens and assign them to work at the mine
  //using the rally point. Newly built citizens will go work there until it's"
  //full; then they'll look for other things to do.
    enable_trigger ("Build_citizen");
    set_timer("progress_check",objective_delay);
  }
  */
  //=============
  //end Mine Time
  //=============

  //======================
  //Build Citizens/Pop Cap
  //======================
  trigger Build_citizen( sound_finished() ) {
    if( !have_tech(HUMAN, "The Art of War") ) {
      set_population_cap( HUMAN, population( HUMAN ) + 1 );
    } else {
      enable_trigger("check_auto_citizen");
    }
    //add_objective("Train two citizens at your city.", "train_citizens", "newcitizen.wav");
    //play_objective_sound("train_citizens");
    //WAV: Now, let's build more citizens who can gather more resources or construct new buildings.
    play_sound("newcitizen.wav");
    //highlight_train_option("Citizen");
    set_timer("progress_check",objective_delay);  
    enable_trigger("Pop_cap_hit");
    enable_trigger("create_citizen");
    enable_trigger("building_citizens");
    enable_trigger("citizen_city_selected");
  }

  trigger create_citizen( sound_finished() ) {
    citizen_count = num_type( HUMAN, "Citizen" );
    add_objective($S("Create two citizens at your city."), "train_citizens", "create_citizen.wav");
    // To create two more citizens, select your city, then select the create citizen button twice
    play_objective_sound("train_citizens");
  }

  trigger citizen_city_selected( object_selected( HUMAN, amiens_id ) ) {
    highlight_train_option( "Citizen");
  }

  trigger building_citizens( num_type_queued( HUMAN, amiens_id, "Citizen") > 0 ) {
    clear_highlight();
  }

  //And another new section here for pop cap and red tech
  trigger Pop_cap_hit (pop_cap_warning (HUMAN)) {
    disable_trigger("building_citizens");
    draw_screen_arrow_line(get_screen_width() - 160, 125, get_screen_width() - 160, 25, 0 );
    play_sound ("populationblinking.wav");
  //WAV: Now notice in the top right corner of the screen that your population indicator is blinking red.
    enable_trigger("Pop_library");
  }

  trigger Pop_library( sound_finished() ) {
    clear_all_arrows();
    play_sound("poplimit.wav");
    // The blinking indicates that you have reached your current population limit, meaning that your nation cannot support any more citizens or troops.
    // You may increase your population limit through research in the library.
    enable_trigger("select_library2");
    set_timer("progress_check",objective_delay);
  }

  trigger select_library2( sound_finished() ) {
    objective_complete("select_library");
    add_objective($S("Select the red military tech, The Art of War, in the Libary to upgrade."), "research_red_tech", "do_research.wav");
    play_objective_sound("research_red_tech");
    highlight_tech("The Art of War");
    enable_trigger("Raise_pop_cap");
    enable_trigger("military_researching");
    pop_cap = population_cap (HUMAN);
    //WAV: Select your library and click on the red Military tech, The Art of War, to upgrade.
  }

  trigger military_researching( researching_tech(HUMAN, "The Art of War") ) {
    clear_highlight();
    objective_complete("research_red_tech");
    set_timer("progress_check",objective_delay);
    play_sound("effects_of_research.wav");
    //WAV: Military technology effects your nations ability to organize large groups of military and civil units.
    //     By researching the Art of War, your nation will be able to command more units on the field.
  }

  //and after they do so,
  trigger Raise_pop_cap ( have_tech(HUMAN, "The Art of War") && sound_finished() ) {

    objective_complete("research_red_tech");
    objective_complete("train_citizens");
    play_sound ("milcaplift.wav");
    enable_trigger("check_auto_citizen");
  /***WAV: Now that we have completed our research on the Art of War, our population cap has increased. We are able to build a larger army!***/
  }
  //===========================
  // end Build Citizens/Pop Cap
  //===========================

  //===========================
  // begin Auto-peasant
  //===========================

  trigger check_auto_citizen( have_tech( HUMAN, "The Art of War") && ( num_type( HUMAN, "citizen") >= ( citizen_count + 2 ) ) && sound_finished() ) {
    disable_trigger("Pop_cap_hit");
    objective_complete("train_citizens");

    if( find_idle_citizen( HUMAN ) > 0 ) {
      enable_trigger("auto_assign_citizen");
    } else {
      enable_trigger("Build_army");
    }
  }

  trigger auto_assign_citizen( sound_finished() ) {
    add_objective($S("Assign all your free citizens to work at the mine or build new farms."), "assign_two_citizens", "assign_two_citizens.wav" );
    // WAV:  Now we have more citizens we can use to gather additional resources.  
    //       We currently have plenty of wood income, so assign them to work at the mine to gather more metal
    //       or have them build more farms to increase your food income.
    play_objective_sound("assign_two_citizens");
    citizen_1 = find_idle_citizen( HUMAN );
    citizen_2 = find_idle_citizen( HUMAN );

    enable_trigger("citizens_assigned");
    enable_trigger("still_idle");
    set_timer( "still_idle", 15 );
  }

  trigger still_idle( timer_expired( "still_idle" ) ) {
    // WAV:  Remember to left click to select your citizens, and right click to assign them to work at a location.
    play_sound("right_click_to_assign.wav");
    set_timer("still_idle", 30);
    enable_trigger("still_idle");
  }

  trigger citizens_assigned( ( has_build_order( HUMAN, citizen_1 ) || has_gather_order( HUMAN, citizen_1 ) ) && ( has_build_order(HUMAN, citizen_2) || has_gather_order(HUMAN, citizen_2) ) ) {
    objective_complete("assign_two_citizens");
    disable_trigger("still_idle");
    play_sound("citizens_assigned.wav");
    // WAV: Good.  Feel free to build more citizens and assign them to gather more resources.
    enable_trigger("Build_army");
  }


  //Build an army=============================================
  trigger Build_army (sound_finished ()) {
  //WAV: We've started gathering food, timber, and metal. It's time to build up our army to attack Compienge.
  // We have defeated some of the French troops that launched the surprise attack, but they still have a sizable army of tough gunpowder units guarding the city.
  // In order to defeat them, we will need exploit their excitement about their new weaponry.
    play_sound ("buildarmy.wav");

    gain_upgrade( HUMAN, "The Art of War");
    gain_upgrade( HUMAN, "Mercenaries");
    gain_upgrade( HUMAN, "Standing Army");
    gain_upgrade( HUMAN, "Conscription");
    gain_upgrade( HUMAN, "Levee en Masse");
    enable_type("catapult");
    enable_type("bowmen");
    enable_type("slingers");
    enable_type("hoplites");
    gain_upgrade( HUMAN, "Trebuchet");
    gain_upgrade( HUMAN, "Longbowmen" );
    gain_upgrade( HUMAN, "King's Longbowmen");
    gain_upgrade( HUMAN, "Javelineers");
    gain_upgrade( HUMAN, "Elite Javelineers");
    gain_upgrade( HUMAN, "Phalanx" );
    gain_upgrade( HUMAN, "Pikemen");
    gain_upgrade( HUMAN, "Light Cavalry");
    gain_upgrade( HUMAN, "Knight");
    gain_upgrade( HUMAN, "Heavy Cavalry Archer");
    gain_upgrade( HUMAN, "Explorer" );

    knight_count = num_type( HUMAN, "Knight") + 6;
    treb_count = num_type( HUMAN, "Trebuchet") + 1;
    longbow_count = num_type( HUMAN, "King's Longbowmen") + 5;

    enable_trigger("Army_built");
    enable_trigger("build_knights");
    enable_trigger("get_more_resources");
    enable_trigger("knights_ready");
    enable_trigger("trebs_ready");
    enable_trigger("longbow_ready");

    set_timer("progress_check",objective_delay);
  }

  trigger build_knights( sound_finished() ) {
    // WAV:  We know that the French have been pushing their technological advantage by training only Arquebusiers to defend Compienge.
    // While the Arquebusiers are formidable, the French lack a diverse set of units to defend against any attack.
    // Heavy calvary has a decided advantage against gunpowder troops, but fight poorly against pikemen.
    // Since the French don't have any pikemen to defend with, we could build a large number of knights and press the advantage!
    
    //center_camera_on( COMPUTER, compienge_id );
    zoom_in( 77, 83 );
    cutscene_begin();
    show_all_map_enable(HUMAN);
    play_sound("knights_strategy.wav");
    enable_trigger("set_knights");
  }

  trigger set_knights( sound_finished() ) {
    cutscene_end();
    center_camera_on( HUMAN, find_build( HUMAN, "stable" ) );
    show_all_map_disable(HUMAN);

    // WAV:  Let's build 6 knights at the stables to prepare for the attack
    add_objective($S("Build 6 knights at the stable."), "train_knights", "knights_prepare.wav");
    play_objective_sound("train_knights");

    set_timer("queue_timer", 7 );
    
    enable_trigger("check_queued");
    enable_trigger("has_queued");
    enable_trigger("build_longbowmen");
  }

  trigger has_queued( num_type_queued( HUMAN, find_build( HUMAN, "stable"), "Knight" ) > 1 ) {
    player_queued = true;
    disable_trigger("check_queued");
  }

  trigger check_queued( sound_finished() && object_selected( HUMAN, find_build( HUMAN, "stable" ) ) && !player_queued && timer_expired( "queue_timer" ) ) {
    // WAV:  You can click on the build buttons multiple times to queue up multiple units at once.  
    // Try clicking on the knights multiple times to fill up your queue.
    play_sound("queue_knights.wav");
  }

  trigger build_longbowmen( ( knight_count <= num_type_with_queued( HUMAN, "Knight") ) && sound_finished() ) {
    // WAV:  To support the knights, we need to build 5 King's Longbowmen at the barracks.
    //  King's Longbowmen are unique units for the British and are extremely effective against heavy infantry like Pikemen.
    //  Even though our spies insist that the French force consists entirely of Arquebusiers, it doesn't hurt to be safe.
    add_objective($S("Build 5 King's Longbowmen at the barracks."), "train_longbowmen", "train_longbowmen.wav");
    play_objective_sound("train_longbowmen");
    center_camera_on( HUMAN, find_build( HUMAN, "barracks" ) );
    enable_trigger("build_trebuchets");
  }

  trigger build_trebuchets( ( longbow_count <= num_type_with_queued( HUMAN, "King's Longbowmen" ) ) && sound_finished() ) {
    // WAV:  Along with the knights and king's longbowmen, we need another trebuchet to assist in damaging 
    // Compienge and destroying their nearby military buildings.  
    // The sooner we conquer Compienge, the less time the french will have to organize a counter assault.
    // build_trebs.wav

    add_objective($S("Build a trebuchet at the siege factory."), "build_treb", "build_trebs.wav");
    play_objective_sound("build_treb");
    center_camera_on( HUMAN, find_build( HUMAN, "siege factory") );
    enable_trigger("rally_point");
  }

  trigger rally_point( sound_finished() && ( ( num_type_queued( HUMAN, find_build( HUMAN, "barracks" ), "King's Longbowmen" ) > 0 ) || 
                                             ( num_type_queued( HUMAN, find_build( HUMAN, "stable" ), "Knight" )              > 0 ) ||
                                             ( num_type_queued( HUMAN, find_build( HUMAN, "siege factory" ), "Trebuchet" ) > 0 ) ) ) {
    // WAV:  Rally points have been set for your barracks, stable, and siege factory so that when your 
    //     troops are built they will move just below Amiens to prepare for the battle.
    play_sound("rally_point.wav");
  }

  /*
  trigger shopping_list(sound_finished() ) {
    // Build 5 foot troops at the barracks, 3 horse units at the stables, and 2 catapults at the siege factory. 
    play_sound("Shopping_list.wav");
    add_objective($S("Build 5 foot troops at the barracks."),"foot_troups", "Shopping_list.wav");
    add_objective($S("Build 3 horse units at the stables."),"horse_units", "Shopping_list.wav");
    add_objective($S("Build 2 catapults at the siege factory."),"catapults", "Shopping_list.wav");

    enable_trigger("foot_troups");
    enable_trigger("horse_units");
    enable_trigger("catapults");
    enable_trigger("Army_built");
    disable_trigger("Objective_Reminder");
  }

  trigger foot_troups( num_unit_category( HUMAN, $S("foot")) >= 5 ) {
    objective_complete("foot_troups");
    foot_troups_ready = true;
  }

  trigger horse_units( num_unit_category( HUMAN, $S("mounted")) >= 3 ) {
    objective_complete("horse_units");
    horse_units_ready = true;
  }

  trigger catapults(num_unit_category( HUMAN, $S("artillery") ) >= 2 ) {
    objective_complete("catapults");
    catapults_ready = true;
  }
  */

  trigger knights_ready( num_type( HUMAN, "Knight" ) >= knight_count ) {
    objective_complete("train_knights");
    knights_built = true;
  }

  trigger trebs_ready( num_type( HUMAN, "Trebuchet" ) >= treb_count ) {
    objective_complete("build_treb");
    treb_built = true;
  }

  trigger longbow_ready( num_type( HUMAN, "King's Longbowmen" ) >= longbow_count ) {
    objective_complete("train_longbowmen");
    longbow_built = true;
  }

  trigger get_more_resources( resource_warning() && sound_finished() ) {
    //WAV:  If you need more resources, feel free to gather more on your own.  Train more citizens and have them build more farms, or work at the woodcutter's camp
    // or the mine.
    play_sound("gather_more_resources.wav");
  }

  trigger Army_built( knights_built && treb_built && longbow_built  && sound_finished() ) {
    disable_all_triggers ();
    //WAV:: Well done.  We have built an army large enough to battle the French.
    play_sound("army_complete.wav");
    enable_trigger("intro_double_click_select");

    //set_timer( "military_build", 8 );
    //if( !all_military_near( HUMAN, amiens_x, amiens_y, 15 )) {
    //  enable_trigger( "gather_military");
    //} else {
      enable_trigger( "intro_double_click_select");
//    }
  }

  /*
  trigger gather_military( !all_military_near( HUMAN, amiens_x, amiens_y, 15 ) && sound_finished() && timer_expired("military_build") ) {
    
    military_id = find_military( HUMAN );
    while( object_near( HUMAN, military_id, amiens_x, amiens_y, 15 ) ) {
      military_id = find_military( HUMAN );
    }

    center_camera_on( HUMAN, military_id );

    add_objective($S("Move all your military near Amiens."), "gather_military", "gather_military.wav");
    // WAV: Our units are scattered all over the map.  We need to gather them all at amiens before we attack.
    play_objective_sound("gather_military");
    enable_trigger("intro_double_click_select");
  }
  */

  // practice double click
  //trigger intro_double_click_select( all_military_near( HUMAN, amiens_x, amiens_y, 15 ) && sound_finished() && timer_expired("military_build") ) {
  trigger intro_double_click_select( sound_finished() ) {
    //disable_trigger("gather_military");

    center_camera_on( HUMAN, find_unit( HUMAN, "Knight") );
    // WAV:  It is often useful in organizing your troops (and in battle) to select all of a certain type of unit.
    // You can do this by using the left mouse button and double clicking on the type of unit you want to select.
    play_sound("intro_double_click.wav");
    enable_trigger("practice_double_click");
  }

  /*
  trigger intro_double_click_select2( sound_finished() ) {
    // WAV:  It is often useful in organizing your troops (and in battle) to select all of a certain type of unit.
    // You can do this by using the left mouse button and double clicking on the type of unit you want to select.
    play_sound("intro_double_click2.wav");
    enable_trigger("practice_double_click");
  }
  */

  trigger practice_double_click( sound_finished() ) {
    // WAV: Double click on one of your knights to select all of your knights.
    center_camera_on( HUMAN, find_unit(HUMAN, "knight") );
    add_objective($S("Double click using the left mouse button to select all knights."), "practice_double_click", "practice_double_click.wav" );
    play_objective_sound("practice_double_click");
    enable_trigger("all_of_knights_selected");
  }

  trigger all_of_knights_selected( all_object_type_onscreen_selected(HUMAN, "Knight") && !object_type_selected( HUMAN, "Pikemen"   ) && 
                                                                                         !object_type_selected( HUMAN, "King's Longbowmen" ) &&
                                                                                         !object_type_selected( HUMAN, "Trebuchet" ) ) {
    objective_complete("practice_double_click");
    //center_camera_on( HUMAN, amiens_id );
    play_sound("knight_selection_success.wav");
    // WAV:  Good job.  Using this double click method, you can quickly select all of your knights to provide orders to them.  
    // This is very useful in combat.
    enable_trigger("practice_longbow_select");
  }

  trigger practice_longbow_select( sound_finished() ) {
    add_objective($S("Double click on your King's Longbowmen to select them all."), "select_all_longbowmen", "select_all_longbowmen.wav");
    // WAV:  Now practice by selecting all your King's Longbowmen using the double click method.
    play_objective_sound("select_all_longbowmen");
    enable_trigger("all_longbowmen_selected");

  }

  trigger all_longbowmen_selected(  all_object_type_onscreen_selected(HUMAN, "King's Longbowmen") && !object_type_selected( HUMAN, "Knight" ) &&
                                                                                                     !object_type_selected( HUMAN, "Pikemen" ) &&
                                                                                                     !object_type_selected( HUMAN, "Trebuchet" ) ) {
    objective_complete("select_all_longbowmen");

    add_objective($S("Select all your trebuchets."), "select_all_trebs", "select_all_trebs.wav");
    // WAV:  Good, now select all your trebuchets.
    play_objective_sound("select_all_trebs");
    enable_trigger("select_all_trebs");
  }

  trigger select_all_trebs(  all_object_type_onscreen_selected(HUMAN, "Trebuchet") && !object_type_selected( HUMAN, "Knight" ) &&
                                                                                      !object_type_selected( HUMAN, "Pikemen" ) &&
                                                                                      !object_type_selected( HUMAN, "King's Longbowmen" ) ) {
    objective_complete("select_all_trebs");
    // WAV:  Excellent!  Remember this ability.  It can prove to be decisive in battle.
    play_sound("remember_double_click.wav");
    enable_trigger("army_ready");
  }

  trigger army_ready( sound_finished() ) {
    play_sound("armyready.wav");
    disable_trigger("warning");
    disable_trigger("failure");
  //WAV: We're now ready to attack.  Select all of your military units and move them near Compienge.  
  // When they get near the city, direct your trebuchets to attack Compienge, 
  // and have your knights and archers attack the arquebusiers.
    add_objective($S("Defeat French army."), "defeat_french_army", "armyready.wav");
    add_objective($S("Capture Compienge."),  "capture_compienge",  "armyready.wav");
    set_timer("progress_check",objective_delay);
    enable_trigger("french_army_weakened");
    enable_trigger("french_army_defeat");
    enable_trigger("compienge_captured");
    enable_trigger("french_whooped");
    enable_trigger("enable_french_army");
    enable_trigger("butt_kicked");
    enable_trigger("army_deselected");

    //enable_combat_ai( COMPUTER );
    //enable_unit_ai( COMPUTER, -1 );
  }

  trigger warning( any_object_near( HUMAN, 1, warning_point_x, warning_point_y, warning_range ) ) {
    // WAV:  We don't want to engage the French before preparations are complete.  Move your units back toward Amiens until we are ready to attack.
    set_timer( "failure_check", 10 );
    play_sound("warning_sound.wav");
  }

  trigger failure( any_object_near( HUMAN, 1, warning_point_x, warning_point_y, failure_range ) && timer_expired( "failure_check") ) {
    clear_objectives();
    disable_all_triggers();
    // WAV:  It seems you are eager to battle, ready or not!  Defeat the French army and capture Compienge.
    //       If you lose your units, remember to build more at the barracks, stable, and siege factory to continue the battle.
    play_sound("failure_sound.wav");

    add_objective($S("Defeat French army."), "defeat_french_army", "armyready.wav");
    add_objective($S("Capture Compienge."),  "capture_compienge",  "armyready.wav");
    enable_trigger("enable_french_army");
    enable_trigger("french_army_weakened");
    enable_trigger("french_army_defeat");
    enable_trigger("compienge_captured");
    enable_trigger("french_whooped");
    enable_trigger("enable_french_army");
    enable_trigger("butt_kicked");

    gain_upgrade( HUMAN, "The Art of War");
    gain_upgrade( HUMAN, "Mercenaries");
    gain_upgrade( HUMAN, "Standing Army");
    gain_upgrade( HUMAN, "Conscription");
    gain_upgrade( HUMAN, "Levee en Masse");
    enable_type("catapult");
    enable_type("bowmen");
    enable_type("slingers");
    enable_type("hoplites");
    gain_upgrade( HUMAN, "Trebuchet");
    gain_upgrade( HUMAN, "Longbowmen" );
    gain_upgrade( HUMAN, "King's Longbowmen");
    gain_upgrade( HUMAN, "Javelineers");
    gain_upgrade( HUMAN, "Elite Javelineers");
    gain_upgrade( HUMAN, "Phalanx" );
    gain_upgrade( HUMAN, "Pikemen");
    gain_upgrade( HUMAN, "Light Cavalry");
    gain_upgrade( HUMAN, "Knight");
    gain_upgrade( HUMAN, "Heavy Cavalry Archer");
    gain_upgrade( HUMAN, "Explorer" );

    set_timer("progress_check",objective_delay);
  }

  trigger enable_french_army( any_object_near_build( HUMAN, 1, COMPUTER, compienge_id, 20) ) {
    //disable_trigger("show_compienge");
    is_compienge_shown = false;
    disable_trigger("army_deselected");
    // assign all units to attack the knights
    for( num_french_unit = 0; num_french_unit < num_military_units( COMPUTER ); num_french_unit++ ) {
      military_id = find_military( COMPUTER );
      knight_id = find_unit( HUMAN, "Knight");
      if( object_visible( COMPUTER, HUMAN, knight_id ) ) {
        unit_attack_order( COMPUTER, military_id, HUMAN, knight_id );
      } else {
        unit_attack_to_order( COMPUTER, military_id, object_position_x( HUMAN, knight_id ), object_position_y( HUMAN, knight_id ) );
      }
    }

    for( num_french_citizen = 0; num_french_citizen < num_type( COMPUTER, "Citizen" ); num_french_citizen++ ) {
      citizen_id =  find_unit( COMPUTER, "Citizen" );
      unit_move_order( COMPUTER, citizen_id, 150, 150 );
    }
  }

  trigger french_army_weakened( ( num_military_units( COMPUTER ) < 3 ) && ( num_type( HUMAN, "knight" ) > 1 ) ) {
    for( pikemen_count = 0; pikemen_count < 4; pikemen_count++ ) {
      pikemen_id = create_unit_upgrade(COMPUTER, 113, 82, "Elite Pikemen", 1);
      knight_id  = find_unit( HUMAN, "Knight");
      if( object_visible( COMPUTER, HUMAN, knight_id) ) {
        unit_attack_to_order( COMPUTER, pikemen_id, object_position_x(HUMAN, knight_id ), object_position_y( HUMAN, knight_id) );
      } else {
        unit_attack_to_order( COMPUTER, pikemen_id, 67, 74 );
      }
    }

    enable_trigger("warn_player_of_pikemen");
  }

  trigger warn_player_of_pikemen( sound_finished() && object_type_near( COMPUTER, "Elite Pikemen", 1, compienge_x, compienge_y, 25) ) {

    pikemen_id = find_unit( COMPUTER, "Elite Pikemen");
    pikemen_x = object_position_x( COMPUTER, pikemen_id );
    pikemen_y = object_position_y( COMPUTER, pikemen_id );
    
    knight_id = create_unit_upgrade(HUMAN, 103, 81, "Knight", 1);
    unit_attack_to_order( HUMAN, knight_id, pikemen_x, pikemen_y );

    set_explored(HUMAN, pikemen_x, pikemen_y, 10);
    center_camera_on( COMPUTER, pikemen_id );
    // WAV::  The French have realized their mistake and are marching in a force of Elite Pikemen to defeat our knights.
    //        Our knights are vunerable to these units and will be routed if we are not careful!  Select all of your knights by double clicking on them and move them back to Amien!
    //        Once your knights are away, select all of your Longbowmen and have them attack the Pikemen!  Our King's Longbowmen should make quick work of these fools!
    play_sound("warn_player.wav");
  }

  trigger french_army_defeat( sound_finished() && ( num_military_units( COMPUTER ) <= 0 ) ) {
    objective_complete("defeat_french_army");
    army_defeated = true;
    // WAV:  The French army has been routed!!
    play_sound("french_army_routed.wav");

    if( !city_captured( COMPUTER, $S("Compienge") ) ) {
      enable_trigger("now_attack_compienge");
    }
  }

  trigger now_attack_compienge( sound_finished() ) {
    // WAV:  Now that the French army is defeated, have all of your units attack Compienge.
    play_sound("now_attack_compienge.wav");

    computer_library_id = find_build( COMPUTER, "Library");
    computer_temple_id  = find_build( COMPUTER, "Temple" );
    computer_granary_id = find_build( COMPUTER, "Granary" );

    computer_library_health = object_health( COMPUTER, computer_library_id);
    computer_temple_health  = object_health( COMPUTER, computer_temple_id);
    computer_granary_health = object_health( COMPUTER, computer_granary_id);
    enable_trigger("non_city_buildings_damaged");
    enable_trigger("compienge_defeated_but_not_captured");
  }

  trigger compienge_captured( city_captured( COMPUTER, $S("Compienge") ) ) {
    objective_complete("troops_capture_compienge");
    compienge_now_captured = true;
    enable_trigger("compienge_captured_congrats");
  }

  trigger compienge_defeated_but_not_captured( army_defeated && ( object_health( COMPUTER, compienge_id ) < 1 )  ) {
    // WAV:  Compienge has been reduced, now you need to direct your foot units to capture the city.
    play_sound("compienge_reduced.wav");
    enable_trigger("move_in_troops_to_capture");
    set_timer( "advance_troops_timer", 2 );
  }

  trigger move_in_troops_to_capture( !compienge_now_captured && sound_finished() && timer_expired("advance_troops_timer") ) {
    add_objective($S("Select all of your foot units and right click on Compienge to capture the city."), "troops_capture_compienge", "troops_capture_compienge.wav");
    play_objective_sound("troops_capture_compienge");
    // WAV:  Select all of your foot units and right click on Amiens to capture the city.
  }

  trigger non_city_buildings_damaged( !compienge_now_captured && ( ( object_health( COMPUTER, computer_library_id ) < computer_library_health ) || 
                                                                   ( object_health( COMPUTER, computer_temple_id  ) < computer_temple_health  ) || 
                                                                   ( object_health( COMPUTER, computer_granary_id ) < computer_granary_health ) ) ) {
    // WAV:  Some of your units are attacking buildings nearby Compienge but not the city center itself.
    //       We need to capture Compienge as soon as possible, so select all of your units and direct them to 
    //       attack the city center.
    play_sound("focus_on_compienge.wav");
  }

  trigger compienge_captured_congrats( sound_finished() && compienge_now_captured ) {
    objective_complete("capture_compienge");
    compienge_defeated = true;
    // WAV: You have reduced Compeigne!
    play_sound("compienge_leveled.wav");
  }

  trigger french_whooped( army_defeated && compienge_defeated ) {
    // WAV:: You have taken Compeigne and defeated the French army!  This is a tremendous victory for England!  
    // I have a sense that you will do great things.
    play_sound("french_whooped.wav");
    enable_trigger("victorious");
  }

  trigger butt_kicked( num_military_units( HUMAN ) < 4 ) {
    play_sound("butt_kicked.wav");
    // WAV:  We underestimated the ferocity of the French army.  Who knew the french could fight?  We need to build more units at the barracks, 
    //       stable, and siege factory and attack compienge again.
  }

  trigger victorious (sound_finished()) {
    victory(HUMAN);
  }
  //==========================================================
}
